syntax = "proto3";

package order_proto;

option go_package = "english-ai-full/internal/proto_qr/order";

import "google/protobuf/timestamp.proto";



// Main Order message
message Order {
  int64 id = 1;
  int64 guest_id = 2;
  int64 user_id = 3;
  bool is_guest = 4;
  int64 table_number = 5;
  int64 order_handler_id = 6;
  string status = 7;
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;
  int32 total_price = 10;
  repeated DishOrderItem dish_items = 11;
  repeated SetOrderItem set_items = 12;
  string topping = 13;
  string tracking_order = 14;
  bool take_away = 15;
  int64 chili_number = 16;
  string table_token = 17;
  string order_name = 18;  // New field
}
// Order items
message DishOrderItem {
  int64 dish_id = 1;
  int64 quantity = 2;
}

message SetOrderItem {
  int64 set_id = 1;
  int64 quantity = 2;
}

// Detailed order items
message OrderDetailedDish {
  int64 dish_id = 1;
  int64 quantity = 2;
  string name = 3;
  int32 price = 4;
  string description = 5;
  string image = 6;
  string status = 7;
}

message OrderSetDetailed {
  int64 id = 1;
  string name = 2;
  string description = 3;
  repeated OrderDetailedDish dishes = 4;
  int32 user_id = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
  bool is_favourite = 8;
  repeated int64 like_by = 9;
  bool is_public = 10;
  string image = 11;
  int32 price = 12;

  int64 quantity = 13;
}

// Requests
message CreateOrderRequest {
  int64 guest_id = 1;
  int64 user_id = 2;
  bool is_guest = 3;
  int64 table_number = 4;
  int64 order_handler_id = 5;
  string status = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
  int32 total_price = 9;
  repeated DishOrderItem dish_items = 10;
  repeated SetOrderItem set_items = 11;
  string topping = 12;
  string tracking_order = 13;
  bool take_away = 15;
  int64 chili_number = 16;
  string table_token = 17;
  string order_name = 18;  // New field
}

message UpdateOrderRequest {
  int64 id = 1;
  int64 guest_id = 2;
  int64 user_id = 3;
  int64 table_number = 4;
  int64 order_handler_id = 5;
  string status = 6;
  int32 total_price = 7;
  repeated DishOrderItem dish_items = 8;
  repeated SetOrderItem set_items = 9;
  bool is_guest = 10;
  string topping = 11;
  string tracking_order = 12;
  bool takeAway = 15;
  int64 chiliNumber = 16;
  string table_token = 17;
  string order_name = 18;  // New field
}

message PayOrdersRequest {
  oneof identifier {
    int64 guest_id = 1;
    int64 user_id = 2;
  }
}

// Parameters
message OrderIdParam {
  int64 id = 1;
}

message OrderDetailIdParam {
  int64 id = 1;
}

// Responses
message OrderResponse {
  Order data = 1;
}


message OrderDetailedResponse {
  int64 id = 1;
  int64 guest_id = 2;
  int64 user_id = 3;
  int64 table_number = 4;
  int64 order_handler_id = 5;
  string status = 6;
  int32 total_price = 7;
  repeated OrderSetDetailed data_set = 8;
  repeated OrderDetailedDish data_dish = 9;
  bool is_guest = 10;
  string topping = 11;
  string tracking_order = 12;
  bool takeAway = 15;
  int64 chiliNumber = 16;
  string table_token = 17;
  string order_name = 18;  // New field
}

message OrderDetailedListResponse {

  repeated OrderDetailedResponse data = 1;
  PaginationInfo pagination = 2;

}

// Guest
// message Guest {
//   int64 id = 1;
//   string name = 2;
//   int32 table_number = 3;
//   google.protobuf.Timestamp created_at = 4;
//   google.protobuf.Timestamp updated_at = 5;
// }


// ----------- new

message GetOrdersRequest {
  int32 page = 1;  // Page number (1-based)
  int32 page_size = 2;  // Number of items per page
}
message OrderListResponse {
  repeated Order data = 1;
  PaginationInfo pagination = 2;
}

message PaginationInfo {
  int32 current_page = 1;
  int32 total_pages = 2;
  int64 total_items = 3;
  int32 page_size = 4;
}

// Service definition
service OrderService {
  rpc CreateOrder(CreateOrderRequest) returns (OrderResponse);
  rpc GetOrders(GetOrdersRequest) returns (OrderListResponse);
  rpc GetOrderDetail(OrderIdParam) returns (OrderResponse);
  rpc UpdateOrder(UpdateOrderRequest) returns (OrderResponse);
  rpc PayOrders(PayOrdersRequest) returns (OrderListResponse);

  rpc GetOrderProtoListDetail(GetOrdersRequest) returns (OrderDetailedListResponse);
}
