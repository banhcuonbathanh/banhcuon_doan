// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: quanqr/proto_qr/dish/dish.proto

package dish

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DishService_GetDishList_FullMethodName   = "/proto.DishService/GetDishList"
	DishService_GetDishDetail_FullMethodName = "/proto.DishService/GetDishDetail"
	DishService_CreateDish_FullMethodName    = "/proto.DishService/CreateDish"
	DishService_UpdateDish_FullMethodName    = "/proto.DishService/UpdateDish"
	DishService_DeleteDish_FullMethodName    = "/proto.DishService/DeleteDish"
)

// DishServiceClient is the client API for DishService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DishServiceClient interface {
	GetDishList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DishListResponse, error)
	GetDishDetail(ctx context.Context, in *DishIdParam, opts ...grpc.CallOption) (*DishResponse, error)
	CreateDish(ctx context.Context, in *CreateDishRequest, opts ...grpc.CallOption) (*DishResponse, error)
	UpdateDish(ctx context.Context, in *UpdateDishRequest, opts ...grpc.CallOption) (*DishResponse, error)
	DeleteDish(ctx context.Context, in *DishIdParam, opts ...grpc.CallOption) (*DishResponse, error)
}

type dishServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDishServiceClient(cc grpc.ClientConnInterface) DishServiceClient {
	return &dishServiceClient{cc}
}

func (c *dishServiceClient) GetDishList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DishListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DishListResponse)
	err := c.cc.Invoke(ctx, DishService_GetDishList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishServiceClient) GetDishDetail(ctx context.Context, in *DishIdParam, opts ...grpc.CallOption) (*DishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DishResponse)
	err := c.cc.Invoke(ctx, DishService_GetDishDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishServiceClient) CreateDish(ctx context.Context, in *CreateDishRequest, opts ...grpc.CallOption) (*DishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DishResponse)
	err := c.cc.Invoke(ctx, DishService_CreateDish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishServiceClient) UpdateDish(ctx context.Context, in *UpdateDishRequest, opts ...grpc.CallOption) (*DishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DishResponse)
	err := c.cc.Invoke(ctx, DishService_UpdateDish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishServiceClient) DeleteDish(ctx context.Context, in *DishIdParam, opts ...grpc.CallOption) (*DishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DishResponse)
	err := c.cc.Invoke(ctx, DishService_DeleteDish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DishServiceServer is the server API for DishService service.
// All implementations must embed UnimplementedDishServiceServer
// for forward compatibility.
type DishServiceServer interface {
	GetDishList(context.Context, *emptypb.Empty) (*DishListResponse, error)
	GetDishDetail(context.Context, *DishIdParam) (*DishResponse, error)
	CreateDish(context.Context, *CreateDishRequest) (*DishResponse, error)
	UpdateDish(context.Context, *UpdateDishRequest) (*DishResponse, error)
	DeleteDish(context.Context, *DishIdParam) (*DishResponse, error)
	mustEmbedUnimplementedDishServiceServer()
}

// UnimplementedDishServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDishServiceServer struct{}

func (UnimplementedDishServiceServer) GetDishList(context.Context, *emptypb.Empty) (*DishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDishList not implemented")
}
func (UnimplementedDishServiceServer) GetDishDetail(context.Context, *DishIdParam) (*DishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDishDetail not implemented")
}
func (UnimplementedDishServiceServer) CreateDish(context.Context, *CreateDishRequest) (*DishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDish not implemented")
}
func (UnimplementedDishServiceServer) UpdateDish(context.Context, *UpdateDishRequest) (*DishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDish not implemented")
}
func (UnimplementedDishServiceServer) DeleteDish(context.Context, *DishIdParam) (*DishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDish not implemented")
}
func (UnimplementedDishServiceServer) mustEmbedUnimplementedDishServiceServer() {}
func (UnimplementedDishServiceServer) testEmbeddedByValue()                     {}

// UnsafeDishServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DishServiceServer will
// result in compilation errors.
type UnsafeDishServiceServer interface {
	mustEmbedUnimplementedDishServiceServer()
}

func RegisterDishServiceServer(s grpc.ServiceRegistrar, srv DishServiceServer) {
	// If the following call pancis, it indicates UnimplementedDishServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DishService_ServiceDesc, srv)
}

func _DishService_GetDishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishServiceServer).GetDishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishService_GetDishList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishServiceServer).GetDishList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishService_GetDishDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DishIdParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishServiceServer).GetDishDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishService_GetDishDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishServiceServer).GetDishDetail(ctx, req.(*DishIdParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishService_CreateDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishServiceServer).CreateDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishService_CreateDish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishServiceServer).CreateDish(ctx, req.(*CreateDishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishService_UpdateDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishServiceServer).UpdateDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishService_UpdateDish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishServiceServer).UpdateDish(ctx, req.(*UpdateDishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishService_DeleteDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DishIdParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishServiceServer).DeleteDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishService_DeleteDish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishServiceServer).DeleteDish(ctx, req.(*DishIdParam))
	}
	return interceptor(ctx, in, info, handler)
}

// DishService_ServiceDesc is the grpc.ServiceDesc for DishService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DishService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DishService",
	HandlerType: (*DishServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDishList",
			Handler:    _DishService_GetDishList_Handler,
		},
		{
			MethodName: "GetDishDetail",
			Handler:    _DishService_GetDishDetail_Handler,
		},
		{
			MethodName: "CreateDish",
			Handler:    _DishService_CreateDish_Handler,
		},
		{
			MethodName: "UpdateDish",
			Handler:    _DishService_UpdateDish_Handler,
		},
		{
			MethodName: "DeleteDish",
			Handler:    _DishService_DeleteDish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto_qr/dish/dish.proto",
}
