// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Guest is an object representing the database table.
type Guest struct {
	ID                    int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	BranchID              null.Int64  `boil:"branch_id" json:"branch_id,omitempty" toml:"branch_id" yaml:"branch_id,omitempty"`
	Name                  string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	TableNumber           null.Int    `boil:"table_number" json:"table_number,omitempty" toml:"table_number" yaml:"table_number,omitempty"`
	RefreshToken          null.String `boil:"refresh_token" json:"refresh_token,omitempty" toml:"refresh_token" yaml:"refresh_token,omitempty"`
	RefreshTokenExpiresAt null.Time   `boil:"refresh_token_expires_at" json:"refresh_token_expires_at,omitempty" toml:"refresh_token_expires_at" yaml:"refresh_token_expires_at,omitempty"`
	CreatedAt             null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt             null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt             null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *guestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L guestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GuestColumns = struct {
	ID                    string
	BranchID              string
	Name                  string
	TableNumber           string
	RefreshToken          string
	RefreshTokenExpiresAt string
	CreatedAt             string
	UpdatedAt             string
	DeletedAt             string
}{
	ID:                    "id",
	BranchID:              "branch_id",
	Name:                  "name",
	TableNumber:           "table_number",
	RefreshToken:          "refresh_token",
	RefreshTokenExpiresAt: "refresh_token_expires_at",
	CreatedAt:             "created_at",
	UpdatedAt:             "updated_at",
	DeletedAt:             "deleted_at",
}

var GuestTableColumns = struct {
	ID                    string
	BranchID              string
	Name                  string
	TableNumber           string
	RefreshToken          string
	RefreshTokenExpiresAt string
	CreatedAt             string
	UpdatedAt             string
	DeletedAt             string
}{
	ID:                    "guests.id",
	BranchID:              "guests.branch_id",
	Name:                  "guests.name",
	TableNumber:           "guests.table_number",
	RefreshToken:          "guests.refresh_token",
	RefreshTokenExpiresAt: "guests.refresh_token_expires_at",
	CreatedAt:             "guests.created_at",
	UpdatedAt:             "guests.updated_at",
	DeletedAt:             "guests.deleted_at",
}

// Generated where

var GuestWhere = struct {
	ID                    whereHelperint64
	BranchID              whereHelpernull_Int64
	Name                  whereHelperstring
	TableNumber           whereHelpernull_Int
	RefreshToken          whereHelpernull_String
	RefreshTokenExpiresAt whereHelpernull_Time
	CreatedAt             whereHelpernull_Time
	UpdatedAt             whereHelpernull_Time
	DeletedAt             whereHelpernull_Time
}{
	ID:                    whereHelperint64{field: "\"guests\".\"id\""},
	BranchID:              whereHelpernull_Int64{field: "\"guests\".\"branch_id\""},
	Name:                  whereHelperstring{field: "\"guests\".\"name\""},
	TableNumber:           whereHelpernull_Int{field: "\"guests\".\"table_number\""},
	RefreshToken:          whereHelpernull_String{field: "\"guests\".\"refresh_token\""},
	RefreshTokenExpiresAt: whereHelpernull_Time{field: "\"guests\".\"refresh_token_expires_at\""},
	CreatedAt:             whereHelpernull_Time{field: "\"guests\".\"created_at\""},
	UpdatedAt:             whereHelpernull_Time{field: "\"guests\".\"updated_at\""},
	DeletedAt:             whereHelpernull_Time{field: "\"guests\".\"deleted_at\""},
}

// GuestRels is where relationship names are stored.
var GuestRels = struct {
	Branch           string
	TableNumberTable string
	Deliveries       string
	Orders           string
}{
	Branch:           "Branch",
	TableNumberTable: "TableNumberTable",
	Deliveries:       "Deliveries",
	Orders:           "Orders",
}

// guestR is where relationships are stored.
type guestR struct {
	Branch           *Branch       `boil:"Branch" json:"Branch" toml:"Branch" yaml:"Branch"`
	TableNumberTable *Table        `boil:"TableNumberTable" json:"TableNumberTable" toml:"TableNumberTable" yaml:"TableNumberTable"`
	Deliveries       DeliverySlice `boil:"Deliveries" json:"Deliveries" toml:"Deliveries" yaml:"Deliveries"`
	Orders           OrderSlice    `boil:"Orders" json:"Orders" toml:"Orders" yaml:"Orders"`
}

// NewStruct creates a new relationship struct
func (*guestR) NewStruct() *guestR {
	return &guestR{}
}

func (o *Guest) GetBranch() *Branch {
	if o == nil {
		return nil
	}

	return o.R.GetBranch()
}

func (r *guestR) GetBranch() *Branch {
	if r == nil {
		return nil
	}

	return r.Branch
}

func (o *Guest) GetTableNumberTable() *Table {
	if o == nil {
		return nil
	}

	return o.R.GetTableNumberTable()
}

func (r *guestR) GetTableNumberTable() *Table {
	if r == nil {
		return nil
	}

	return r.TableNumberTable
}

func (o *Guest) GetDeliveries() DeliverySlice {
	if o == nil {
		return nil
	}

	return o.R.GetDeliveries()
}

func (r *guestR) GetDeliveries() DeliverySlice {
	if r == nil {
		return nil
	}

	return r.Deliveries
}

func (o *Guest) GetOrders() OrderSlice {
	if o == nil {
		return nil
	}

	return o.R.GetOrders()
}

func (r *guestR) GetOrders() OrderSlice {
	if r == nil {
		return nil
	}

	return r.Orders
}

// guestL is where Load methods for each relationship are stored.
type guestL struct{}

var (
	guestAllColumns            = []string{"id", "branch_id", "name", "table_number", "refresh_token", "refresh_token_expires_at", "created_at", "updated_at", "deleted_at"}
	guestColumnsWithoutDefault = []string{"name"}
	guestColumnsWithDefault    = []string{"id", "branch_id", "table_number", "refresh_token", "refresh_token_expires_at", "created_at", "updated_at", "deleted_at"}
	guestPrimaryKeyColumns     = []string{"id"}
	guestGeneratedColumns      = []string{}
)

type (
	// GuestSlice is an alias for a slice of pointers to Guest.
	// This should almost always be used instead of []Guest.
	GuestSlice []*Guest
	// GuestHook is the signature for custom Guest hook methods
	GuestHook func(context.Context, boil.ContextExecutor, *Guest) error

	guestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	guestType                 = reflect.TypeOf(&Guest{})
	guestMapping              = queries.MakeStructMapping(guestType)
	guestPrimaryKeyMapping, _ = queries.BindMapping(guestType, guestMapping, guestPrimaryKeyColumns)
	guestInsertCacheMut       sync.RWMutex
	guestInsertCache          = make(map[string]insertCache)
	guestUpdateCacheMut       sync.RWMutex
	guestUpdateCache          = make(map[string]updateCache)
	guestUpsertCacheMut       sync.RWMutex
	guestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var guestAfterSelectMu sync.Mutex
var guestAfterSelectHooks []GuestHook

var guestBeforeInsertMu sync.Mutex
var guestBeforeInsertHooks []GuestHook
var guestAfterInsertMu sync.Mutex
var guestAfterInsertHooks []GuestHook

var guestBeforeUpdateMu sync.Mutex
var guestBeforeUpdateHooks []GuestHook
var guestAfterUpdateMu sync.Mutex
var guestAfterUpdateHooks []GuestHook

var guestBeforeDeleteMu sync.Mutex
var guestBeforeDeleteHooks []GuestHook
var guestAfterDeleteMu sync.Mutex
var guestAfterDeleteHooks []GuestHook

var guestBeforeUpsertMu sync.Mutex
var guestBeforeUpsertHooks []GuestHook
var guestAfterUpsertMu sync.Mutex
var guestAfterUpsertHooks []GuestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Guest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range guestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Guest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range guestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Guest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range guestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Guest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range guestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Guest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range guestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Guest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range guestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Guest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range guestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Guest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range guestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Guest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range guestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGuestHook registers your hook function for all future operations.
func AddGuestHook(hookPoint boil.HookPoint, guestHook GuestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		guestAfterSelectMu.Lock()
		guestAfterSelectHooks = append(guestAfterSelectHooks, guestHook)
		guestAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		guestBeforeInsertMu.Lock()
		guestBeforeInsertHooks = append(guestBeforeInsertHooks, guestHook)
		guestBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		guestAfterInsertMu.Lock()
		guestAfterInsertHooks = append(guestAfterInsertHooks, guestHook)
		guestAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		guestBeforeUpdateMu.Lock()
		guestBeforeUpdateHooks = append(guestBeforeUpdateHooks, guestHook)
		guestBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		guestAfterUpdateMu.Lock()
		guestAfterUpdateHooks = append(guestAfterUpdateHooks, guestHook)
		guestAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		guestBeforeDeleteMu.Lock()
		guestBeforeDeleteHooks = append(guestBeforeDeleteHooks, guestHook)
		guestBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		guestAfterDeleteMu.Lock()
		guestAfterDeleteHooks = append(guestAfterDeleteHooks, guestHook)
		guestAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		guestBeforeUpsertMu.Lock()
		guestBeforeUpsertHooks = append(guestBeforeUpsertHooks, guestHook)
		guestBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		guestAfterUpsertMu.Lock()
		guestAfterUpsertHooks = append(guestAfterUpsertHooks, guestHook)
		guestAfterUpsertMu.Unlock()
	}
}

// One returns a single guest record from the query.
func (q guestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Guest, error) {
	o := &Guest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for guests")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Guest records from the query.
func (q guestQuery) All(ctx context.Context, exec boil.ContextExecutor) (GuestSlice, error) {
	var o []*Guest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Guest slice")
	}

	if len(guestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Guest records in the query.
func (q guestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count guests rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q guestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if guests exists")
	}

	return count > 0, nil
}

// Branch pointed to by the foreign key.
func (o *Guest) Branch(mods ...qm.QueryMod) branchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BranchID),
	}

	queryMods = append(queryMods, mods...)

	return Branches(queryMods...)
}

// TableNumberTable pointed to by the foreign key.
func (o *Guest) TableNumberTable(mods ...qm.QueryMod) tableQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"number\" = ?", o.TableNumber),
	}

	queryMods = append(queryMods, mods...)

	return Tables(queryMods...)
}

// Deliveries retrieves all the delivery's Deliveries with an executor.
func (o *Guest) Deliveries(mods ...qm.QueryMod) deliveryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"deliveries\".\"guest_id\"=?", o.ID),
	)

	return Deliveries(queryMods...)
}

// Orders retrieves all the order's Orders with an executor.
func (o *Guest) Orders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"guest_id\"=?", o.ID),
	)

	return Orders(queryMods...)
}

// LoadBranch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (guestL) LoadBranch(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGuest interface{}, mods queries.Applicator) error {
	var slice []*Guest
	var object *Guest

	if singular {
		var ok bool
		object, ok = maybeGuest.(*Guest)
		if !ok {
			object = new(Guest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGuest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGuest))
			}
		}
	} else {
		s, ok := maybeGuest.(*[]*Guest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGuest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGuest))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &guestR{}
		}
		if !queries.IsNil(object.BranchID) {
			args[object.BranchID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &guestR{}
			}

			if !queries.IsNil(obj.BranchID) {
				args[obj.BranchID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`branches`),
		qm.WhereIn(`branches.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Branch")
	}

	var resultSlice []*Branch
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Branch")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for branches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for branches")
	}

	if len(branchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Branch = foreign
		if foreign.R == nil {
			foreign.R = &branchR{}
		}
		foreign.R.Guests = append(foreign.R.Guests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BranchID, foreign.ID) {
				local.R.Branch = foreign
				if foreign.R == nil {
					foreign.R = &branchR{}
				}
				foreign.R.Guests = append(foreign.R.Guests, local)
				break
			}
		}
	}

	return nil
}

// LoadTableNumberTable allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (guestL) LoadTableNumberTable(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGuest interface{}, mods queries.Applicator) error {
	var slice []*Guest
	var object *Guest

	if singular {
		var ok bool
		object, ok = maybeGuest.(*Guest)
		if !ok {
			object = new(Guest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGuest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGuest))
			}
		}
	} else {
		s, ok := maybeGuest.(*[]*Guest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGuest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGuest))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &guestR{}
		}
		if !queries.IsNil(object.TableNumber) {
			args[object.TableNumber] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &guestR{}
			}

			if !queries.IsNil(obj.TableNumber) {
				args[obj.TableNumber] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tables`),
		qm.WhereIn(`tables.number in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Table")
	}

	var resultSlice []*Table
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Table")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tables")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tables")
	}

	if len(tableAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TableNumberTable = foreign
		if foreign.R == nil {
			foreign.R = &tableR{}
		}
		foreign.R.TableNumberGuests = append(foreign.R.TableNumberGuests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TableNumber, foreign.Number) {
				local.R.TableNumberTable = foreign
				if foreign.R == nil {
					foreign.R = &tableR{}
				}
				foreign.R.TableNumberGuests = append(foreign.R.TableNumberGuests, local)
				break
			}
		}
	}

	return nil
}

// LoadDeliveries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (guestL) LoadDeliveries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGuest interface{}, mods queries.Applicator) error {
	var slice []*Guest
	var object *Guest

	if singular {
		var ok bool
		object, ok = maybeGuest.(*Guest)
		if !ok {
			object = new(Guest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGuest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGuest))
			}
		}
	} else {
		s, ok := maybeGuest.(*[]*Guest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGuest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGuest))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &guestR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &guestR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`deliveries`),
		qm.WhereIn(`deliveries.guest_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load deliveries")
	}

	var resultSlice []*Delivery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice deliveries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on deliveries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for deliveries")
	}

	if len(deliveryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Deliveries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deliveryR{}
			}
			foreign.R.Guest = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.GuestID) {
				local.R.Deliveries = append(local.R.Deliveries, foreign)
				if foreign.R == nil {
					foreign.R = &deliveryR{}
				}
				foreign.R.Guest = local
				break
			}
		}
	}

	return nil
}

// LoadOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (guestL) LoadOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGuest interface{}, mods queries.Applicator) error {
	var slice []*Guest
	var object *Guest

	if singular {
		var ok bool
		object, ok = maybeGuest.(*Guest)
		if !ok {
			object = new(Guest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGuest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGuest))
			}
		}
	} else {
		s, ok := maybeGuest.(*[]*Guest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGuest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGuest))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &guestR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &guestR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.guest_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Orders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.Guest = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.GuestID) {
				local.R.Orders = append(local.R.Orders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.Guest = local
				break
			}
		}
	}

	return nil
}

// SetBranch of the guest to the related item.
// Sets o.R.Branch to related.
// Adds o to related.R.Guests.
func (o *Guest) SetBranch(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Branch) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"guests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"branch_id"}),
		strmangle.WhereClause("\"", "\"", 2, guestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BranchID, related.ID)
	if o.R == nil {
		o.R = &guestR{
			Branch: related,
		}
	} else {
		o.R.Branch = related
	}

	if related.R == nil {
		related.R = &branchR{
			Guests: GuestSlice{o},
		}
	} else {
		related.R.Guests = append(related.R.Guests, o)
	}

	return nil
}

// RemoveBranch relationship.
// Sets o.R.Branch to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Guest) RemoveBranch(ctx context.Context, exec boil.ContextExecutor, related *Branch) error {
	var err error

	queries.SetScanner(&o.BranchID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("branch_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Branch = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Guests {
		if queries.Equal(o.BranchID, ri.BranchID) {
			continue
		}

		ln := len(related.R.Guests)
		if ln > 1 && i < ln-1 {
			related.R.Guests[i] = related.R.Guests[ln-1]
		}
		related.R.Guests = related.R.Guests[:ln-1]
		break
	}
	return nil
}

// SetTableNumberTable of the guest to the related item.
// Sets o.R.TableNumberTable to related.
// Adds o to related.R.TableNumberGuests.
func (o *Guest) SetTableNumberTable(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Table) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"guests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"table_number"}),
		strmangle.WhereClause("\"", "\"", 2, guestPrimaryKeyColumns),
	)
	values := []interface{}{related.Number, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TableNumber, related.Number)
	if o.R == nil {
		o.R = &guestR{
			TableNumberTable: related,
		}
	} else {
		o.R.TableNumberTable = related
	}

	if related.R == nil {
		related.R = &tableR{
			TableNumberGuests: GuestSlice{o},
		}
	} else {
		related.R.TableNumberGuests = append(related.R.TableNumberGuests, o)
	}

	return nil
}

// RemoveTableNumberTable relationship.
// Sets o.R.TableNumberTable to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Guest) RemoveTableNumberTable(ctx context.Context, exec boil.ContextExecutor, related *Table) error {
	var err error

	queries.SetScanner(&o.TableNumber, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("table_number")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TableNumberTable = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TableNumberGuests {
		if queries.Equal(o.TableNumber, ri.TableNumber) {
			continue
		}

		ln := len(related.R.TableNumberGuests)
		if ln > 1 && i < ln-1 {
			related.R.TableNumberGuests[i] = related.R.TableNumberGuests[ln-1]
		}
		related.R.TableNumberGuests = related.R.TableNumberGuests[:ln-1]
		break
	}
	return nil
}

// AddDeliveries adds the given related objects to the existing relationships
// of the guest, optionally inserting them as new records.
// Appends related to o.R.Deliveries.
// Sets related.R.Guest appropriately.
func (o *Guest) AddDeliveries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Delivery) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.GuestID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"deliveries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"guest_id"}),
				strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.GuestID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &guestR{
			Deliveries: related,
		}
	} else {
		o.R.Deliveries = append(o.R.Deliveries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deliveryR{
				Guest: o,
			}
		} else {
			rel.R.Guest = o
		}
	}
	return nil
}

// SetDeliveries removes all previously related items of the
// guest replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Guest's Deliveries accordingly.
// Replaces o.R.Deliveries with related.
// Sets related.R.Guest's Deliveries accordingly.
func (o *Guest) SetDeliveries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Delivery) error {
	query := "update \"deliveries\" set \"guest_id\" = null where \"guest_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Deliveries {
			queries.SetScanner(&rel.GuestID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Guest = nil
		}
		o.R.Deliveries = nil
	}

	return o.AddDeliveries(ctx, exec, insert, related...)
}

// RemoveDeliveries relationships from objects passed in.
// Removes related items from R.Deliveries (uses pointer comparison, removal does not keep order)
// Sets related.R.Guest.
func (o *Guest) RemoveDeliveries(ctx context.Context, exec boil.ContextExecutor, related ...*Delivery) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.GuestID, nil)
		if rel.R != nil {
			rel.R.Guest = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("guest_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Deliveries {
			if rel != ri {
				continue
			}

			ln := len(o.R.Deliveries)
			if ln > 1 && i < ln-1 {
				o.R.Deliveries[i] = o.R.Deliveries[ln-1]
			}
			o.R.Deliveries = o.R.Deliveries[:ln-1]
			break
		}
	}

	return nil
}

// AddOrders adds the given related objects to the existing relationships
// of the guest, optionally inserting them as new records.
// Appends related to o.R.Orders.
// Sets related.R.Guest appropriately.
func (o *Guest) AddOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.GuestID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"guest_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.GuestID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &guestR{
			Orders: related,
		}
	} else {
		o.R.Orders = append(o.R.Orders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				Guest: o,
			}
		} else {
			rel.R.Guest = o
		}
	}
	return nil
}

// SetOrders removes all previously related items of the
// guest replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Guest's Orders accordingly.
// Replaces o.R.Orders with related.
// Sets related.R.Guest's Orders accordingly.
func (o *Guest) SetOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	query := "update \"orders\" set \"guest_id\" = null where \"guest_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Orders {
			queries.SetScanner(&rel.GuestID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Guest = nil
		}
		o.R.Orders = nil
	}

	return o.AddOrders(ctx, exec, insert, related...)
}

// RemoveOrders relationships from objects passed in.
// Removes related items from R.Orders (uses pointer comparison, removal does not keep order)
// Sets related.R.Guest.
func (o *Guest) RemoveOrders(ctx context.Context, exec boil.ContextExecutor, related ...*Order) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.GuestID, nil)
		if rel.R != nil {
			rel.R.Guest = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("guest_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Orders {
			if rel != ri {
				continue
			}

			ln := len(o.R.Orders)
			if ln > 1 && i < ln-1 {
				o.R.Orders[i] = o.R.Orders[ln-1]
			}
			o.R.Orders = o.R.Orders[:ln-1]
			break
		}
	}

	return nil
}

// Guests retrieves all the records using an executor.
func Guests(mods ...qm.QueryMod) guestQuery {
	mods = append(mods, qm.From("\"guests\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"guests\".*"})
	}

	return guestQuery{q}
}

// FindGuest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGuest(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Guest, error) {
	guestObj := &Guest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"guests\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, guestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from guests")
	}

	if err = guestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return guestObj, err
	}

	return guestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Guest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no guests provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(guestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	guestInsertCacheMut.RLock()
	cache, cached := guestInsertCache[key]
	guestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			guestAllColumns,
			guestColumnsWithDefault,
			guestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(guestType, guestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(guestType, guestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"guests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"guests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into guests")
	}

	if !cached {
		guestInsertCacheMut.Lock()
		guestInsertCache[key] = cache
		guestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Guest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Guest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	guestUpdateCacheMut.RLock()
	cache, cached := guestUpdateCache[key]
	guestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			guestAllColumns,
			guestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update guests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"guests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, guestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(guestType, guestMapping, append(wl, guestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update guests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for guests")
	}

	if !cached {
		guestUpdateCacheMut.Lock()
		guestUpdateCache[key] = cache
		guestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q guestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for guests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for guests")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GuestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), guestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"guests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, guestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in guest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all guest")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Guest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no guests provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(guestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	guestUpsertCacheMut.RLock()
	cache, cached := guestUpsertCache[key]
	guestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			guestAllColumns,
			guestColumnsWithDefault,
			guestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			guestAllColumns,
			guestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert guests, could not build update column list")
		}

		ret := strmangle.SetComplement(guestAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(guestPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert guests, could not build conflict column list")
			}

			conflict = make([]string, len(guestPrimaryKeyColumns))
			copy(conflict, guestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"guests\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(guestType, guestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(guestType, guestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert guests")
	}

	if !cached {
		guestUpsertCacheMut.Lock()
		guestUpsertCache[key] = cache
		guestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Guest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Guest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Guest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), guestPrimaryKeyMapping)
	sql := "DELETE FROM \"guests\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from guests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for guests")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q guestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no guestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from guests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for guests")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GuestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(guestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), guestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"guests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, guestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from guest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for guests")
	}

	if len(guestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Guest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGuest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GuestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GuestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), guestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"guests\".* FROM \"guests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, guestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in GuestSlice")
	}

	*o = slice

	return nil
}

// GuestExists checks if the Guest row exists.
func GuestExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"guests\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if guests exists")
	}

	return exists, nil
}

// Exists checks if the Guest row exists.
func (o *Guest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GuestExists(ctx, exec, o.ID)
}
