// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// DishPriceHistory is an object representing the database table.
type DishPriceHistory struct {
	ID            int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	DishID        null.Int64 `boil:"dish_id" json:"dish_id,omitempty" toml:"dish_id" yaml:"dish_id,omitempty"`
	Price         int        `boil:"price" json:"price" toml:"price" yaml:"price"`
	CustomerCount null.Int   `boil:"customer_count" json:"customer_count,omitempty" toml:"customer_count" yaml:"customer_count,omitempty"`
	StartTime     time.Time  `boil:"start_time" json:"start_time" toml:"start_time" yaml:"start_time"`
	EndTime       null.Time  `boil:"end_time" json:"end_time,omitempty" toml:"end_time" yaml:"end_time,omitempty"`
	CreatedAt     null.Time  `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt     null.Time  `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt     null.Time  `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *dishPriceHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dishPriceHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DishPriceHistoryColumns = struct {
	ID            string
	DishID        string
	Price         string
	CustomerCount string
	StartTime     string
	EndTime       string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ID:            "id",
	DishID:        "dish_id",
	Price:         "price",
	CustomerCount: "customer_count",
	StartTime:     "start_time",
	EndTime:       "end_time",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
}

var DishPriceHistoryTableColumns = struct {
	ID            string
	DishID        string
	Price         string
	CustomerCount string
	StartTime     string
	EndTime       string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ID:            "dish_price_history.id",
	DishID:        "dish_price_history.dish_id",
	Price:         "dish_price_history.price",
	CustomerCount: "dish_price_history.customer_count",
	StartTime:     "dish_price_history.start_time",
	EndTime:       "dish_price_history.end_time",
	CreatedAt:     "dish_price_history.created_at",
	UpdatedAt:     "dish_price_history.updated_at",
	DeletedAt:     "dish_price_history.deleted_at",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DishPriceHistoryWhere = struct {
	ID            whereHelperint64
	DishID        whereHelpernull_Int64
	Price         whereHelperint
	CustomerCount whereHelpernull_Int
	StartTime     whereHelpertime_Time
	EndTime       whereHelpernull_Time
	CreatedAt     whereHelpernull_Time
	UpdatedAt     whereHelpernull_Time
	DeletedAt     whereHelpernull_Time
}{
	ID:            whereHelperint64{field: "\"dish_price_history\".\"id\""},
	DishID:        whereHelpernull_Int64{field: "\"dish_price_history\".\"dish_id\""},
	Price:         whereHelperint{field: "\"dish_price_history\".\"price\""},
	CustomerCount: whereHelpernull_Int{field: "\"dish_price_history\".\"customer_count\""},
	StartTime:     whereHelpertime_Time{field: "\"dish_price_history\".\"start_time\""},
	EndTime:       whereHelpernull_Time{field: "\"dish_price_history\".\"end_time\""},
	CreatedAt:     whereHelpernull_Time{field: "\"dish_price_history\".\"created_at\""},
	UpdatedAt:     whereHelpernull_Time{field: "\"dish_price_history\".\"updated_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"dish_price_history\".\"deleted_at\""},
}

// DishPriceHistoryRels is where relationship names are stored.
var DishPriceHistoryRels = struct {
	Dish string
}{
	Dish: "Dish",
}

// dishPriceHistoryR is where relationships are stored.
type dishPriceHistoryR struct {
	Dish *Dish `boil:"Dish" json:"Dish" toml:"Dish" yaml:"Dish"`
}

// NewStruct creates a new relationship struct
func (*dishPriceHistoryR) NewStruct() *dishPriceHistoryR {
	return &dishPriceHistoryR{}
}

func (o *DishPriceHistory) GetDish() *Dish {
	if o == nil {
		return nil
	}

	return o.R.GetDish()
}

func (r *dishPriceHistoryR) GetDish() *Dish {
	if r == nil {
		return nil
	}

	return r.Dish
}

// dishPriceHistoryL is where Load methods for each relationship are stored.
type dishPriceHistoryL struct{}

var (
	dishPriceHistoryAllColumns            = []string{"id", "dish_id", "price", "customer_count", "start_time", "end_time", "created_at", "updated_at", "deleted_at"}
	dishPriceHistoryColumnsWithoutDefault = []string{"price", "start_time"}
	dishPriceHistoryColumnsWithDefault    = []string{"id", "dish_id", "customer_count", "end_time", "created_at", "updated_at", "deleted_at"}
	dishPriceHistoryPrimaryKeyColumns     = []string{"id"}
	dishPriceHistoryGeneratedColumns      = []string{}
)

type (
	// DishPriceHistorySlice is an alias for a slice of pointers to DishPriceHistory.
	// This should almost always be used instead of []DishPriceHistory.
	DishPriceHistorySlice []*DishPriceHistory
	// DishPriceHistoryHook is the signature for custom DishPriceHistory hook methods
	DishPriceHistoryHook func(context.Context, boil.ContextExecutor, *DishPriceHistory) error

	dishPriceHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dishPriceHistoryType                 = reflect.TypeOf(&DishPriceHistory{})
	dishPriceHistoryMapping              = queries.MakeStructMapping(dishPriceHistoryType)
	dishPriceHistoryPrimaryKeyMapping, _ = queries.BindMapping(dishPriceHistoryType, dishPriceHistoryMapping, dishPriceHistoryPrimaryKeyColumns)
	dishPriceHistoryInsertCacheMut       sync.RWMutex
	dishPriceHistoryInsertCache          = make(map[string]insertCache)
	dishPriceHistoryUpdateCacheMut       sync.RWMutex
	dishPriceHistoryUpdateCache          = make(map[string]updateCache)
	dishPriceHistoryUpsertCacheMut       sync.RWMutex
	dishPriceHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dishPriceHistoryAfterSelectMu sync.Mutex
var dishPriceHistoryAfterSelectHooks []DishPriceHistoryHook

var dishPriceHistoryBeforeInsertMu sync.Mutex
var dishPriceHistoryBeforeInsertHooks []DishPriceHistoryHook
var dishPriceHistoryAfterInsertMu sync.Mutex
var dishPriceHistoryAfterInsertHooks []DishPriceHistoryHook

var dishPriceHistoryBeforeUpdateMu sync.Mutex
var dishPriceHistoryBeforeUpdateHooks []DishPriceHistoryHook
var dishPriceHistoryAfterUpdateMu sync.Mutex
var dishPriceHistoryAfterUpdateHooks []DishPriceHistoryHook

var dishPriceHistoryBeforeDeleteMu sync.Mutex
var dishPriceHistoryBeforeDeleteHooks []DishPriceHistoryHook
var dishPriceHistoryAfterDeleteMu sync.Mutex
var dishPriceHistoryAfterDeleteHooks []DishPriceHistoryHook

var dishPriceHistoryBeforeUpsertMu sync.Mutex
var dishPriceHistoryBeforeUpsertHooks []DishPriceHistoryHook
var dishPriceHistoryAfterUpsertMu sync.Mutex
var dishPriceHistoryAfterUpsertHooks []DishPriceHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DishPriceHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishPriceHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DishPriceHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishPriceHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DishPriceHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishPriceHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DishPriceHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishPriceHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DishPriceHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishPriceHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DishPriceHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishPriceHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DishPriceHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishPriceHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DishPriceHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishPriceHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DishPriceHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishPriceHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDishPriceHistoryHook registers your hook function for all future operations.
func AddDishPriceHistoryHook(hookPoint boil.HookPoint, dishPriceHistoryHook DishPriceHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dishPriceHistoryAfterSelectMu.Lock()
		dishPriceHistoryAfterSelectHooks = append(dishPriceHistoryAfterSelectHooks, dishPriceHistoryHook)
		dishPriceHistoryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		dishPriceHistoryBeforeInsertMu.Lock()
		dishPriceHistoryBeforeInsertHooks = append(dishPriceHistoryBeforeInsertHooks, dishPriceHistoryHook)
		dishPriceHistoryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		dishPriceHistoryAfterInsertMu.Lock()
		dishPriceHistoryAfterInsertHooks = append(dishPriceHistoryAfterInsertHooks, dishPriceHistoryHook)
		dishPriceHistoryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		dishPriceHistoryBeforeUpdateMu.Lock()
		dishPriceHistoryBeforeUpdateHooks = append(dishPriceHistoryBeforeUpdateHooks, dishPriceHistoryHook)
		dishPriceHistoryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		dishPriceHistoryAfterUpdateMu.Lock()
		dishPriceHistoryAfterUpdateHooks = append(dishPriceHistoryAfterUpdateHooks, dishPriceHistoryHook)
		dishPriceHistoryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		dishPriceHistoryBeforeDeleteMu.Lock()
		dishPriceHistoryBeforeDeleteHooks = append(dishPriceHistoryBeforeDeleteHooks, dishPriceHistoryHook)
		dishPriceHistoryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		dishPriceHistoryAfterDeleteMu.Lock()
		dishPriceHistoryAfterDeleteHooks = append(dishPriceHistoryAfterDeleteHooks, dishPriceHistoryHook)
		dishPriceHistoryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		dishPriceHistoryBeforeUpsertMu.Lock()
		dishPriceHistoryBeforeUpsertHooks = append(dishPriceHistoryBeforeUpsertHooks, dishPriceHistoryHook)
		dishPriceHistoryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		dishPriceHistoryAfterUpsertMu.Lock()
		dishPriceHistoryAfterUpsertHooks = append(dishPriceHistoryAfterUpsertHooks, dishPriceHistoryHook)
		dishPriceHistoryAfterUpsertMu.Unlock()
	}
}

// One returns a single dishPriceHistory record from the query.
func (q dishPriceHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DishPriceHistory, error) {
	o := &DishPriceHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for dish_price_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DishPriceHistory records from the query.
func (q dishPriceHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (DishPriceHistorySlice, error) {
	var o []*DishPriceHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to DishPriceHistory slice")
	}

	if len(dishPriceHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DishPriceHistory records in the query.
func (q dishPriceHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count dish_price_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dishPriceHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if dish_price_history exists")
	}

	return count > 0, nil
}

// Dish pointed to by the foreign key.
func (o *DishPriceHistory) Dish(mods ...qm.QueryMod) dishQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DishID),
	}

	queryMods = append(queryMods, mods...)

	return Dishes(queryMods...)
}

// LoadDish allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dishPriceHistoryL) LoadDish(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDishPriceHistory interface{}, mods queries.Applicator) error {
	var slice []*DishPriceHistory
	var object *DishPriceHistory

	if singular {
		var ok bool
		object, ok = maybeDishPriceHistory.(*DishPriceHistory)
		if !ok {
			object = new(DishPriceHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDishPriceHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDishPriceHistory))
			}
		}
	} else {
		s, ok := maybeDishPriceHistory.(*[]*DishPriceHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDishPriceHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDishPriceHistory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &dishPriceHistoryR{}
		}
		if !queries.IsNil(object.DishID) {
			args[object.DishID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dishPriceHistoryR{}
			}

			if !queries.IsNil(obj.DishID) {
				args[obj.DishID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`dishes`),
		qm.WhereIn(`dishes.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Dish")
	}

	var resultSlice []*Dish
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Dish")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dishes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dishes")
	}

	if len(dishAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Dish = foreign
		if foreign.R == nil {
			foreign.R = &dishR{}
		}
		foreign.R.DishPriceHistories = append(foreign.R.DishPriceHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DishID, foreign.ID) {
				local.R.Dish = foreign
				if foreign.R == nil {
					foreign.R = &dishR{}
				}
				foreign.R.DishPriceHistories = append(foreign.R.DishPriceHistories, local)
				break
			}
		}
	}

	return nil
}

// SetDish of the dishPriceHistory to the related item.
// Sets o.R.Dish to related.
// Adds o to related.R.DishPriceHistories.
func (o *DishPriceHistory) SetDish(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Dish) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dish_price_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"dish_id"}),
		strmangle.WhereClause("\"", "\"", 2, dishPriceHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DishID, related.ID)
	if o.R == nil {
		o.R = &dishPriceHistoryR{
			Dish: related,
		}
	} else {
		o.R.Dish = related
	}

	if related.R == nil {
		related.R = &dishR{
			DishPriceHistories: DishPriceHistorySlice{o},
		}
	} else {
		related.R.DishPriceHistories = append(related.R.DishPriceHistories, o)
	}

	return nil
}

// RemoveDish relationship.
// Sets o.R.Dish to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DishPriceHistory) RemoveDish(ctx context.Context, exec boil.ContextExecutor, related *Dish) error {
	var err error

	queries.SetScanner(&o.DishID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("dish_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Dish = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DishPriceHistories {
		if queries.Equal(o.DishID, ri.DishID) {
			continue
		}

		ln := len(related.R.DishPriceHistories)
		if ln > 1 && i < ln-1 {
			related.R.DishPriceHistories[i] = related.R.DishPriceHistories[ln-1]
		}
		related.R.DishPriceHistories = related.R.DishPriceHistories[:ln-1]
		break
	}
	return nil
}

// DishPriceHistories retrieves all the records using an executor.
func DishPriceHistories(mods ...qm.QueryMod) dishPriceHistoryQuery {
	mods = append(mods, qm.From("\"dish_price_history\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"dish_price_history\".*"})
	}

	return dishPriceHistoryQuery{q}
}

// FindDishPriceHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDishPriceHistory(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*DishPriceHistory, error) {
	dishPriceHistoryObj := &DishPriceHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dish_price_history\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dishPriceHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from dish_price_history")
	}

	if err = dishPriceHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dishPriceHistoryObj, err
	}

	return dishPriceHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DishPriceHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no dish_price_history provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dishPriceHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dishPriceHistoryInsertCacheMut.RLock()
	cache, cached := dishPriceHistoryInsertCache[key]
	dishPriceHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dishPriceHistoryAllColumns,
			dishPriceHistoryColumnsWithDefault,
			dishPriceHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dishPriceHistoryType, dishPriceHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dishPriceHistoryType, dishPriceHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dish_price_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dish_price_history\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into dish_price_history")
	}

	if !cached {
		dishPriceHistoryInsertCacheMut.Lock()
		dishPriceHistoryInsertCache[key] = cache
		dishPriceHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DishPriceHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DishPriceHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dishPriceHistoryUpdateCacheMut.RLock()
	cache, cached := dishPriceHistoryUpdateCache[key]
	dishPriceHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dishPriceHistoryAllColumns,
			dishPriceHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update dish_price_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dish_price_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dishPriceHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dishPriceHistoryType, dishPriceHistoryMapping, append(wl, dishPriceHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update dish_price_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for dish_price_history")
	}

	if !cached {
		dishPriceHistoryUpdateCacheMut.Lock()
		dishPriceHistoryUpdateCache[key] = cache
		dishPriceHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dishPriceHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for dish_price_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for dish_price_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DishPriceHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dishPriceHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dish_price_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dishPriceHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in dishPriceHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all dishPriceHistory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DishPriceHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no dish_price_history provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dishPriceHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dishPriceHistoryUpsertCacheMut.RLock()
	cache, cached := dishPriceHistoryUpsertCache[key]
	dishPriceHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			dishPriceHistoryAllColumns,
			dishPriceHistoryColumnsWithDefault,
			dishPriceHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dishPriceHistoryAllColumns,
			dishPriceHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert dish_price_history, could not build update column list")
		}

		ret := strmangle.SetComplement(dishPriceHistoryAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(dishPriceHistoryPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert dish_price_history, could not build conflict column list")
			}

			conflict = make([]string, len(dishPriceHistoryPrimaryKeyColumns))
			copy(conflict, dishPriceHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"dish_price_history\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(dishPriceHistoryType, dishPriceHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dishPriceHistoryType, dishPriceHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert dish_price_history")
	}

	if !cached {
		dishPriceHistoryUpsertCacheMut.Lock()
		dishPriceHistoryUpsertCache[key] = cache
		dishPriceHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DishPriceHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DishPriceHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no DishPriceHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dishPriceHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"dish_price_history\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from dish_price_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for dish_price_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dishPriceHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no dishPriceHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from dish_price_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for dish_price_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DishPriceHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dishPriceHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dishPriceHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dish_price_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dishPriceHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from dishPriceHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for dish_price_history")
	}

	if len(dishPriceHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DishPriceHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDishPriceHistory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DishPriceHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DishPriceHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dishPriceHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dish_price_history\".* FROM \"dish_price_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dishPriceHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in DishPriceHistorySlice")
	}

	*o = slice

	return nil
}

// DishPriceHistoryExists checks if the DishPriceHistory row exists.
func DishPriceHistoryExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dish_price_history\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if dish_price_history exists")
	}

	return exists, nil
}

// Exists checks if the DishPriceHistory row exists.
func (o *DishPriceHistory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DishPriceHistoryExists(ctx, exec, o.ID)
}
