// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Branch is an object representing the database table.
type Branch struct {
	ID        int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Address   string      `boil:"address" json:"address" toml:"address" yaml:"address"`
	Phone     null.String `boil:"phone" json:"phone,omitempty" toml:"phone" yaml:"phone,omitempty"`
	ManagerID null.Int64  `boil:"manager_id" json:"manager_id,omitempty" toml:"manager_id" yaml:"manager_id,omitempty"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *branchR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L branchL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BranchColumns = struct {
	ID        string
	Name      string
	Address   string
	Phone     string
	ManagerID string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	Name:      "name",
	Address:   "address",
	Phone:     "phone",
	ManagerID: "manager_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var BranchTableColumns = struct {
	ID        string
	Name      string
	Address   string
	Phone     string
	ManagerID string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "branches.id",
	Name:      "branches.name",
	Address:   "branches.address",
	Phone:     "branches.phone",
	ManagerID: "branches.manager_id",
	CreatedAt: "branches.created_at",
	UpdatedAt: "branches.updated_at",
	DeletedAt: "branches.deleted_at",
}

// Generated where

var BranchWhere = struct {
	ID        whereHelperint64
	Name      whereHelperstring
	Address   whereHelperstring
	Phone     whereHelpernull_String
	ManagerID whereHelpernull_Int64
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperint64{field: "\"branches\".\"id\""},
	Name:      whereHelperstring{field: "\"branches\".\"name\""},
	Address:   whereHelperstring{field: "\"branches\".\"address\""},
	Phone:     whereHelpernull_String{field: "\"branches\".\"phone\""},
	ManagerID: whereHelpernull_Int64{field: "\"branches\".\"manager_id\""},
	CreatedAt: whereHelpernull_Time{field: "\"branches\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"branches\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"branches\".\"deleted_at\""},
}

// BranchRels is where relationship names are stored.
var BranchRels = struct {
	Accounts    string
	Deliveries  string
	Dishes      string
	Guests      string
	Orders      string
	Regulations string
	Sets        string
	Tables      string
}{
	Accounts:    "Accounts",
	Deliveries:  "Deliveries",
	Dishes:      "Dishes",
	Guests:      "Guests",
	Orders:      "Orders",
	Regulations: "Regulations",
	Sets:        "Sets",
	Tables:      "Tables",
}

// branchR is where relationships are stored.
type branchR struct {
	Accounts    AccountSlice    `boil:"Accounts" json:"Accounts" toml:"Accounts" yaml:"Accounts"`
	Deliveries  DeliverySlice   `boil:"Deliveries" json:"Deliveries" toml:"Deliveries" yaml:"Deliveries"`
	Dishes      DishSlice       `boil:"Dishes" json:"Dishes" toml:"Dishes" yaml:"Dishes"`
	Guests      GuestSlice      `boil:"Guests" json:"Guests" toml:"Guests" yaml:"Guests"`
	Orders      OrderSlice      `boil:"Orders" json:"Orders" toml:"Orders" yaml:"Orders"`
	Regulations RegulationSlice `boil:"Regulations" json:"Regulations" toml:"Regulations" yaml:"Regulations"`
	Sets        SetSlice        `boil:"Sets" json:"Sets" toml:"Sets" yaml:"Sets"`
	Tables      TableSlice      `boil:"Tables" json:"Tables" toml:"Tables" yaml:"Tables"`
}

// NewStruct creates a new relationship struct
func (*branchR) NewStruct() *branchR {
	return &branchR{}
}

func (o *Branch) GetAccounts() AccountSlice {
	if o == nil {
		return nil
	}

	return o.R.GetAccounts()
}

func (r *branchR) GetAccounts() AccountSlice {
	if r == nil {
		return nil
	}

	return r.Accounts
}

func (o *Branch) GetDeliveries() DeliverySlice {
	if o == nil {
		return nil
	}

	return o.R.GetDeliveries()
}

func (r *branchR) GetDeliveries() DeliverySlice {
	if r == nil {
		return nil
	}

	return r.Deliveries
}

func (o *Branch) GetDishes() DishSlice {
	if o == nil {
		return nil
	}

	return o.R.GetDishes()
}

func (r *branchR) GetDishes() DishSlice {
	if r == nil {
		return nil
	}

	return r.Dishes
}

func (o *Branch) GetGuests() GuestSlice {
	if o == nil {
		return nil
	}

	return o.R.GetGuests()
}

func (r *branchR) GetGuests() GuestSlice {
	if r == nil {
		return nil
	}

	return r.Guests
}

func (o *Branch) GetOrders() OrderSlice {
	if o == nil {
		return nil
	}

	return o.R.GetOrders()
}

func (r *branchR) GetOrders() OrderSlice {
	if r == nil {
		return nil
	}

	return r.Orders
}

func (o *Branch) GetRegulations() RegulationSlice {
	if o == nil {
		return nil
	}

	return o.R.GetRegulations()
}

func (r *branchR) GetRegulations() RegulationSlice {
	if r == nil {
		return nil
	}

	return r.Regulations
}

func (o *Branch) GetSets() SetSlice {
	if o == nil {
		return nil
	}

	return o.R.GetSets()
}

func (r *branchR) GetSets() SetSlice {
	if r == nil {
		return nil
	}

	return r.Sets
}

func (o *Branch) GetTables() TableSlice {
	if o == nil {
		return nil
	}

	return o.R.GetTables()
}

func (r *branchR) GetTables() TableSlice {
	if r == nil {
		return nil
	}

	return r.Tables
}

// branchL is where Load methods for each relationship are stored.
type branchL struct{}

var (
	branchAllColumns            = []string{"id", "name", "address", "phone", "manager_id", "created_at", "updated_at", "deleted_at"}
	branchColumnsWithoutDefault = []string{"name", "address"}
	branchColumnsWithDefault    = []string{"id", "phone", "manager_id", "created_at", "updated_at", "deleted_at"}
	branchPrimaryKeyColumns     = []string{"id"}
	branchGeneratedColumns      = []string{}
)

type (
	// BranchSlice is an alias for a slice of pointers to Branch.
	// This should almost always be used instead of []Branch.
	BranchSlice []*Branch
	// BranchHook is the signature for custom Branch hook methods
	BranchHook func(context.Context, boil.ContextExecutor, *Branch) error

	branchQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	branchType                 = reflect.TypeOf(&Branch{})
	branchMapping              = queries.MakeStructMapping(branchType)
	branchPrimaryKeyMapping, _ = queries.BindMapping(branchType, branchMapping, branchPrimaryKeyColumns)
	branchInsertCacheMut       sync.RWMutex
	branchInsertCache          = make(map[string]insertCache)
	branchUpdateCacheMut       sync.RWMutex
	branchUpdateCache          = make(map[string]updateCache)
	branchUpsertCacheMut       sync.RWMutex
	branchUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var branchAfterSelectMu sync.Mutex
var branchAfterSelectHooks []BranchHook

var branchBeforeInsertMu sync.Mutex
var branchBeforeInsertHooks []BranchHook
var branchAfterInsertMu sync.Mutex
var branchAfterInsertHooks []BranchHook

var branchBeforeUpdateMu sync.Mutex
var branchBeforeUpdateHooks []BranchHook
var branchAfterUpdateMu sync.Mutex
var branchAfterUpdateHooks []BranchHook

var branchBeforeDeleteMu sync.Mutex
var branchBeforeDeleteHooks []BranchHook
var branchAfterDeleteMu sync.Mutex
var branchAfterDeleteHooks []BranchHook

var branchBeforeUpsertMu sync.Mutex
var branchBeforeUpsertHooks []BranchHook
var branchAfterUpsertMu sync.Mutex
var branchAfterUpsertHooks []BranchHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Branch) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Branch) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Branch) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Branch) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Branch) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Branch) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Branch) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Branch) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Branch) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBranchHook registers your hook function for all future operations.
func AddBranchHook(hookPoint boil.HookPoint, branchHook BranchHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		branchAfterSelectMu.Lock()
		branchAfterSelectHooks = append(branchAfterSelectHooks, branchHook)
		branchAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		branchBeforeInsertMu.Lock()
		branchBeforeInsertHooks = append(branchBeforeInsertHooks, branchHook)
		branchBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		branchAfterInsertMu.Lock()
		branchAfterInsertHooks = append(branchAfterInsertHooks, branchHook)
		branchAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		branchBeforeUpdateMu.Lock()
		branchBeforeUpdateHooks = append(branchBeforeUpdateHooks, branchHook)
		branchBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		branchAfterUpdateMu.Lock()
		branchAfterUpdateHooks = append(branchAfterUpdateHooks, branchHook)
		branchAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		branchBeforeDeleteMu.Lock()
		branchBeforeDeleteHooks = append(branchBeforeDeleteHooks, branchHook)
		branchBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		branchAfterDeleteMu.Lock()
		branchAfterDeleteHooks = append(branchAfterDeleteHooks, branchHook)
		branchAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		branchBeforeUpsertMu.Lock()
		branchBeforeUpsertHooks = append(branchBeforeUpsertHooks, branchHook)
		branchBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		branchAfterUpsertMu.Lock()
		branchAfterUpsertHooks = append(branchAfterUpsertHooks, branchHook)
		branchAfterUpsertMu.Unlock()
	}
}

// One returns a single branch record from the query.
func (q branchQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Branch, error) {
	o := &Branch{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for branches")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Branch records from the query.
func (q branchQuery) All(ctx context.Context, exec boil.ContextExecutor) (BranchSlice, error) {
	var o []*Branch

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Branch slice")
	}

	if len(branchAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Branch records in the query.
func (q branchQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count branches rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q branchQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if branches exists")
	}

	return count > 0, nil
}

// Accounts retrieves all the account's Accounts with an executor.
func (o *Branch) Accounts(mods ...qm.QueryMod) accountQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"accounts\".\"branch_id\"=?", o.ID),
	)

	return Accounts(queryMods...)
}

// Deliveries retrieves all the delivery's Deliveries with an executor.
func (o *Branch) Deliveries(mods ...qm.QueryMod) deliveryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"deliveries\".\"branch_id\"=?", o.ID),
	)

	return Deliveries(queryMods...)
}

// Dishes retrieves all the dish's Dishes with an executor.
func (o *Branch) Dishes(mods ...qm.QueryMod) dishQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dishes\".\"branch_id\"=?", o.ID),
	)

	return Dishes(queryMods...)
}

// Guests retrieves all the guest's Guests with an executor.
func (o *Branch) Guests(mods ...qm.QueryMod) guestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"guests\".\"branch_id\"=?", o.ID),
	)

	return Guests(queryMods...)
}

// Orders retrieves all the order's Orders with an executor.
func (o *Branch) Orders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"branch_id\"=?", o.ID),
	)

	return Orders(queryMods...)
}

// Regulations retrieves all the regulation's Regulations with an executor.
func (o *Branch) Regulations(mods ...qm.QueryMod) regulationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"regulations\".\"branch_id\"=?", o.ID),
	)

	return Regulations(queryMods...)
}

// Sets retrieves all the set's Sets with an executor.
func (o *Branch) Sets(mods ...qm.QueryMod) setQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sets\".\"branch_id\"=?", o.ID),
	)

	return Sets(queryMods...)
}

// Tables retrieves all the table's Tables with an executor.
func (o *Branch) Tables(mods ...qm.QueryMod) tableQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tables\".\"branch_id\"=?", o.ID),
	)

	return Tables(queryMods...)
}

// LoadAccounts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (branchL) LoadAccounts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBranch interface{}, mods queries.Applicator) error {
	var slice []*Branch
	var object *Branch

	if singular {
		var ok bool
		object, ok = maybeBranch.(*Branch)
		if !ok {
			object = new(Branch)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBranch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBranch))
			}
		}
	} else {
		s, ok := maybeBranch.(*[]*Branch)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBranch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBranch))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`accounts`),
		qm.WhereIn(`accounts.branch_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load accounts")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice accounts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on accounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for accounts")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Accounts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &accountR{}
			}
			foreign.R.Branch = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BranchID) {
				local.R.Accounts = append(local.R.Accounts, foreign)
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.Branch = local
				break
			}
		}
	}

	return nil
}

// LoadDeliveries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (branchL) LoadDeliveries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBranch interface{}, mods queries.Applicator) error {
	var slice []*Branch
	var object *Branch

	if singular {
		var ok bool
		object, ok = maybeBranch.(*Branch)
		if !ok {
			object = new(Branch)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBranch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBranch))
			}
		}
	} else {
		s, ok := maybeBranch.(*[]*Branch)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBranch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBranch))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`deliveries`),
		qm.WhereIn(`deliveries.branch_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load deliveries")
	}

	var resultSlice []*Delivery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice deliveries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on deliveries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for deliveries")
	}

	if len(deliveryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Deliveries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deliveryR{}
			}
			foreign.R.Branch = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BranchID) {
				local.R.Deliveries = append(local.R.Deliveries, foreign)
				if foreign.R == nil {
					foreign.R = &deliveryR{}
				}
				foreign.R.Branch = local
				break
			}
		}
	}

	return nil
}

// LoadDishes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (branchL) LoadDishes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBranch interface{}, mods queries.Applicator) error {
	var slice []*Branch
	var object *Branch

	if singular {
		var ok bool
		object, ok = maybeBranch.(*Branch)
		if !ok {
			object = new(Branch)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBranch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBranch))
			}
		}
	} else {
		s, ok := maybeBranch.(*[]*Branch)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBranch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBranch))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`dishes`),
		qm.WhereIn(`dishes.branch_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dishes")
	}

	var resultSlice []*Dish
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dishes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dishes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dishes")
	}

	if len(dishAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Dishes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dishR{}
			}
			foreign.R.Branch = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BranchID) {
				local.R.Dishes = append(local.R.Dishes, foreign)
				if foreign.R == nil {
					foreign.R = &dishR{}
				}
				foreign.R.Branch = local
				break
			}
		}
	}

	return nil
}

// LoadGuests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (branchL) LoadGuests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBranch interface{}, mods queries.Applicator) error {
	var slice []*Branch
	var object *Branch

	if singular {
		var ok bool
		object, ok = maybeBranch.(*Branch)
		if !ok {
			object = new(Branch)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBranch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBranch))
			}
		}
	} else {
		s, ok := maybeBranch.(*[]*Branch)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBranch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBranch))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`guests`),
		qm.WhereIn(`guests.branch_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load guests")
	}

	var resultSlice []*Guest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice guests")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on guests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for guests")
	}

	if len(guestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Guests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &guestR{}
			}
			foreign.R.Branch = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BranchID) {
				local.R.Guests = append(local.R.Guests, foreign)
				if foreign.R == nil {
					foreign.R = &guestR{}
				}
				foreign.R.Branch = local
				break
			}
		}
	}

	return nil
}

// LoadOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (branchL) LoadOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBranch interface{}, mods queries.Applicator) error {
	var slice []*Branch
	var object *Branch

	if singular {
		var ok bool
		object, ok = maybeBranch.(*Branch)
		if !ok {
			object = new(Branch)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBranch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBranch))
			}
		}
	} else {
		s, ok := maybeBranch.(*[]*Branch)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBranch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBranch))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.branch_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Orders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.Branch = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BranchID) {
				local.R.Orders = append(local.R.Orders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.Branch = local
				break
			}
		}
	}

	return nil
}

// LoadRegulations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (branchL) LoadRegulations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBranch interface{}, mods queries.Applicator) error {
	var slice []*Branch
	var object *Branch

	if singular {
		var ok bool
		object, ok = maybeBranch.(*Branch)
		if !ok {
			object = new(Branch)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBranch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBranch))
			}
		}
	} else {
		s, ok := maybeBranch.(*[]*Branch)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBranch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBranch))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`regulations`),
		qm.WhereIn(`regulations.branch_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load regulations")
	}

	var resultSlice []*Regulation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice regulations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on regulations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for regulations")
	}

	if len(regulationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Regulations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &regulationR{}
			}
			foreign.R.Branch = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BranchID) {
				local.R.Regulations = append(local.R.Regulations, foreign)
				if foreign.R == nil {
					foreign.R = &regulationR{}
				}
				foreign.R.Branch = local
				break
			}
		}
	}

	return nil
}

// LoadSets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (branchL) LoadSets(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBranch interface{}, mods queries.Applicator) error {
	var slice []*Branch
	var object *Branch

	if singular {
		var ok bool
		object, ok = maybeBranch.(*Branch)
		if !ok {
			object = new(Branch)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBranch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBranch))
			}
		}
	} else {
		s, ok := maybeBranch.(*[]*Branch)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBranch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBranch))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sets`),
		qm.WhereIn(`sets.branch_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sets")
	}

	var resultSlice []*Set
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sets")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sets")
	}

	if len(setAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Sets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &setR{}
			}
			foreign.R.Branch = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BranchID) {
				local.R.Sets = append(local.R.Sets, foreign)
				if foreign.R == nil {
					foreign.R = &setR{}
				}
				foreign.R.Branch = local
				break
			}
		}
	}

	return nil
}

// LoadTables allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (branchL) LoadTables(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBranch interface{}, mods queries.Applicator) error {
	var slice []*Branch
	var object *Branch

	if singular {
		var ok bool
		object, ok = maybeBranch.(*Branch)
		if !ok {
			object = new(Branch)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBranch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBranch))
			}
		}
	} else {
		s, ok := maybeBranch.(*[]*Branch)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBranch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBranch))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tables`),
		qm.WhereIn(`tables.branch_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tables")
	}

	var resultSlice []*Table
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tables")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tables")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tables")
	}

	if len(tableAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Tables = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tableR{}
			}
			foreign.R.Branch = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BranchID) {
				local.R.Tables = append(local.R.Tables, foreign)
				if foreign.R == nil {
					foreign.R = &tableR{}
				}
				foreign.R.Branch = local
				break
			}
		}
	}

	return nil
}

// AddAccounts adds the given related objects to the existing relationships
// of the branch, optionally inserting them as new records.
// Appends related to o.R.Accounts.
// Sets related.R.Branch appropriately.
func (o *Branch) AddAccounts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Account) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BranchID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"accounts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"branch_id"}),
				strmangle.WhereClause("\"", "\"", 2, accountPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BranchID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &branchR{
			Accounts: related,
		}
	} else {
		o.R.Accounts = append(o.R.Accounts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &accountR{
				Branch: o,
			}
		} else {
			rel.R.Branch = o
		}
	}
	return nil
}

// SetAccounts removes all previously related items of the
// branch replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Branch's Accounts accordingly.
// Replaces o.R.Accounts with related.
// Sets related.R.Branch's Accounts accordingly.
func (o *Branch) SetAccounts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Account) error {
	query := "update \"accounts\" set \"branch_id\" = null where \"branch_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Accounts {
			queries.SetScanner(&rel.BranchID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Branch = nil
		}
		o.R.Accounts = nil
	}

	return o.AddAccounts(ctx, exec, insert, related...)
}

// RemoveAccounts relationships from objects passed in.
// Removes related items from R.Accounts (uses pointer comparison, removal does not keep order)
// Sets related.R.Branch.
func (o *Branch) RemoveAccounts(ctx context.Context, exec boil.ContextExecutor, related ...*Account) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BranchID, nil)
		if rel.R != nil {
			rel.R.Branch = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("branch_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Accounts {
			if rel != ri {
				continue
			}

			ln := len(o.R.Accounts)
			if ln > 1 && i < ln-1 {
				o.R.Accounts[i] = o.R.Accounts[ln-1]
			}
			o.R.Accounts = o.R.Accounts[:ln-1]
			break
		}
	}

	return nil
}

// AddDeliveries adds the given related objects to the existing relationships
// of the branch, optionally inserting them as new records.
// Appends related to o.R.Deliveries.
// Sets related.R.Branch appropriately.
func (o *Branch) AddDeliveries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Delivery) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BranchID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"deliveries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"branch_id"}),
				strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BranchID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &branchR{
			Deliveries: related,
		}
	} else {
		o.R.Deliveries = append(o.R.Deliveries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deliveryR{
				Branch: o,
			}
		} else {
			rel.R.Branch = o
		}
	}
	return nil
}

// SetDeliveries removes all previously related items of the
// branch replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Branch's Deliveries accordingly.
// Replaces o.R.Deliveries with related.
// Sets related.R.Branch's Deliveries accordingly.
func (o *Branch) SetDeliveries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Delivery) error {
	query := "update \"deliveries\" set \"branch_id\" = null where \"branch_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Deliveries {
			queries.SetScanner(&rel.BranchID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Branch = nil
		}
		o.R.Deliveries = nil
	}

	return o.AddDeliveries(ctx, exec, insert, related...)
}

// RemoveDeliveries relationships from objects passed in.
// Removes related items from R.Deliveries (uses pointer comparison, removal does not keep order)
// Sets related.R.Branch.
func (o *Branch) RemoveDeliveries(ctx context.Context, exec boil.ContextExecutor, related ...*Delivery) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BranchID, nil)
		if rel.R != nil {
			rel.R.Branch = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("branch_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Deliveries {
			if rel != ri {
				continue
			}

			ln := len(o.R.Deliveries)
			if ln > 1 && i < ln-1 {
				o.R.Deliveries[i] = o.R.Deliveries[ln-1]
			}
			o.R.Deliveries = o.R.Deliveries[:ln-1]
			break
		}
	}

	return nil
}

// AddDishes adds the given related objects to the existing relationships
// of the branch, optionally inserting them as new records.
// Appends related to o.R.Dishes.
// Sets related.R.Branch appropriately.
func (o *Branch) AddDishes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dish) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BranchID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dishes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"branch_id"}),
				strmangle.WhereClause("\"", "\"", 2, dishPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BranchID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &branchR{
			Dishes: related,
		}
	} else {
		o.R.Dishes = append(o.R.Dishes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dishR{
				Branch: o,
			}
		} else {
			rel.R.Branch = o
		}
	}
	return nil
}

// SetDishes removes all previously related items of the
// branch replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Branch's Dishes accordingly.
// Replaces o.R.Dishes with related.
// Sets related.R.Branch's Dishes accordingly.
func (o *Branch) SetDishes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dish) error {
	query := "update \"dishes\" set \"branch_id\" = null where \"branch_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Dishes {
			queries.SetScanner(&rel.BranchID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Branch = nil
		}
		o.R.Dishes = nil
	}

	return o.AddDishes(ctx, exec, insert, related...)
}

// RemoveDishes relationships from objects passed in.
// Removes related items from R.Dishes (uses pointer comparison, removal does not keep order)
// Sets related.R.Branch.
func (o *Branch) RemoveDishes(ctx context.Context, exec boil.ContextExecutor, related ...*Dish) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BranchID, nil)
		if rel.R != nil {
			rel.R.Branch = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("branch_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Dishes {
			if rel != ri {
				continue
			}

			ln := len(o.R.Dishes)
			if ln > 1 && i < ln-1 {
				o.R.Dishes[i] = o.R.Dishes[ln-1]
			}
			o.R.Dishes = o.R.Dishes[:ln-1]
			break
		}
	}

	return nil
}

// AddGuests adds the given related objects to the existing relationships
// of the branch, optionally inserting them as new records.
// Appends related to o.R.Guests.
// Sets related.R.Branch appropriately.
func (o *Branch) AddGuests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Guest) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BranchID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"guests\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"branch_id"}),
				strmangle.WhereClause("\"", "\"", 2, guestPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BranchID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &branchR{
			Guests: related,
		}
	} else {
		o.R.Guests = append(o.R.Guests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &guestR{
				Branch: o,
			}
		} else {
			rel.R.Branch = o
		}
	}
	return nil
}

// SetGuests removes all previously related items of the
// branch replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Branch's Guests accordingly.
// Replaces o.R.Guests with related.
// Sets related.R.Branch's Guests accordingly.
func (o *Branch) SetGuests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Guest) error {
	query := "update \"guests\" set \"branch_id\" = null where \"branch_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Guests {
			queries.SetScanner(&rel.BranchID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Branch = nil
		}
		o.R.Guests = nil
	}

	return o.AddGuests(ctx, exec, insert, related...)
}

// RemoveGuests relationships from objects passed in.
// Removes related items from R.Guests (uses pointer comparison, removal does not keep order)
// Sets related.R.Branch.
func (o *Branch) RemoveGuests(ctx context.Context, exec boil.ContextExecutor, related ...*Guest) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BranchID, nil)
		if rel.R != nil {
			rel.R.Branch = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("branch_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Guests {
			if rel != ri {
				continue
			}

			ln := len(o.R.Guests)
			if ln > 1 && i < ln-1 {
				o.R.Guests[i] = o.R.Guests[ln-1]
			}
			o.R.Guests = o.R.Guests[:ln-1]
			break
		}
	}

	return nil
}

// AddOrders adds the given related objects to the existing relationships
// of the branch, optionally inserting them as new records.
// Appends related to o.R.Orders.
// Sets related.R.Branch appropriately.
func (o *Branch) AddOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BranchID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"branch_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BranchID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &branchR{
			Orders: related,
		}
	} else {
		o.R.Orders = append(o.R.Orders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				Branch: o,
			}
		} else {
			rel.R.Branch = o
		}
	}
	return nil
}

// SetOrders removes all previously related items of the
// branch replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Branch's Orders accordingly.
// Replaces o.R.Orders with related.
// Sets related.R.Branch's Orders accordingly.
func (o *Branch) SetOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	query := "update \"orders\" set \"branch_id\" = null where \"branch_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Orders {
			queries.SetScanner(&rel.BranchID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Branch = nil
		}
		o.R.Orders = nil
	}

	return o.AddOrders(ctx, exec, insert, related...)
}

// RemoveOrders relationships from objects passed in.
// Removes related items from R.Orders (uses pointer comparison, removal does not keep order)
// Sets related.R.Branch.
func (o *Branch) RemoveOrders(ctx context.Context, exec boil.ContextExecutor, related ...*Order) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BranchID, nil)
		if rel.R != nil {
			rel.R.Branch = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("branch_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Orders {
			if rel != ri {
				continue
			}

			ln := len(o.R.Orders)
			if ln > 1 && i < ln-1 {
				o.R.Orders[i] = o.R.Orders[ln-1]
			}
			o.R.Orders = o.R.Orders[:ln-1]
			break
		}
	}

	return nil
}

// AddRegulations adds the given related objects to the existing relationships
// of the branch, optionally inserting them as new records.
// Appends related to o.R.Regulations.
// Sets related.R.Branch appropriately.
func (o *Branch) AddRegulations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Regulation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BranchID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"regulations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"branch_id"}),
				strmangle.WhereClause("\"", "\"", 2, regulationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BranchID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &branchR{
			Regulations: related,
		}
	} else {
		o.R.Regulations = append(o.R.Regulations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &regulationR{
				Branch: o,
			}
		} else {
			rel.R.Branch = o
		}
	}
	return nil
}

// SetRegulations removes all previously related items of the
// branch replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Branch's Regulations accordingly.
// Replaces o.R.Regulations with related.
// Sets related.R.Branch's Regulations accordingly.
func (o *Branch) SetRegulations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Regulation) error {
	query := "update \"regulations\" set \"branch_id\" = null where \"branch_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Regulations {
			queries.SetScanner(&rel.BranchID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Branch = nil
		}
		o.R.Regulations = nil
	}

	return o.AddRegulations(ctx, exec, insert, related...)
}

// RemoveRegulations relationships from objects passed in.
// Removes related items from R.Regulations (uses pointer comparison, removal does not keep order)
// Sets related.R.Branch.
func (o *Branch) RemoveRegulations(ctx context.Context, exec boil.ContextExecutor, related ...*Regulation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BranchID, nil)
		if rel.R != nil {
			rel.R.Branch = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("branch_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Regulations {
			if rel != ri {
				continue
			}

			ln := len(o.R.Regulations)
			if ln > 1 && i < ln-1 {
				o.R.Regulations[i] = o.R.Regulations[ln-1]
			}
			o.R.Regulations = o.R.Regulations[:ln-1]
			break
		}
	}

	return nil
}

// AddSets adds the given related objects to the existing relationships
// of the branch, optionally inserting them as new records.
// Appends related to o.R.Sets.
// Sets related.R.Branch appropriately.
func (o *Branch) AddSets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Set) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BranchID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sets\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"branch_id"}),
				strmangle.WhereClause("\"", "\"", 2, setPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BranchID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &branchR{
			Sets: related,
		}
	} else {
		o.R.Sets = append(o.R.Sets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &setR{
				Branch: o,
			}
		} else {
			rel.R.Branch = o
		}
	}
	return nil
}

// SetSets removes all previously related items of the
// branch replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Branch's Sets accordingly.
// Replaces o.R.Sets with related.
// Sets related.R.Branch's Sets accordingly.
func (o *Branch) SetSets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Set) error {
	query := "update \"sets\" set \"branch_id\" = null where \"branch_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Sets {
			queries.SetScanner(&rel.BranchID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Branch = nil
		}
		o.R.Sets = nil
	}

	return o.AddSets(ctx, exec, insert, related...)
}

// RemoveSets relationships from objects passed in.
// Removes related items from R.Sets (uses pointer comparison, removal does not keep order)
// Sets related.R.Branch.
func (o *Branch) RemoveSets(ctx context.Context, exec boil.ContextExecutor, related ...*Set) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BranchID, nil)
		if rel.R != nil {
			rel.R.Branch = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("branch_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Sets {
			if rel != ri {
				continue
			}

			ln := len(o.R.Sets)
			if ln > 1 && i < ln-1 {
				o.R.Sets[i] = o.R.Sets[ln-1]
			}
			o.R.Sets = o.R.Sets[:ln-1]
			break
		}
	}

	return nil
}

// AddTables adds the given related objects to the existing relationships
// of the branch, optionally inserting them as new records.
// Appends related to o.R.Tables.
// Sets related.R.Branch appropriately.
func (o *Branch) AddTables(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Table) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BranchID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tables\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"branch_id"}),
				strmangle.WhereClause("\"", "\"", 2, tablePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Number}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BranchID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &branchR{
			Tables: related,
		}
	} else {
		o.R.Tables = append(o.R.Tables, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tableR{
				Branch: o,
			}
		} else {
			rel.R.Branch = o
		}
	}
	return nil
}

// SetTables removes all previously related items of the
// branch replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Branch's Tables accordingly.
// Replaces o.R.Tables with related.
// Sets related.R.Branch's Tables accordingly.
func (o *Branch) SetTables(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Table) error {
	query := "update \"tables\" set \"branch_id\" = null where \"branch_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Tables {
			queries.SetScanner(&rel.BranchID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Branch = nil
		}
		o.R.Tables = nil
	}

	return o.AddTables(ctx, exec, insert, related...)
}

// RemoveTables relationships from objects passed in.
// Removes related items from R.Tables (uses pointer comparison, removal does not keep order)
// Sets related.R.Branch.
func (o *Branch) RemoveTables(ctx context.Context, exec boil.ContextExecutor, related ...*Table) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BranchID, nil)
		if rel.R != nil {
			rel.R.Branch = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("branch_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Tables {
			if rel != ri {
				continue
			}

			ln := len(o.R.Tables)
			if ln > 1 && i < ln-1 {
				o.R.Tables[i] = o.R.Tables[ln-1]
			}
			o.R.Tables = o.R.Tables[:ln-1]
			break
		}
	}

	return nil
}

// Branches retrieves all the records using an executor.
func Branches(mods ...qm.QueryMod) branchQuery {
	mods = append(mods, qm.From("\"branches\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"branches\".*"})
	}

	return branchQuery{q}
}

// FindBranch retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBranch(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Branch, error) {
	branchObj := &Branch{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"branches\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, branchObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from branches")
	}

	if err = branchObj.doAfterSelectHooks(ctx, exec); err != nil {
		return branchObj, err
	}

	return branchObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Branch) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no branches provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(branchColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	branchInsertCacheMut.RLock()
	cache, cached := branchInsertCache[key]
	branchInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			branchAllColumns,
			branchColumnsWithDefault,
			branchColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(branchType, branchMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(branchType, branchMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"branches\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"branches\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into branches")
	}

	if !cached {
		branchInsertCacheMut.Lock()
		branchInsertCache[key] = cache
		branchInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Branch.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Branch) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	branchUpdateCacheMut.RLock()
	cache, cached := branchUpdateCache[key]
	branchUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			branchAllColumns,
			branchPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update branches, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"branches\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, branchPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(branchType, branchMapping, append(wl, branchPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update branches row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for branches")
	}

	if !cached {
		branchUpdateCacheMut.Lock()
		branchUpdateCache[key] = cache
		branchUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q branchQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for branches")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for branches")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BranchSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), branchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"branches\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, branchPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in branch slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all branch")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Branch) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no branches provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(branchColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	branchUpsertCacheMut.RLock()
	cache, cached := branchUpsertCache[key]
	branchUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			branchAllColumns,
			branchColumnsWithDefault,
			branchColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			branchAllColumns,
			branchPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert branches, could not build update column list")
		}

		ret := strmangle.SetComplement(branchAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(branchPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert branches, could not build conflict column list")
			}

			conflict = make([]string, len(branchPrimaryKeyColumns))
			copy(conflict, branchPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"branches\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(branchType, branchMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(branchType, branchMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert branches")
	}

	if !cached {
		branchUpsertCacheMut.Lock()
		branchUpsertCache[key] = cache
		branchUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Branch record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Branch) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Branch provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), branchPrimaryKeyMapping)
	sql := "DELETE FROM \"branches\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from branches")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for branches")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q branchQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no branchQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from branches")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for branches")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BranchSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(branchBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), branchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"branches\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, branchPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from branch slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for branches")
	}

	if len(branchAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Branch) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBranch(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BranchSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BranchSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), branchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"branches\".* FROM \"branches\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, branchPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in BranchSlice")
	}

	*o = slice

	return nil
}

// BranchExists checks if the Branch row exists.
func BranchExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"branches\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if branches exists")
	}

	return exists, nil
}

// Exists checks if the Branch row exists.
func (o *Branch) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BranchExists(ctx, exec, o.ID)
}
