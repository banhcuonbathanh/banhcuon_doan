// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Delivery is an object representing the database table.
type Delivery struct {
	ID                    int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	BranchID              null.Int64  `boil:"branch_id" json:"branch_id,omitempty" toml:"branch_id" yaml:"branch_id,omitempty"`
	GuestID               null.Int64  `boil:"guest_id" json:"guest_id,omitempty" toml:"guest_id" yaml:"guest_id,omitempty"`
	UserID                null.Int64  `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	IsGuest               null.Bool   `boil:"is_guest" json:"is_guest,omitempty" toml:"is_guest" yaml:"is_guest,omitempty"`
	TableNumber           null.Int    `boil:"table_number" json:"table_number,omitempty" toml:"table_number" yaml:"table_number,omitempty"`
	OrderHandlerID        null.Int64  `boil:"order_handler_id" json:"order_handler_id,omitempty" toml:"order_handler_id" yaml:"order_handler_id,omitempty"`
	Status                null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	TotalPrice            null.Int    `boil:"total_price" json:"total_price,omitempty" toml:"total_price" yaml:"total_price,omitempty"`
	OrderID               null.Int64  `boil:"order_id" json:"order_id,omitempty" toml:"order_id" yaml:"order_id,omitempty"`
	BowChili              null.Int    `boil:"bow_chili" json:"bow_chili,omitempty" toml:"bow_chili" yaml:"bow_chili,omitempty"`
	BowNoChili            null.Int    `boil:"bow_no_chili" json:"bow_no_chili,omitempty" toml:"bow_no_chili" yaml:"bow_no_chili,omitempty"`
	TakeAway              null.Bool   `boil:"take_away" json:"take_away,omitempty" toml:"take_away" yaml:"take_away,omitempty"`
	ChiliNumber           null.Int    `boil:"chili_number" json:"chili_number,omitempty" toml:"chili_number" yaml:"chili_number,omitempty"`
	TableToken            null.String `boil:"table_token" json:"table_token,omitempty" toml:"table_token" yaml:"table_token,omitempty"`
	ClientName            null.String `boil:"client_name" json:"client_name,omitempty" toml:"client_name" yaml:"client_name,omitempty"`
	DeliveryAddress       null.String `boil:"delivery_address" json:"delivery_address,omitempty" toml:"delivery_address" yaml:"delivery_address,omitempty"`
	DeliveryContact       null.String `boil:"delivery_contact" json:"delivery_contact,omitempty" toml:"delivery_contact" yaml:"delivery_contact,omitempty"`
	DeliveryNotes         null.String `boil:"delivery_notes" json:"delivery_notes,omitempty" toml:"delivery_notes" yaml:"delivery_notes,omitempty"`
	ScheduledTime         null.Time   `boil:"scheduled_time" json:"scheduled_time,omitempty" toml:"scheduled_time" yaml:"scheduled_time,omitempty"`
	DeliveryFee           null.Int    `boil:"delivery_fee" json:"delivery_fee,omitempty" toml:"delivery_fee" yaml:"delivery_fee,omitempty"`
	DeliveryStatus        null.String `boil:"delivery_status" json:"delivery_status,omitempty" toml:"delivery_status" yaml:"delivery_status,omitempty"`
	EstimatedDeliveryTime null.Time   `boil:"estimated_delivery_time" json:"estimated_delivery_time,omitempty" toml:"estimated_delivery_time" yaml:"estimated_delivery_time,omitempty"`
	ActualDeliveryTime    null.Time   `boil:"actual_delivery_time" json:"actual_delivery_time,omitempty" toml:"actual_delivery_time" yaml:"actual_delivery_time,omitempty"`
	CreatedAt             null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt             null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt             null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *deliveryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deliveryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeliveryColumns = struct {
	ID                    string
	BranchID              string
	GuestID               string
	UserID                string
	IsGuest               string
	TableNumber           string
	OrderHandlerID        string
	Status                string
	TotalPrice            string
	OrderID               string
	BowChili              string
	BowNoChili            string
	TakeAway              string
	ChiliNumber           string
	TableToken            string
	ClientName            string
	DeliveryAddress       string
	DeliveryContact       string
	DeliveryNotes         string
	ScheduledTime         string
	DeliveryFee           string
	DeliveryStatus        string
	EstimatedDeliveryTime string
	ActualDeliveryTime    string
	CreatedAt             string
	UpdatedAt             string
	DeletedAt             string
}{
	ID:                    "id",
	BranchID:              "branch_id",
	GuestID:               "guest_id",
	UserID:                "user_id",
	IsGuest:               "is_guest",
	TableNumber:           "table_number",
	OrderHandlerID:        "order_handler_id",
	Status:                "status",
	TotalPrice:            "total_price",
	OrderID:               "order_id",
	BowChili:              "bow_chili",
	BowNoChili:            "bow_no_chili",
	TakeAway:              "take_away",
	ChiliNumber:           "chili_number",
	TableToken:            "table_token",
	ClientName:            "client_name",
	DeliveryAddress:       "delivery_address",
	DeliveryContact:       "delivery_contact",
	DeliveryNotes:         "delivery_notes",
	ScheduledTime:         "scheduled_time",
	DeliveryFee:           "delivery_fee",
	DeliveryStatus:        "delivery_status",
	EstimatedDeliveryTime: "estimated_delivery_time",
	ActualDeliveryTime:    "actual_delivery_time",
	CreatedAt:             "created_at",
	UpdatedAt:             "updated_at",
	DeletedAt:             "deleted_at",
}

var DeliveryTableColumns = struct {
	ID                    string
	BranchID              string
	GuestID               string
	UserID                string
	IsGuest               string
	TableNumber           string
	OrderHandlerID        string
	Status                string
	TotalPrice            string
	OrderID               string
	BowChili              string
	BowNoChili            string
	TakeAway              string
	ChiliNumber           string
	TableToken            string
	ClientName            string
	DeliveryAddress       string
	DeliveryContact       string
	DeliveryNotes         string
	ScheduledTime         string
	DeliveryFee           string
	DeliveryStatus        string
	EstimatedDeliveryTime string
	ActualDeliveryTime    string
	CreatedAt             string
	UpdatedAt             string
	DeletedAt             string
}{
	ID:                    "deliveries.id",
	BranchID:              "deliveries.branch_id",
	GuestID:               "deliveries.guest_id",
	UserID:                "deliveries.user_id",
	IsGuest:               "deliveries.is_guest",
	TableNumber:           "deliveries.table_number",
	OrderHandlerID:        "deliveries.order_handler_id",
	Status:                "deliveries.status",
	TotalPrice:            "deliveries.total_price",
	OrderID:               "deliveries.order_id",
	BowChili:              "deliveries.bow_chili",
	BowNoChili:            "deliveries.bow_no_chili",
	TakeAway:              "deliveries.take_away",
	ChiliNumber:           "deliveries.chili_number",
	TableToken:            "deliveries.table_token",
	ClientName:            "deliveries.client_name",
	DeliveryAddress:       "deliveries.delivery_address",
	DeliveryContact:       "deliveries.delivery_contact",
	DeliveryNotes:         "deliveries.delivery_notes",
	ScheduledTime:         "deliveries.scheduled_time",
	DeliveryFee:           "deliveries.delivery_fee",
	DeliveryStatus:        "deliveries.delivery_status",
	EstimatedDeliveryTime: "deliveries.estimated_delivery_time",
	ActualDeliveryTime:    "deliveries.actual_delivery_time",
	CreatedAt:             "deliveries.created_at",
	UpdatedAt:             "deliveries.updated_at",
	DeletedAt:             "deliveries.deleted_at",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DeliveryWhere = struct {
	ID                    whereHelperint64
	BranchID              whereHelpernull_Int64
	GuestID               whereHelpernull_Int64
	UserID                whereHelpernull_Int64
	IsGuest               whereHelpernull_Bool
	TableNumber           whereHelpernull_Int
	OrderHandlerID        whereHelpernull_Int64
	Status                whereHelpernull_String
	TotalPrice            whereHelpernull_Int
	OrderID               whereHelpernull_Int64
	BowChili              whereHelpernull_Int
	BowNoChili            whereHelpernull_Int
	TakeAway              whereHelpernull_Bool
	ChiliNumber           whereHelpernull_Int
	TableToken            whereHelpernull_String
	ClientName            whereHelpernull_String
	DeliveryAddress       whereHelpernull_String
	DeliveryContact       whereHelpernull_String
	DeliveryNotes         whereHelpernull_String
	ScheduledTime         whereHelpernull_Time
	DeliveryFee           whereHelpernull_Int
	DeliveryStatus        whereHelpernull_String
	EstimatedDeliveryTime whereHelpernull_Time
	ActualDeliveryTime    whereHelpernull_Time
	CreatedAt             whereHelpernull_Time
	UpdatedAt             whereHelpernull_Time
	DeletedAt             whereHelpernull_Time
}{
	ID:                    whereHelperint64{field: "\"deliveries\".\"id\""},
	BranchID:              whereHelpernull_Int64{field: "\"deliveries\".\"branch_id\""},
	GuestID:               whereHelpernull_Int64{field: "\"deliveries\".\"guest_id\""},
	UserID:                whereHelpernull_Int64{field: "\"deliveries\".\"user_id\""},
	IsGuest:               whereHelpernull_Bool{field: "\"deliveries\".\"is_guest\""},
	TableNumber:           whereHelpernull_Int{field: "\"deliveries\".\"table_number\""},
	OrderHandlerID:        whereHelpernull_Int64{field: "\"deliveries\".\"order_handler_id\""},
	Status:                whereHelpernull_String{field: "\"deliveries\".\"status\""},
	TotalPrice:            whereHelpernull_Int{field: "\"deliveries\".\"total_price\""},
	OrderID:               whereHelpernull_Int64{field: "\"deliveries\".\"order_id\""},
	BowChili:              whereHelpernull_Int{field: "\"deliveries\".\"bow_chili\""},
	BowNoChili:            whereHelpernull_Int{field: "\"deliveries\".\"bow_no_chili\""},
	TakeAway:              whereHelpernull_Bool{field: "\"deliveries\".\"take_away\""},
	ChiliNumber:           whereHelpernull_Int{field: "\"deliveries\".\"chili_number\""},
	TableToken:            whereHelpernull_String{field: "\"deliveries\".\"table_token\""},
	ClientName:            whereHelpernull_String{field: "\"deliveries\".\"client_name\""},
	DeliveryAddress:       whereHelpernull_String{field: "\"deliveries\".\"delivery_address\""},
	DeliveryContact:       whereHelpernull_String{field: "\"deliveries\".\"delivery_contact\""},
	DeliveryNotes:         whereHelpernull_String{field: "\"deliveries\".\"delivery_notes\""},
	ScheduledTime:         whereHelpernull_Time{field: "\"deliveries\".\"scheduled_time\""},
	DeliveryFee:           whereHelpernull_Int{field: "\"deliveries\".\"delivery_fee\""},
	DeliveryStatus:        whereHelpernull_String{field: "\"deliveries\".\"delivery_status\""},
	EstimatedDeliveryTime: whereHelpernull_Time{field: "\"deliveries\".\"estimated_delivery_time\""},
	ActualDeliveryTime:    whereHelpernull_Time{field: "\"deliveries\".\"actual_delivery_time\""},
	CreatedAt:             whereHelpernull_Time{field: "\"deliveries\".\"created_at\""},
	UpdatedAt:             whereHelpernull_Time{field: "\"deliveries\".\"updated_at\""},
	DeletedAt:             whereHelpernull_Time{field: "\"deliveries\".\"deleted_at\""},
}

// DeliveryRels is where relationship names are stored.
var DeliveryRels = struct {
	Branch           string
	Guest            string
	OrderHandler     string
	Order            string
	TableNumberTable string
	User             string
	DeliveryDishes   string
}{
	Branch:           "Branch",
	Guest:            "Guest",
	OrderHandler:     "OrderHandler",
	Order:            "Order",
	TableNumberTable: "TableNumberTable",
	User:             "User",
	DeliveryDishes:   "DeliveryDishes",
}

// deliveryR is where relationships are stored.
type deliveryR struct {
	Branch           *Branch           `boil:"Branch" json:"Branch" toml:"Branch" yaml:"Branch"`
	Guest            *Guest            `boil:"Guest" json:"Guest" toml:"Guest" yaml:"Guest"`
	OrderHandler     *Account          `boil:"OrderHandler" json:"OrderHandler" toml:"OrderHandler" yaml:"OrderHandler"`
	Order            *Order            `boil:"Order" json:"Order" toml:"Order" yaml:"Order"`
	TableNumberTable *Table            `boil:"TableNumberTable" json:"TableNumberTable" toml:"TableNumberTable" yaml:"TableNumberTable"`
	User             *Account          `boil:"User" json:"User" toml:"User" yaml:"User"`
	DeliveryDishes   DeliveryDishSlice `boil:"DeliveryDishes" json:"DeliveryDishes" toml:"DeliveryDishes" yaml:"DeliveryDishes"`
}

// NewStruct creates a new relationship struct
func (*deliveryR) NewStruct() *deliveryR {
	return &deliveryR{}
}

func (o *Delivery) GetBranch() *Branch {
	if o == nil {
		return nil
	}

	return o.R.GetBranch()
}

func (r *deliveryR) GetBranch() *Branch {
	if r == nil {
		return nil
	}

	return r.Branch
}

func (o *Delivery) GetGuest() *Guest {
	if o == nil {
		return nil
	}

	return o.R.GetGuest()
}

func (r *deliveryR) GetGuest() *Guest {
	if r == nil {
		return nil
	}

	return r.Guest
}

func (o *Delivery) GetOrderHandler() *Account {
	if o == nil {
		return nil
	}

	return o.R.GetOrderHandler()
}

func (r *deliveryR) GetOrderHandler() *Account {
	if r == nil {
		return nil
	}

	return r.OrderHandler
}

func (o *Delivery) GetOrder() *Order {
	if o == nil {
		return nil
	}

	return o.R.GetOrder()
}

func (r *deliveryR) GetOrder() *Order {
	if r == nil {
		return nil
	}

	return r.Order
}

func (o *Delivery) GetTableNumberTable() *Table {
	if o == nil {
		return nil
	}

	return o.R.GetTableNumberTable()
}

func (r *deliveryR) GetTableNumberTable() *Table {
	if r == nil {
		return nil
	}

	return r.TableNumberTable
}

func (o *Delivery) GetUser() *Account {
	if o == nil {
		return nil
	}

	return o.R.GetUser()
}

func (r *deliveryR) GetUser() *Account {
	if r == nil {
		return nil
	}

	return r.User
}

func (o *Delivery) GetDeliveryDishes() DeliveryDishSlice {
	if o == nil {
		return nil
	}

	return o.R.GetDeliveryDishes()
}

func (r *deliveryR) GetDeliveryDishes() DeliveryDishSlice {
	if r == nil {
		return nil
	}

	return r.DeliveryDishes
}

// deliveryL is where Load methods for each relationship are stored.
type deliveryL struct{}

var (
	deliveryAllColumns            = []string{"id", "branch_id", "guest_id", "user_id", "is_guest", "table_number", "order_handler_id", "status", "total_price", "order_id", "bow_chili", "bow_no_chili", "take_away", "chili_number", "table_token", "client_name", "delivery_address", "delivery_contact", "delivery_notes", "scheduled_time", "delivery_fee", "delivery_status", "estimated_delivery_time", "actual_delivery_time", "created_at", "updated_at", "deleted_at"}
	deliveryColumnsWithoutDefault = []string{}
	deliveryColumnsWithDefault    = []string{"id", "branch_id", "guest_id", "user_id", "is_guest", "table_number", "order_handler_id", "status", "total_price", "order_id", "bow_chili", "bow_no_chili", "take_away", "chili_number", "table_token", "client_name", "delivery_address", "delivery_contact", "delivery_notes", "scheduled_time", "delivery_fee", "delivery_status", "estimated_delivery_time", "actual_delivery_time", "created_at", "updated_at", "deleted_at"}
	deliveryPrimaryKeyColumns     = []string{"id"}
	deliveryGeneratedColumns      = []string{}
)

type (
	// DeliverySlice is an alias for a slice of pointers to Delivery.
	// This should almost always be used instead of []Delivery.
	DeliverySlice []*Delivery
	// DeliveryHook is the signature for custom Delivery hook methods
	DeliveryHook func(context.Context, boil.ContextExecutor, *Delivery) error

	deliveryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deliveryType                 = reflect.TypeOf(&Delivery{})
	deliveryMapping              = queries.MakeStructMapping(deliveryType)
	deliveryPrimaryKeyMapping, _ = queries.BindMapping(deliveryType, deliveryMapping, deliveryPrimaryKeyColumns)
	deliveryInsertCacheMut       sync.RWMutex
	deliveryInsertCache          = make(map[string]insertCache)
	deliveryUpdateCacheMut       sync.RWMutex
	deliveryUpdateCache          = make(map[string]updateCache)
	deliveryUpsertCacheMut       sync.RWMutex
	deliveryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var deliveryAfterSelectMu sync.Mutex
var deliveryAfterSelectHooks []DeliveryHook

var deliveryBeforeInsertMu sync.Mutex
var deliveryBeforeInsertHooks []DeliveryHook
var deliveryAfterInsertMu sync.Mutex
var deliveryAfterInsertHooks []DeliveryHook

var deliveryBeforeUpdateMu sync.Mutex
var deliveryBeforeUpdateHooks []DeliveryHook
var deliveryAfterUpdateMu sync.Mutex
var deliveryAfterUpdateHooks []DeliveryHook

var deliveryBeforeDeleteMu sync.Mutex
var deliveryBeforeDeleteHooks []DeliveryHook
var deliveryAfterDeleteMu sync.Mutex
var deliveryAfterDeleteHooks []DeliveryHook

var deliveryBeforeUpsertMu sync.Mutex
var deliveryBeforeUpsertHooks []DeliveryHook
var deliveryAfterUpsertMu sync.Mutex
var deliveryAfterUpsertHooks []DeliveryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Delivery) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Delivery) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Delivery) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Delivery) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Delivery) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Delivery) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Delivery) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Delivery) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Delivery) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeliveryHook registers your hook function for all future operations.
func AddDeliveryHook(hookPoint boil.HookPoint, deliveryHook DeliveryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		deliveryAfterSelectMu.Lock()
		deliveryAfterSelectHooks = append(deliveryAfterSelectHooks, deliveryHook)
		deliveryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		deliveryBeforeInsertMu.Lock()
		deliveryBeforeInsertHooks = append(deliveryBeforeInsertHooks, deliveryHook)
		deliveryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		deliveryAfterInsertMu.Lock()
		deliveryAfterInsertHooks = append(deliveryAfterInsertHooks, deliveryHook)
		deliveryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		deliveryBeforeUpdateMu.Lock()
		deliveryBeforeUpdateHooks = append(deliveryBeforeUpdateHooks, deliveryHook)
		deliveryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		deliveryAfterUpdateMu.Lock()
		deliveryAfterUpdateHooks = append(deliveryAfterUpdateHooks, deliveryHook)
		deliveryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		deliveryBeforeDeleteMu.Lock()
		deliveryBeforeDeleteHooks = append(deliveryBeforeDeleteHooks, deliveryHook)
		deliveryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		deliveryAfterDeleteMu.Lock()
		deliveryAfterDeleteHooks = append(deliveryAfterDeleteHooks, deliveryHook)
		deliveryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		deliveryBeforeUpsertMu.Lock()
		deliveryBeforeUpsertHooks = append(deliveryBeforeUpsertHooks, deliveryHook)
		deliveryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		deliveryAfterUpsertMu.Lock()
		deliveryAfterUpsertHooks = append(deliveryAfterUpsertHooks, deliveryHook)
		deliveryAfterUpsertMu.Unlock()
	}
}

// One returns a single delivery record from the query.
func (q deliveryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Delivery, error) {
	o := &Delivery{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for deliveries")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Delivery records from the query.
func (q deliveryQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeliverySlice, error) {
	var o []*Delivery

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Delivery slice")
	}

	if len(deliveryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Delivery records in the query.
func (q deliveryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count deliveries rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deliveryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if deliveries exists")
	}

	return count > 0, nil
}

// Branch pointed to by the foreign key.
func (o *Delivery) Branch(mods ...qm.QueryMod) branchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BranchID),
	}

	queryMods = append(queryMods, mods...)

	return Branches(queryMods...)
}

// Guest pointed to by the foreign key.
func (o *Delivery) Guest(mods ...qm.QueryMod) guestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GuestID),
	}

	queryMods = append(queryMods, mods...)

	return Guests(queryMods...)
}

// OrderHandler pointed to by the foreign key.
func (o *Delivery) OrderHandler(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderHandlerID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// Order pointed to by the foreign key.
func (o *Delivery) Order(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return Orders(queryMods...)
}

// TableNumberTable pointed to by the foreign key.
func (o *Delivery) TableNumberTable(mods ...qm.QueryMod) tableQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"number\" = ?", o.TableNumber),
	}

	queryMods = append(queryMods, mods...)

	return Tables(queryMods...)
}

// User pointed to by the foreign key.
func (o *Delivery) User(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// DeliveryDishes retrieves all the delivery_dish's DeliveryDishes with an executor.
func (o *Delivery) DeliveryDishes(mods ...qm.QueryMod) deliveryDishQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"delivery_dishes\".\"delivery_id\"=?", o.ID),
	)

	return DeliveryDishes(queryMods...)
}

// LoadBranch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deliveryL) LoadBranch(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDelivery interface{}, mods queries.Applicator) error {
	var slice []*Delivery
	var object *Delivery

	if singular {
		var ok bool
		object, ok = maybeDelivery.(*Delivery)
		if !ok {
			object = new(Delivery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDelivery))
			}
		}
	} else {
		s, ok := maybeDelivery.(*[]*Delivery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDelivery))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &deliveryR{}
		}
		if !queries.IsNil(object.BranchID) {
			args[object.BranchID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryR{}
			}

			if !queries.IsNil(obj.BranchID) {
				args[obj.BranchID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`branches`),
		qm.WhereIn(`branches.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Branch")
	}

	var resultSlice []*Branch
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Branch")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for branches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for branches")
	}

	if len(branchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Branch = foreign
		if foreign.R == nil {
			foreign.R = &branchR{}
		}
		foreign.R.Deliveries = append(foreign.R.Deliveries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BranchID, foreign.ID) {
				local.R.Branch = foreign
				if foreign.R == nil {
					foreign.R = &branchR{}
				}
				foreign.R.Deliveries = append(foreign.R.Deliveries, local)
				break
			}
		}
	}

	return nil
}

// LoadGuest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deliveryL) LoadGuest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDelivery interface{}, mods queries.Applicator) error {
	var slice []*Delivery
	var object *Delivery

	if singular {
		var ok bool
		object, ok = maybeDelivery.(*Delivery)
		if !ok {
			object = new(Delivery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDelivery))
			}
		}
	} else {
		s, ok := maybeDelivery.(*[]*Delivery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDelivery))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &deliveryR{}
		}
		if !queries.IsNil(object.GuestID) {
			args[object.GuestID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryR{}
			}

			if !queries.IsNil(obj.GuestID) {
				args[obj.GuestID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`guests`),
		qm.WhereIn(`guests.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Guest")
	}

	var resultSlice []*Guest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Guest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for guests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for guests")
	}

	if len(guestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Guest = foreign
		if foreign.R == nil {
			foreign.R = &guestR{}
		}
		foreign.R.Deliveries = append(foreign.R.Deliveries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.GuestID, foreign.ID) {
				local.R.Guest = foreign
				if foreign.R == nil {
					foreign.R = &guestR{}
				}
				foreign.R.Deliveries = append(foreign.R.Deliveries, local)
				break
			}
		}
	}

	return nil
}

// LoadOrderHandler allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deliveryL) LoadOrderHandler(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDelivery interface{}, mods queries.Applicator) error {
	var slice []*Delivery
	var object *Delivery

	if singular {
		var ok bool
		object, ok = maybeDelivery.(*Delivery)
		if !ok {
			object = new(Delivery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDelivery))
			}
		}
	} else {
		s, ok := maybeDelivery.(*[]*Delivery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDelivery))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &deliveryR{}
		}
		if !queries.IsNil(object.OrderHandlerID) {
			args[object.OrderHandlerID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryR{}
			}

			if !queries.IsNil(obj.OrderHandlerID) {
				args[obj.OrderHandlerID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`accounts`),
		qm.WhereIn(`accounts.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for accounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for accounts")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderHandler = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.OrderHandlerDeliveries = append(foreign.R.OrderHandlerDeliveries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderHandlerID, foreign.ID) {
				local.R.OrderHandler = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.OrderHandlerDeliveries = append(foreign.R.OrderHandlerDeliveries, local)
				break
			}
		}
	}

	return nil
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deliveryL) LoadOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDelivery interface{}, mods queries.Applicator) error {
	var slice []*Delivery
	var object *Delivery

	if singular {
		var ok bool
		object, ok = maybeDelivery.(*Delivery)
		if !ok {
			object = new(Delivery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDelivery))
			}
		}
	} else {
		s, ok := maybeDelivery.(*[]*Delivery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDelivery))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &deliveryR{}
		}
		if !queries.IsNil(object.OrderID) {
			args[object.OrderID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryR{}
			}

			if !queries.IsNil(obj.OrderID) {
				args[obj.OrderID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.Deliveries = append(foreign.R.Deliveries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.ID) {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.Deliveries = append(foreign.R.Deliveries, local)
				break
			}
		}
	}

	return nil
}

// LoadTableNumberTable allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deliveryL) LoadTableNumberTable(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDelivery interface{}, mods queries.Applicator) error {
	var slice []*Delivery
	var object *Delivery

	if singular {
		var ok bool
		object, ok = maybeDelivery.(*Delivery)
		if !ok {
			object = new(Delivery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDelivery))
			}
		}
	} else {
		s, ok := maybeDelivery.(*[]*Delivery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDelivery))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &deliveryR{}
		}
		if !queries.IsNil(object.TableNumber) {
			args[object.TableNumber] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryR{}
			}

			if !queries.IsNil(obj.TableNumber) {
				args[obj.TableNumber] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tables`),
		qm.WhereIn(`tables.number in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Table")
	}

	var resultSlice []*Table
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Table")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tables")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tables")
	}

	if len(tableAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TableNumberTable = foreign
		if foreign.R == nil {
			foreign.R = &tableR{}
		}
		foreign.R.TableNumberDeliveries = append(foreign.R.TableNumberDeliveries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TableNumber, foreign.Number) {
				local.R.TableNumberTable = foreign
				if foreign.R == nil {
					foreign.R = &tableR{}
				}
				foreign.R.TableNumberDeliveries = append(foreign.R.TableNumberDeliveries, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deliveryL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDelivery interface{}, mods queries.Applicator) error {
	var slice []*Delivery
	var object *Delivery

	if singular {
		var ok bool
		object, ok = maybeDelivery.(*Delivery)
		if !ok {
			object = new(Delivery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDelivery))
			}
		}
	} else {
		s, ok := maybeDelivery.(*[]*Delivery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDelivery))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &deliveryR{}
		}
		if !queries.IsNil(object.UserID) {
			args[object.UserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryR{}
			}

			if !queries.IsNil(obj.UserID) {
				args[obj.UserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`accounts`),
		qm.WhereIn(`accounts.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for accounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for accounts")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.UserDeliveries = append(foreign.R.UserDeliveries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.UserDeliveries = append(foreign.R.UserDeliveries, local)
				break
			}
		}
	}

	return nil
}

// LoadDeliveryDishes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (deliveryL) LoadDeliveryDishes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDelivery interface{}, mods queries.Applicator) error {
	var slice []*Delivery
	var object *Delivery

	if singular {
		var ok bool
		object, ok = maybeDelivery.(*Delivery)
		if !ok {
			object = new(Delivery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDelivery))
			}
		}
	} else {
		s, ok := maybeDelivery.(*[]*Delivery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDelivery))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &deliveryR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`delivery_dishes`),
		qm.WhereIn(`delivery_dishes.delivery_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load delivery_dishes")
	}

	var resultSlice []*DeliveryDish
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice delivery_dishes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on delivery_dishes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for delivery_dishes")
	}

	if len(deliveryDishAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DeliveryDishes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deliveryDishR{}
			}
			foreign.R.Delivery = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DeliveryID {
				local.R.DeliveryDishes = append(local.R.DeliveryDishes, foreign)
				if foreign.R == nil {
					foreign.R = &deliveryDishR{}
				}
				foreign.R.Delivery = local
				break
			}
		}
	}

	return nil
}

// SetBranch of the delivery to the related item.
// Sets o.R.Branch to related.
// Adds o to related.R.Deliveries.
func (o *Delivery) SetBranch(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Branch) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"deliveries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"branch_id"}),
		strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BranchID, related.ID)
	if o.R == nil {
		o.R = &deliveryR{
			Branch: related,
		}
	} else {
		o.R.Branch = related
	}

	if related.R == nil {
		related.R = &branchR{
			Deliveries: DeliverySlice{o},
		}
	} else {
		related.R.Deliveries = append(related.R.Deliveries, o)
	}

	return nil
}

// RemoveBranch relationship.
// Sets o.R.Branch to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Delivery) RemoveBranch(ctx context.Context, exec boil.ContextExecutor, related *Branch) error {
	var err error

	queries.SetScanner(&o.BranchID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("branch_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Branch = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Deliveries {
		if queries.Equal(o.BranchID, ri.BranchID) {
			continue
		}

		ln := len(related.R.Deliveries)
		if ln > 1 && i < ln-1 {
			related.R.Deliveries[i] = related.R.Deliveries[ln-1]
		}
		related.R.Deliveries = related.R.Deliveries[:ln-1]
		break
	}
	return nil
}

// SetGuest of the delivery to the related item.
// Sets o.R.Guest to related.
// Adds o to related.R.Deliveries.
func (o *Delivery) SetGuest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Guest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"deliveries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"guest_id"}),
		strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.GuestID, related.ID)
	if o.R == nil {
		o.R = &deliveryR{
			Guest: related,
		}
	} else {
		o.R.Guest = related
	}

	if related.R == nil {
		related.R = &guestR{
			Deliveries: DeliverySlice{o},
		}
	} else {
		related.R.Deliveries = append(related.R.Deliveries, o)
	}

	return nil
}

// RemoveGuest relationship.
// Sets o.R.Guest to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Delivery) RemoveGuest(ctx context.Context, exec boil.ContextExecutor, related *Guest) error {
	var err error

	queries.SetScanner(&o.GuestID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("guest_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Guest = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Deliveries {
		if queries.Equal(o.GuestID, ri.GuestID) {
			continue
		}

		ln := len(related.R.Deliveries)
		if ln > 1 && i < ln-1 {
			related.R.Deliveries[i] = related.R.Deliveries[ln-1]
		}
		related.R.Deliveries = related.R.Deliveries[:ln-1]
		break
	}
	return nil
}

// SetOrderHandler of the delivery to the related item.
// Sets o.R.OrderHandler to related.
// Adds o to related.R.OrderHandlerDeliveries.
func (o *Delivery) SetOrderHandler(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"deliveries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_handler_id"}),
		strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderHandlerID, related.ID)
	if o.R == nil {
		o.R = &deliveryR{
			OrderHandler: related,
		}
	} else {
		o.R.OrderHandler = related
	}

	if related.R == nil {
		related.R = &accountR{
			OrderHandlerDeliveries: DeliverySlice{o},
		}
	} else {
		related.R.OrderHandlerDeliveries = append(related.R.OrderHandlerDeliveries, o)
	}

	return nil
}

// RemoveOrderHandler relationship.
// Sets o.R.OrderHandler to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Delivery) RemoveOrderHandler(ctx context.Context, exec boil.ContextExecutor, related *Account) error {
	var err error

	queries.SetScanner(&o.OrderHandlerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("order_handler_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OrderHandler = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrderHandlerDeliveries {
		if queries.Equal(o.OrderHandlerID, ri.OrderHandlerID) {
			continue
		}

		ln := len(related.R.OrderHandlerDeliveries)
		if ln > 1 && i < ln-1 {
			related.R.OrderHandlerDeliveries[i] = related.R.OrderHandlerDeliveries[ln-1]
		}
		related.R.OrderHandlerDeliveries = related.R.OrderHandlerDeliveries[:ln-1]
		break
	}
	return nil
}

// SetOrder of the delivery to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.Deliveries.
func (o *Delivery) SetOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"deliveries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.ID)
	if o.R == nil {
		o.R = &deliveryR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &orderR{
			Deliveries: DeliverySlice{o},
		}
	} else {
		related.R.Deliveries = append(related.R.Deliveries, o)
	}

	return nil
}

// RemoveOrder relationship.
// Sets o.R.Order to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Delivery) RemoveOrder(ctx context.Context, exec boil.ContextExecutor, related *Order) error {
	var err error

	queries.SetScanner(&o.OrderID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("order_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Order = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Deliveries {
		if queries.Equal(o.OrderID, ri.OrderID) {
			continue
		}

		ln := len(related.R.Deliveries)
		if ln > 1 && i < ln-1 {
			related.R.Deliveries[i] = related.R.Deliveries[ln-1]
		}
		related.R.Deliveries = related.R.Deliveries[:ln-1]
		break
	}
	return nil
}

// SetTableNumberTable of the delivery to the related item.
// Sets o.R.TableNumberTable to related.
// Adds o to related.R.TableNumberDeliveries.
func (o *Delivery) SetTableNumberTable(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Table) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"deliveries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"table_number"}),
		strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
	)
	values := []interface{}{related.Number, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TableNumber, related.Number)
	if o.R == nil {
		o.R = &deliveryR{
			TableNumberTable: related,
		}
	} else {
		o.R.TableNumberTable = related
	}

	if related.R == nil {
		related.R = &tableR{
			TableNumberDeliveries: DeliverySlice{o},
		}
	} else {
		related.R.TableNumberDeliveries = append(related.R.TableNumberDeliveries, o)
	}

	return nil
}

// RemoveTableNumberTable relationship.
// Sets o.R.TableNumberTable to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Delivery) RemoveTableNumberTable(ctx context.Context, exec boil.ContextExecutor, related *Table) error {
	var err error

	queries.SetScanner(&o.TableNumber, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("table_number")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TableNumberTable = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TableNumberDeliveries {
		if queries.Equal(o.TableNumber, ri.TableNumber) {
			continue
		}

		ln := len(related.R.TableNumberDeliveries)
		if ln > 1 && i < ln-1 {
			related.R.TableNumberDeliveries[i] = related.R.TableNumberDeliveries[ln-1]
		}
		related.R.TableNumberDeliveries = related.R.TableNumberDeliveries[:ln-1]
		break
	}
	return nil
}

// SetUser of the delivery to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserDeliveries.
func (o *Delivery) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"deliveries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &deliveryR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &accountR{
			UserDeliveries: DeliverySlice{o},
		}
	} else {
		related.R.UserDeliveries = append(related.R.UserDeliveries, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Delivery) RemoveUser(ctx context.Context, exec boil.ContextExecutor, related *Account) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UserDeliveries {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.UserDeliveries)
		if ln > 1 && i < ln-1 {
			related.R.UserDeliveries[i] = related.R.UserDeliveries[ln-1]
		}
		related.R.UserDeliveries = related.R.UserDeliveries[:ln-1]
		break
	}
	return nil
}

// AddDeliveryDishes adds the given related objects to the existing relationships
// of the delivery, optionally inserting them as new records.
// Appends related to o.R.DeliveryDishes.
// Sets related.R.Delivery appropriately.
func (o *Delivery) AddDeliveryDishes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeliveryDish) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliveryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"delivery_dishes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"delivery_id"}),
				strmangle.WhereClause("\"", "\"", 2, deliveryDishPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.DeliveryID, rel.DishID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliveryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &deliveryR{
			DeliveryDishes: related,
		}
	} else {
		o.R.DeliveryDishes = append(o.R.DeliveryDishes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deliveryDishR{
				Delivery: o,
			}
		} else {
			rel.R.Delivery = o
		}
	}
	return nil
}

// Deliveries retrieves all the records using an executor.
func Deliveries(mods ...qm.QueryMod) deliveryQuery {
	mods = append(mods, qm.From("\"deliveries\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"deliveries\".*"})
	}

	return deliveryQuery{q}
}

// FindDelivery retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDelivery(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Delivery, error) {
	deliveryObj := &Delivery{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"deliveries\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, deliveryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from deliveries")
	}

	if err = deliveryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return deliveryObj, err
	}

	return deliveryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Delivery) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no deliveries provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deliveryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deliveryInsertCacheMut.RLock()
	cache, cached := deliveryInsertCache[key]
	deliveryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deliveryAllColumns,
			deliveryColumnsWithDefault,
			deliveryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deliveryType, deliveryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deliveryType, deliveryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"deliveries\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"deliveries\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into deliveries")
	}

	if !cached {
		deliveryInsertCacheMut.Lock()
		deliveryInsertCache[key] = cache
		deliveryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Delivery.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Delivery) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	deliveryUpdateCacheMut.RLock()
	cache, cached := deliveryUpdateCache[key]
	deliveryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deliveryAllColumns,
			deliveryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update deliveries, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"deliveries\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, deliveryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deliveryType, deliveryMapping, append(wl, deliveryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update deliveries row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for deliveries")
	}

	if !cached {
		deliveryUpdateCacheMut.Lock()
		deliveryUpdateCache[key] = cache
		deliveryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q deliveryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for deliveries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for deliveries")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeliverySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"deliveries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, deliveryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in delivery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all delivery")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Delivery) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no deliveries provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deliveryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deliveryUpsertCacheMut.RLock()
	cache, cached := deliveryUpsertCache[key]
	deliveryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			deliveryAllColumns,
			deliveryColumnsWithDefault,
			deliveryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deliveryAllColumns,
			deliveryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert deliveries, could not build update column list")
		}

		ret := strmangle.SetComplement(deliveryAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(deliveryPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert deliveries, could not build conflict column list")
			}

			conflict = make([]string, len(deliveryPrimaryKeyColumns))
			copy(conflict, deliveryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"deliveries\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(deliveryType, deliveryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deliveryType, deliveryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert deliveries")
	}

	if !cached {
		deliveryUpsertCacheMut.Lock()
		deliveryUpsertCache[key] = cache
		deliveryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Delivery record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Delivery) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Delivery provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deliveryPrimaryKeyMapping)
	sql := "DELETE FROM \"deliveries\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from deliveries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for deliveries")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deliveryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no deliveryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from deliveries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for deliveries")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeliverySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(deliveryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"deliveries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliveryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from delivery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for deliveries")
	}

	if len(deliveryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Delivery) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDelivery(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeliverySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeliverySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"deliveries\".* FROM \"deliveries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliveryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in DeliverySlice")
	}

	*o = slice

	return nil
}

// DeliveryExists checks if the Delivery row exists.
func DeliveryExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"deliveries\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if deliveries exists")
	}

	return exists, nil
}

// Exists checks if the Delivery row exists.
func (o *Delivery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeliveryExists(ctx, exec, o.ID)
}
