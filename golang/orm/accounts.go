// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Account is an object representing the database table.
type Account struct {
	ID        int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	BranchID  null.Int64  `boil:"branch_id" json:"branch_id,omitempty" toml:"branch_id" yaml:"branch_id,omitempty"`
	Name      string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Email     string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	Password  string      `boil:"password" json:"password" toml:"password" yaml:"password"`
	Avatar    null.String `boil:"avatar" json:"avatar,omitempty" toml:"avatar" yaml:"avatar,omitempty"`
	Title     null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Role      string      `boil:"role" json:"role" toml:"role" yaml:"role"`
	OwnerID   null.Int64  `boil:"owner_id" json:"owner_id,omitempty" toml:"owner_id" yaml:"owner_id,omitempty"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *accountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L accountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AccountColumns = struct {
	ID        string
	BranchID  string
	Name      string
	Email     string
	Password  string
	Avatar    string
	Title     string
	Role      string
	OwnerID   string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	BranchID:  "branch_id",
	Name:      "name",
	Email:     "email",
	Password:  "password",
	Avatar:    "avatar",
	Title:     "title",
	Role:      "role",
	OwnerID:   "owner_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var AccountTableColumns = struct {
	ID        string
	BranchID  string
	Name      string
	Email     string
	Password  string
	Avatar    string
	Title     string
	Role      string
	OwnerID   string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "accounts.id",
	BranchID:  "accounts.branch_id",
	Name:      "accounts.name",
	Email:     "accounts.email",
	Password:  "accounts.password",
	Avatar:    "accounts.avatar",
	Title:     "accounts.title",
	Role:      "accounts.role",
	OwnerID:   "accounts.owner_id",
	CreatedAt: "accounts.created_at",
	UpdatedAt: "accounts.updated_at",
	DeletedAt: "accounts.deleted_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AccountWhere = struct {
	ID        whereHelperint64
	BranchID  whereHelpernull_Int64
	Name      whereHelperstring
	Email     whereHelperstring
	Password  whereHelperstring
	Avatar    whereHelpernull_String
	Title     whereHelpernull_String
	Role      whereHelperstring
	OwnerID   whereHelpernull_Int64
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperint64{field: "\"accounts\".\"id\""},
	BranchID:  whereHelpernull_Int64{field: "\"accounts\".\"branch_id\""},
	Name:      whereHelperstring{field: "\"accounts\".\"name\""},
	Email:     whereHelperstring{field: "\"accounts\".\"email\""},
	Password:  whereHelperstring{field: "\"accounts\".\"password\""},
	Avatar:    whereHelpernull_String{field: "\"accounts\".\"avatar\""},
	Title:     whereHelpernull_String{field: "\"accounts\".\"title\""},
	Role:      whereHelperstring{field: "\"accounts\".\"role\""},
	OwnerID:   whereHelpernull_Int64{field: "\"accounts\".\"owner_id\""},
	CreatedAt: whereHelpernull_Time{field: "\"accounts\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"accounts\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"accounts\".\"deleted_at\""},
}

// AccountRels is where relationship names are stored.
var AccountRels = struct {
	Owner                  string
	Branch                 string
	OwnerAccounts          string
	OrderHandlerDeliveries string
	UserDeliveries         string
	OrderHandlerOrders     string
	UserOrders             string
}{
	Owner:                  "Owner",
	Branch:                 "Branch",
	OwnerAccounts:          "OwnerAccounts",
	OrderHandlerDeliveries: "OrderHandlerDeliveries",
	UserDeliveries:         "UserDeliveries",
	OrderHandlerOrders:     "OrderHandlerOrders",
	UserOrders:             "UserOrders",
}

// accountR is where relationships are stored.
type accountR struct {
	Owner                  *Account      `boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
	Branch                 *Branch       `boil:"Branch" json:"Branch" toml:"Branch" yaml:"Branch"`
	OwnerAccounts          AccountSlice  `boil:"OwnerAccounts" json:"OwnerAccounts" toml:"OwnerAccounts" yaml:"OwnerAccounts"`
	OrderHandlerDeliveries DeliverySlice `boil:"OrderHandlerDeliveries" json:"OrderHandlerDeliveries" toml:"OrderHandlerDeliveries" yaml:"OrderHandlerDeliveries"`
	UserDeliveries         DeliverySlice `boil:"UserDeliveries" json:"UserDeliveries" toml:"UserDeliveries" yaml:"UserDeliveries"`
	OrderHandlerOrders     OrderSlice    `boil:"OrderHandlerOrders" json:"OrderHandlerOrders" toml:"OrderHandlerOrders" yaml:"OrderHandlerOrders"`
	UserOrders             OrderSlice    `boil:"UserOrders" json:"UserOrders" toml:"UserOrders" yaml:"UserOrders"`
}

// NewStruct creates a new relationship struct
func (*accountR) NewStruct() *accountR {
	return &accountR{}
}

func (o *Account) GetOwner() *Account {
	if o == nil {
		return nil
	}

	return o.R.GetOwner()
}

func (r *accountR) GetOwner() *Account {
	if r == nil {
		return nil
	}

	return r.Owner
}

func (o *Account) GetBranch() *Branch {
	if o == nil {
		return nil
	}

	return o.R.GetBranch()
}

func (r *accountR) GetBranch() *Branch {
	if r == nil {
		return nil
	}

	return r.Branch
}

func (o *Account) GetOwnerAccounts() AccountSlice {
	if o == nil {
		return nil
	}

	return o.R.GetOwnerAccounts()
}

func (r *accountR) GetOwnerAccounts() AccountSlice {
	if r == nil {
		return nil
	}

	return r.OwnerAccounts
}

func (o *Account) GetOrderHandlerDeliveries() DeliverySlice {
	if o == nil {
		return nil
	}

	return o.R.GetOrderHandlerDeliveries()
}

func (r *accountR) GetOrderHandlerDeliveries() DeliverySlice {
	if r == nil {
		return nil
	}

	return r.OrderHandlerDeliveries
}

func (o *Account) GetUserDeliveries() DeliverySlice {
	if o == nil {
		return nil
	}

	return o.R.GetUserDeliveries()
}

func (r *accountR) GetUserDeliveries() DeliverySlice {
	if r == nil {
		return nil
	}

	return r.UserDeliveries
}

func (o *Account) GetOrderHandlerOrders() OrderSlice {
	if o == nil {
		return nil
	}

	return o.R.GetOrderHandlerOrders()
}

func (r *accountR) GetOrderHandlerOrders() OrderSlice {
	if r == nil {
		return nil
	}

	return r.OrderHandlerOrders
}

func (o *Account) GetUserOrders() OrderSlice {
	if o == nil {
		return nil
	}

	return o.R.GetUserOrders()
}

func (r *accountR) GetUserOrders() OrderSlice {
	if r == nil {
		return nil
	}

	return r.UserOrders
}

// accountL is where Load methods for each relationship are stored.
type accountL struct{}

var (
	accountAllColumns            = []string{"id", "branch_id", "name", "email", "password", "avatar", "title", "role", "owner_id", "created_at", "updated_at", "deleted_at"}
	accountColumnsWithoutDefault = []string{"name", "email", "password", "role"}
	accountColumnsWithDefault    = []string{"id", "branch_id", "avatar", "title", "owner_id", "created_at", "updated_at", "deleted_at"}
	accountPrimaryKeyColumns     = []string{"id"}
	accountGeneratedColumns      = []string{}
)

type (
	// AccountSlice is an alias for a slice of pointers to Account.
	// This should almost always be used instead of []Account.
	AccountSlice []*Account
	// AccountHook is the signature for custom Account hook methods
	AccountHook func(context.Context, boil.ContextExecutor, *Account) error

	accountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	accountType                 = reflect.TypeOf(&Account{})
	accountMapping              = queries.MakeStructMapping(accountType)
	accountPrimaryKeyMapping, _ = queries.BindMapping(accountType, accountMapping, accountPrimaryKeyColumns)
	accountInsertCacheMut       sync.RWMutex
	accountInsertCache          = make(map[string]insertCache)
	accountUpdateCacheMut       sync.RWMutex
	accountUpdateCache          = make(map[string]updateCache)
	accountUpsertCacheMut       sync.RWMutex
	accountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var accountAfterSelectMu sync.Mutex
var accountAfterSelectHooks []AccountHook

var accountBeforeInsertMu sync.Mutex
var accountBeforeInsertHooks []AccountHook
var accountAfterInsertMu sync.Mutex
var accountAfterInsertHooks []AccountHook

var accountBeforeUpdateMu sync.Mutex
var accountBeforeUpdateHooks []AccountHook
var accountAfterUpdateMu sync.Mutex
var accountAfterUpdateHooks []AccountHook

var accountBeforeDeleteMu sync.Mutex
var accountBeforeDeleteHooks []AccountHook
var accountAfterDeleteMu sync.Mutex
var accountAfterDeleteHooks []AccountHook

var accountBeforeUpsertMu sync.Mutex
var accountBeforeUpsertHooks []AccountHook
var accountAfterUpsertMu sync.Mutex
var accountAfterUpsertHooks []AccountHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Account) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Account) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Account) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Account) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Account) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Account) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Account) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Account) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Account) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAccountHook registers your hook function for all future operations.
func AddAccountHook(hookPoint boil.HookPoint, accountHook AccountHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		accountAfterSelectMu.Lock()
		accountAfterSelectHooks = append(accountAfterSelectHooks, accountHook)
		accountAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		accountBeforeInsertMu.Lock()
		accountBeforeInsertHooks = append(accountBeforeInsertHooks, accountHook)
		accountBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		accountAfterInsertMu.Lock()
		accountAfterInsertHooks = append(accountAfterInsertHooks, accountHook)
		accountAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		accountBeforeUpdateMu.Lock()
		accountBeforeUpdateHooks = append(accountBeforeUpdateHooks, accountHook)
		accountBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		accountAfterUpdateMu.Lock()
		accountAfterUpdateHooks = append(accountAfterUpdateHooks, accountHook)
		accountAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		accountBeforeDeleteMu.Lock()
		accountBeforeDeleteHooks = append(accountBeforeDeleteHooks, accountHook)
		accountBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		accountAfterDeleteMu.Lock()
		accountAfterDeleteHooks = append(accountAfterDeleteHooks, accountHook)
		accountAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		accountBeforeUpsertMu.Lock()
		accountBeforeUpsertHooks = append(accountBeforeUpsertHooks, accountHook)
		accountBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		accountAfterUpsertMu.Lock()
		accountAfterUpsertHooks = append(accountAfterUpsertHooks, accountHook)
		accountAfterUpsertMu.Unlock()
	}
}

// One returns a single account record from the query.
func (q accountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Account, error) {
	o := &Account{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for accounts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Account records from the query.
func (q accountQuery) All(ctx context.Context, exec boil.ContextExecutor) (AccountSlice, error) {
	var o []*Account

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Account slice")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Account records in the query.
func (q accountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count accounts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q accountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if accounts exists")
	}

	return count > 0, nil
}

// Owner pointed to by the foreign key.
func (o *Account) Owner(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// Branch pointed to by the foreign key.
func (o *Account) Branch(mods ...qm.QueryMod) branchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BranchID),
	}

	queryMods = append(queryMods, mods...)

	return Branches(queryMods...)
}

// OwnerAccounts retrieves all the account's Accounts with an executor via owner_id column.
func (o *Account) OwnerAccounts(mods ...qm.QueryMod) accountQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"accounts\".\"owner_id\"=?", o.ID),
	)

	return Accounts(queryMods...)
}

// OrderHandlerDeliveries retrieves all the delivery's Deliveries with an executor via order_handler_id column.
func (o *Account) OrderHandlerDeliveries(mods ...qm.QueryMod) deliveryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"deliveries\".\"order_handler_id\"=?", o.ID),
	)

	return Deliveries(queryMods...)
}

// UserDeliveries retrieves all the delivery's Deliveries with an executor via user_id column.
func (o *Account) UserDeliveries(mods ...qm.QueryMod) deliveryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"deliveries\".\"user_id\"=?", o.ID),
	)

	return Deliveries(queryMods...)
}

// OrderHandlerOrders retrieves all the order's Orders with an executor via order_handler_id column.
func (o *Account) OrderHandlerOrders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"order_handler_id\"=?", o.ID),
	)

	return Orders(queryMods...)
}

// UserOrders retrieves all the order's Orders with an executor via user_id column.
func (o *Account) UserOrders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"user_id\"=?", o.ID),
	)

	return Orders(queryMods...)
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (accountL) LoadOwner(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAccount interface{}, mods queries.Applicator) error {
	var slice []*Account
	var object *Account

	if singular {
		var ok bool
		object, ok = maybeAccount.(*Account)
		if !ok {
			object = new(Account)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAccount))
			}
		}
	} else {
		s, ok := maybeAccount.(*[]*Account)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAccount))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &accountR{}
		}
		if !queries.IsNil(object.OwnerID) {
			args[object.OwnerID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountR{}
			}

			if !queries.IsNil(obj.OwnerID) {
				args[obj.OwnerID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`accounts`),
		qm.WhereIn(`accounts.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for accounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for accounts")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.OwnerAccounts = append(foreign.R.OwnerAccounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OwnerID, foreign.ID) {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.OwnerAccounts = append(foreign.R.OwnerAccounts, local)
				break
			}
		}
	}

	return nil
}

// LoadBranch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (accountL) LoadBranch(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAccount interface{}, mods queries.Applicator) error {
	var slice []*Account
	var object *Account

	if singular {
		var ok bool
		object, ok = maybeAccount.(*Account)
		if !ok {
			object = new(Account)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAccount))
			}
		}
	} else {
		s, ok := maybeAccount.(*[]*Account)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAccount))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &accountR{}
		}
		if !queries.IsNil(object.BranchID) {
			args[object.BranchID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountR{}
			}

			if !queries.IsNil(obj.BranchID) {
				args[obj.BranchID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`branches`),
		qm.WhereIn(`branches.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Branch")
	}

	var resultSlice []*Branch
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Branch")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for branches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for branches")
	}

	if len(branchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Branch = foreign
		if foreign.R == nil {
			foreign.R = &branchR{}
		}
		foreign.R.Accounts = append(foreign.R.Accounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BranchID, foreign.ID) {
				local.R.Branch = foreign
				if foreign.R == nil {
					foreign.R = &branchR{}
				}
				foreign.R.Accounts = append(foreign.R.Accounts, local)
				break
			}
		}
	}

	return nil
}

// LoadOwnerAccounts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (accountL) LoadOwnerAccounts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAccount interface{}, mods queries.Applicator) error {
	var slice []*Account
	var object *Account

	if singular {
		var ok bool
		object, ok = maybeAccount.(*Account)
		if !ok {
			object = new(Account)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAccount))
			}
		}
	} else {
		s, ok := maybeAccount.(*[]*Account)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAccount))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &accountR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`accounts`),
		qm.WhereIn(`accounts.owner_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load accounts")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice accounts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on accounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for accounts")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OwnerAccounts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &accountR{}
			}
			foreign.R.Owner = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OwnerID) {
				local.R.OwnerAccounts = append(local.R.OwnerAccounts, foreign)
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.Owner = local
				break
			}
		}
	}

	return nil
}

// LoadOrderHandlerDeliveries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (accountL) LoadOrderHandlerDeliveries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAccount interface{}, mods queries.Applicator) error {
	var slice []*Account
	var object *Account

	if singular {
		var ok bool
		object, ok = maybeAccount.(*Account)
		if !ok {
			object = new(Account)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAccount))
			}
		}
	} else {
		s, ok := maybeAccount.(*[]*Account)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAccount))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &accountR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`deliveries`),
		qm.WhereIn(`deliveries.order_handler_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load deliveries")
	}

	var resultSlice []*Delivery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice deliveries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on deliveries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for deliveries")
	}

	if len(deliveryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderHandlerDeliveries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deliveryR{}
			}
			foreign.R.OrderHandler = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OrderHandlerID) {
				local.R.OrderHandlerDeliveries = append(local.R.OrderHandlerDeliveries, foreign)
				if foreign.R == nil {
					foreign.R = &deliveryR{}
				}
				foreign.R.OrderHandler = local
				break
			}
		}
	}

	return nil
}

// LoadUserDeliveries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (accountL) LoadUserDeliveries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAccount interface{}, mods queries.Applicator) error {
	var slice []*Account
	var object *Account

	if singular {
		var ok bool
		object, ok = maybeAccount.(*Account)
		if !ok {
			object = new(Account)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAccount))
			}
		}
	} else {
		s, ok := maybeAccount.(*[]*Account)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAccount))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &accountR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`deliveries`),
		qm.WhereIn(`deliveries.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load deliveries")
	}

	var resultSlice []*Delivery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice deliveries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on deliveries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for deliveries")
	}

	if len(deliveryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserDeliveries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deliveryR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.UserID) {
				local.R.UserDeliveries = append(local.R.UserDeliveries, foreign)
				if foreign.R == nil {
					foreign.R = &deliveryR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadOrderHandlerOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (accountL) LoadOrderHandlerOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAccount interface{}, mods queries.Applicator) error {
	var slice []*Account
	var object *Account

	if singular {
		var ok bool
		object, ok = maybeAccount.(*Account)
		if !ok {
			object = new(Account)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAccount))
			}
		}
	} else {
		s, ok := maybeAccount.(*[]*Account)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAccount))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &accountR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.order_handler_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderHandlerOrders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.OrderHandler = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OrderHandlerID) {
				local.R.OrderHandlerOrders = append(local.R.OrderHandlerOrders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.OrderHandler = local
				break
			}
		}
	}

	return nil
}

// LoadUserOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (accountL) LoadUserOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAccount interface{}, mods queries.Applicator) error {
	var slice []*Account
	var object *Account

	if singular {
		var ok bool
		object, ok = maybeAccount.(*Account)
		if !ok {
			object = new(Account)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAccount))
			}
		}
	} else {
		s, ok := maybeAccount.(*[]*Account)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAccount))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &accountR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserOrders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.UserID) {
				local.R.UserOrders = append(local.R.UserOrders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// SetOwner of the account to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerAccounts.
func (o *Account) SetOwner(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"accounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, accountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OwnerID, related.ID)
	if o.R == nil {
		o.R = &accountR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &accountR{
			OwnerAccounts: AccountSlice{o},
		}
	} else {
		related.R.OwnerAccounts = append(related.R.OwnerAccounts, o)
	}

	return nil
}

// RemoveOwner relationship.
// Sets o.R.Owner to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Account) RemoveOwner(ctx context.Context, exec boil.ContextExecutor, related *Account) error {
	var err error

	queries.SetScanner(&o.OwnerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("owner_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Owner = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OwnerAccounts {
		if queries.Equal(o.OwnerID, ri.OwnerID) {
			continue
		}

		ln := len(related.R.OwnerAccounts)
		if ln > 1 && i < ln-1 {
			related.R.OwnerAccounts[i] = related.R.OwnerAccounts[ln-1]
		}
		related.R.OwnerAccounts = related.R.OwnerAccounts[:ln-1]
		break
	}
	return nil
}

// SetBranch of the account to the related item.
// Sets o.R.Branch to related.
// Adds o to related.R.Accounts.
func (o *Account) SetBranch(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Branch) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"accounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"branch_id"}),
		strmangle.WhereClause("\"", "\"", 2, accountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BranchID, related.ID)
	if o.R == nil {
		o.R = &accountR{
			Branch: related,
		}
	} else {
		o.R.Branch = related
	}

	if related.R == nil {
		related.R = &branchR{
			Accounts: AccountSlice{o},
		}
	} else {
		related.R.Accounts = append(related.R.Accounts, o)
	}

	return nil
}

// RemoveBranch relationship.
// Sets o.R.Branch to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Account) RemoveBranch(ctx context.Context, exec boil.ContextExecutor, related *Branch) error {
	var err error

	queries.SetScanner(&o.BranchID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("branch_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Branch = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Accounts {
		if queries.Equal(o.BranchID, ri.BranchID) {
			continue
		}

		ln := len(related.R.Accounts)
		if ln > 1 && i < ln-1 {
			related.R.Accounts[i] = related.R.Accounts[ln-1]
		}
		related.R.Accounts = related.R.Accounts[:ln-1]
		break
	}
	return nil
}

// AddOwnerAccounts adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.OwnerAccounts.
// Sets related.R.Owner appropriately.
func (o *Account) AddOwnerAccounts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Account) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OwnerID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"accounts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
				strmangle.WhereClause("\"", "\"", 2, accountPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OwnerID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &accountR{
			OwnerAccounts: related,
		}
	} else {
		o.R.OwnerAccounts = append(o.R.OwnerAccounts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &accountR{
				Owner: o,
			}
		} else {
			rel.R.Owner = o
		}
	}
	return nil
}

// SetOwnerAccounts removes all previously related items of the
// account replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Owner's OwnerAccounts accordingly.
// Replaces o.R.OwnerAccounts with related.
// Sets related.R.Owner's OwnerAccounts accordingly.
func (o *Account) SetOwnerAccounts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Account) error {
	query := "update \"accounts\" set \"owner_id\" = null where \"owner_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OwnerAccounts {
			queries.SetScanner(&rel.OwnerID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Owner = nil
		}
		o.R.OwnerAccounts = nil
	}

	return o.AddOwnerAccounts(ctx, exec, insert, related...)
}

// RemoveOwnerAccounts relationships from objects passed in.
// Removes related items from R.OwnerAccounts (uses pointer comparison, removal does not keep order)
// Sets related.R.Owner.
func (o *Account) RemoveOwnerAccounts(ctx context.Context, exec boil.ContextExecutor, related ...*Account) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OwnerID, nil)
		if rel.R != nil {
			rel.R.Owner = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("owner_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OwnerAccounts {
			if rel != ri {
				continue
			}

			ln := len(o.R.OwnerAccounts)
			if ln > 1 && i < ln-1 {
				o.R.OwnerAccounts[i] = o.R.OwnerAccounts[ln-1]
			}
			o.R.OwnerAccounts = o.R.OwnerAccounts[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderHandlerDeliveries adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.OrderHandlerDeliveries.
// Sets related.R.OrderHandler appropriately.
func (o *Account) AddOrderHandlerDeliveries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Delivery) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OrderHandlerID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"deliveries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"order_handler_id"}),
				strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OrderHandlerID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &accountR{
			OrderHandlerDeliveries: related,
		}
	} else {
		o.R.OrderHandlerDeliveries = append(o.R.OrderHandlerDeliveries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deliveryR{
				OrderHandler: o,
			}
		} else {
			rel.R.OrderHandler = o
		}
	}
	return nil
}

// SetOrderHandlerDeliveries removes all previously related items of the
// account replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OrderHandler's OrderHandlerDeliveries accordingly.
// Replaces o.R.OrderHandlerDeliveries with related.
// Sets related.R.OrderHandler's OrderHandlerDeliveries accordingly.
func (o *Account) SetOrderHandlerDeliveries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Delivery) error {
	query := "update \"deliveries\" set \"order_handler_id\" = null where \"order_handler_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderHandlerDeliveries {
			queries.SetScanner(&rel.OrderHandlerID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OrderHandler = nil
		}
		o.R.OrderHandlerDeliveries = nil
	}

	return o.AddOrderHandlerDeliveries(ctx, exec, insert, related...)
}

// RemoveOrderHandlerDeliveries relationships from objects passed in.
// Removes related items from R.OrderHandlerDeliveries (uses pointer comparison, removal does not keep order)
// Sets related.R.OrderHandler.
func (o *Account) RemoveOrderHandlerDeliveries(ctx context.Context, exec boil.ContextExecutor, related ...*Delivery) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OrderHandlerID, nil)
		if rel.R != nil {
			rel.R.OrderHandler = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("order_handler_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderHandlerDeliveries {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderHandlerDeliveries)
			if ln > 1 && i < ln-1 {
				o.R.OrderHandlerDeliveries[i] = o.R.OrderHandlerDeliveries[ln-1]
			}
			o.R.OrderHandlerDeliveries = o.R.OrderHandlerDeliveries[:ln-1]
			break
		}
	}

	return nil
}

// AddUserDeliveries adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.UserDeliveries.
// Sets related.R.User appropriately.
func (o *Account) AddUserDeliveries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Delivery) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UserID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"deliveries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UserID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &accountR{
			UserDeliveries: related,
		}
	} else {
		o.R.UserDeliveries = append(o.R.UserDeliveries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deliveryR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// SetUserDeliveries removes all previously related items of the
// account replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.User's UserDeliveries accordingly.
// Replaces o.R.UserDeliveries with related.
// Sets related.R.User's UserDeliveries accordingly.
func (o *Account) SetUserDeliveries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Delivery) error {
	query := "update \"deliveries\" set \"user_id\" = null where \"user_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UserDeliveries {
			queries.SetScanner(&rel.UserID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.User = nil
		}
		o.R.UserDeliveries = nil
	}

	return o.AddUserDeliveries(ctx, exec, insert, related...)
}

// RemoveUserDeliveries relationships from objects passed in.
// Removes related items from R.UserDeliveries (uses pointer comparison, removal does not keep order)
// Sets related.R.User.
func (o *Account) RemoveUserDeliveries(ctx context.Context, exec boil.ContextExecutor, related ...*Delivery) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.UserID, nil)
		if rel.R != nil {
			rel.R.User = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("user_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UserDeliveries {
			if rel != ri {
				continue
			}

			ln := len(o.R.UserDeliveries)
			if ln > 1 && i < ln-1 {
				o.R.UserDeliveries[i] = o.R.UserDeliveries[ln-1]
			}
			o.R.UserDeliveries = o.R.UserDeliveries[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderHandlerOrders adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.OrderHandlerOrders.
// Sets related.R.OrderHandler appropriately.
func (o *Account) AddOrderHandlerOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OrderHandlerID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"order_handler_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OrderHandlerID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &accountR{
			OrderHandlerOrders: related,
		}
	} else {
		o.R.OrderHandlerOrders = append(o.R.OrderHandlerOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				OrderHandler: o,
			}
		} else {
			rel.R.OrderHandler = o
		}
	}
	return nil
}

// SetOrderHandlerOrders removes all previously related items of the
// account replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OrderHandler's OrderHandlerOrders accordingly.
// Replaces o.R.OrderHandlerOrders with related.
// Sets related.R.OrderHandler's OrderHandlerOrders accordingly.
func (o *Account) SetOrderHandlerOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	query := "update \"orders\" set \"order_handler_id\" = null where \"order_handler_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderHandlerOrders {
			queries.SetScanner(&rel.OrderHandlerID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OrderHandler = nil
		}
		o.R.OrderHandlerOrders = nil
	}

	return o.AddOrderHandlerOrders(ctx, exec, insert, related...)
}

// RemoveOrderHandlerOrders relationships from objects passed in.
// Removes related items from R.OrderHandlerOrders (uses pointer comparison, removal does not keep order)
// Sets related.R.OrderHandler.
func (o *Account) RemoveOrderHandlerOrders(ctx context.Context, exec boil.ContextExecutor, related ...*Order) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OrderHandlerID, nil)
		if rel.R != nil {
			rel.R.OrderHandler = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("order_handler_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderHandlerOrders {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderHandlerOrders)
			if ln > 1 && i < ln-1 {
				o.R.OrderHandlerOrders[i] = o.R.OrderHandlerOrders[ln-1]
			}
			o.R.OrderHandlerOrders = o.R.OrderHandlerOrders[:ln-1]
			break
		}
	}

	return nil
}

// AddUserOrders adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.UserOrders.
// Sets related.R.User appropriately.
func (o *Account) AddUserOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UserID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UserID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &accountR{
			UserOrders: related,
		}
	} else {
		o.R.UserOrders = append(o.R.UserOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// SetUserOrders removes all previously related items of the
// account replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.User's UserOrders accordingly.
// Replaces o.R.UserOrders with related.
// Sets related.R.User's UserOrders accordingly.
func (o *Account) SetUserOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	query := "update \"orders\" set \"user_id\" = null where \"user_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UserOrders {
			queries.SetScanner(&rel.UserID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.User = nil
		}
		o.R.UserOrders = nil
	}

	return o.AddUserOrders(ctx, exec, insert, related...)
}

// RemoveUserOrders relationships from objects passed in.
// Removes related items from R.UserOrders (uses pointer comparison, removal does not keep order)
// Sets related.R.User.
func (o *Account) RemoveUserOrders(ctx context.Context, exec boil.ContextExecutor, related ...*Order) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.UserID, nil)
		if rel.R != nil {
			rel.R.User = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("user_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UserOrders {
			if rel != ri {
				continue
			}

			ln := len(o.R.UserOrders)
			if ln > 1 && i < ln-1 {
				o.R.UserOrders[i] = o.R.UserOrders[ln-1]
			}
			o.R.UserOrders = o.R.UserOrders[:ln-1]
			break
		}
	}

	return nil
}

// Accounts retrieves all the records using an executor.
func Accounts(mods ...qm.QueryMod) accountQuery {
	mods = append(mods, qm.From("\"accounts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"accounts\".*"})
	}

	return accountQuery{q}
}

// FindAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAccount(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Account, error) {
	accountObj := &Account{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"accounts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, accountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from accounts")
	}

	if err = accountObj.doAfterSelectHooks(ctx, exec); err != nil {
		return accountObj, err
	}

	return accountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Account) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no accounts provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	accountInsertCacheMut.RLock()
	cache, cached := accountInsertCache[key]
	accountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			accountAllColumns,
			accountColumnsWithDefault,
			accountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(accountType, accountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(accountType, accountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"accounts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"accounts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into accounts")
	}

	if !cached {
		accountInsertCacheMut.Lock()
		accountInsertCache[key] = cache
		accountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Account.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Account) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	accountUpdateCacheMut.RLock()
	cache, cached := accountUpdateCache[key]
	accountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			accountAllColumns,
			accountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update accounts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"accounts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, accountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(accountType, accountMapping, append(wl, accountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update accounts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for accounts")
	}

	if !cached {
		accountUpdateCacheMut.Lock()
		accountUpdateCache[key] = cache
		accountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q accountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for accounts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AccountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"accounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, accountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in account slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all account")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Account) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no accounts provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	accountUpsertCacheMut.RLock()
	cache, cached := accountUpsertCache[key]
	accountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			accountAllColumns,
			accountColumnsWithDefault,
			accountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			accountAllColumns,
			accountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert accounts, could not build update column list")
		}

		ret := strmangle.SetComplement(accountAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(accountPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert accounts, could not build conflict column list")
			}

			conflict = make([]string, len(accountPrimaryKeyColumns))
			copy(conflict, accountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"accounts\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(accountType, accountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(accountType, accountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert accounts")
	}

	if !cached {
		accountUpsertCacheMut.Lock()
		accountUpsertCache[key] = cache
		accountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Account record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Account) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Account provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), accountPrimaryKeyMapping)
	sql := "DELETE FROM \"accounts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for accounts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q accountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no accountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for accounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AccountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(accountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"accounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from account slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for accounts")
	}

	if len(accountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Account) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAccount(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"accounts\".* FROM \"accounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in AccountSlice")
	}

	*o = slice

	return nil
}

// AccountExists checks if the Account row exists.
func AccountExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"accounts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if accounts exists")
	}

	return exists, nil
}

// Exists checks if the Account row exists.
func (o *Account) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AccountExists(ctx, exec, o.ID)
}
