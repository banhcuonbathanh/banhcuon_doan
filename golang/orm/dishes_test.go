// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDishes(t *testing.T) {
	t.Parallel()

	query := Dishes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDishesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dish{}
	if err = randomize.Struct(seed, o, dishDBTypes, true, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Dishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDishesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dish{}
	if err = randomize.Struct(seed, o, dishDBTypes, true, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Dishes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Dishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDishesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dish{}
	if err = randomize.Struct(seed, o, dishDBTypes, true, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DishSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Dishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDishesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dish{}
	if err = randomize.Struct(seed, o, dishDBTypes, true, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DishExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Dish exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DishExists to return true, but got false.")
	}
}

func testDishesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dish{}
	if err = randomize.Struct(seed, o, dishDBTypes, true, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dishFound, err := FindDish(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dishFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDishesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dish{}
	if err = randomize.Struct(seed, o, dishDBTypes, true, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Dishes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDishesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dish{}
	if err = randomize.Struct(seed, o, dishDBTypes, true, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Dishes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDishesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dishOne := &Dish{}
	dishTwo := &Dish{}
	if err = randomize.Struct(seed, dishOne, dishDBTypes, false, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}
	if err = randomize.Struct(seed, dishTwo, dishDBTypes, false, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dishOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dishTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Dishes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDishesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dishOne := &Dish{}
	dishTwo := &Dish{}
	if err = randomize.Struct(seed, dishOne, dishDBTypes, false, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}
	if err = randomize.Struct(seed, dishTwo, dishDBTypes, false, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dishOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dishTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Dishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dishBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Dish) error {
	*o = Dish{}
	return nil
}

func dishAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Dish) error {
	*o = Dish{}
	return nil
}

func dishAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Dish) error {
	*o = Dish{}
	return nil
}

func dishBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Dish) error {
	*o = Dish{}
	return nil
}

func dishAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Dish) error {
	*o = Dish{}
	return nil
}

func dishBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Dish) error {
	*o = Dish{}
	return nil
}

func dishAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Dish) error {
	*o = Dish{}
	return nil
}

func dishBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Dish) error {
	*o = Dish{}
	return nil
}

func dishAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Dish) error {
	*o = Dish{}
	return nil
}

func testDishesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Dish{}
	o := &Dish{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dishDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Dish object: %s", err)
	}

	AddDishHook(boil.BeforeInsertHook, dishBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dishBeforeInsertHooks = []DishHook{}

	AddDishHook(boil.AfterInsertHook, dishAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dishAfterInsertHooks = []DishHook{}

	AddDishHook(boil.AfterSelectHook, dishAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dishAfterSelectHooks = []DishHook{}

	AddDishHook(boil.BeforeUpdateHook, dishBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dishBeforeUpdateHooks = []DishHook{}

	AddDishHook(boil.AfterUpdateHook, dishAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dishAfterUpdateHooks = []DishHook{}

	AddDishHook(boil.BeforeDeleteHook, dishBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dishBeforeDeleteHooks = []DishHook{}

	AddDishHook(boil.AfterDeleteHook, dishAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dishAfterDeleteHooks = []DishHook{}

	AddDishHook(boil.BeforeUpsertHook, dishBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dishBeforeUpsertHooks = []DishHook{}

	AddDishHook(boil.AfterUpsertHook, dishAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dishAfterUpsertHooks = []DishHook{}
}

func testDishesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dish{}
	if err = randomize.Struct(seed, o, dishDBTypes, true, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Dishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDishesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dish{}
	if err = randomize.Struct(seed, o, dishDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(dishPrimaryKeyColumns, dishColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Dishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDishToManyDeliveryDishes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dish
	var b, c DeliveryDish

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dishDBTypes, true, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, deliveryDishDBTypes, false, deliveryDishColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, deliveryDishDBTypes, false, deliveryDishColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DishID = a.ID
	c.DishID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DeliveryDishes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DishID == b.DishID {
			bFound = true
		}
		if v.DishID == c.DishID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DishSlice{&a}
	if err = a.L.LoadDeliveryDishes(ctx, tx, false, (*[]*Dish)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DeliveryDishes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DeliveryDishes = nil
	if err = a.L.LoadDeliveryDishes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DeliveryDishes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDishToManyDishPriceHistories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dish
	var b, c DishPriceHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dishDBTypes, true, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dishPriceHistoryDBTypes, false, dishPriceHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dishPriceHistoryDBTypes, false, dishPriceHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.DishID, a.ID)
	queries.Assign(&c.DishID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DishPriceHistories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.DishID, b.DishID) {
			bFound = true
		}
		if queries.Equal(v.DishID, c.DishID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DishSlice{&a}
	if err = a.L.LoadDishPriceHistories(ctx, tx, false, (*[]*Dish)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DishPriceHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DishPriceHistories = nil
	if err = a.L.LoadDishPriceHistories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DishPriceHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDishToManyOrderDishes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dish
	var b, c OrderDish

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dishDBTypes, true, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderDishDBTypes, false, orderDishColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDishDBTypes, false, orderDishColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DishID = a.ID
	c.DishID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrderDishes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DishID == b.DishID {
			bFound = true
		}
		if v.DishID == c.DishID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DishSlice{&a}
	if err = a.L.LoadOrderDishes(ctx, tx, false, (*[]*Dish)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderDishes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrderDishes = nil
	if err = a.L.LoadOrderDishes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderDishes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDishToManySetDishes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dish
	var b, c SetDish

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dishDBTypes, true, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, setDishDBTypes, false, setDishColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, setDishDBTypes, false, setDishColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DishID = a.ID
	c.DishID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SetDishes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DishID == b.DishID {
			bFound = true
		}
		if v.DishID == c.DishID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DishSlice{&a}
	if err = a.L.LoadSetDishes(ctx, tx, false, (*[]*Dish)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SetDishes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SetDishes = nil
	if err = a.L.LoadSetDishes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SetDishes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDishToManyAddOpDeliveryDishes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dish
	var b, c, d, e DeliveryDish

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dishDBTypes, false, strmangle.SetComplement(dishPrimaryKeyColumns, dishColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DeliveryDish{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, deliveryDishDBTypes, false, strmangle.SetComplement(deliveryDishPrimaryKeyColumns, deliveryDishColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DeliveryDish{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDeliveryDishes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DishID {
			t.Error("foreign key was wrong value", a.ID, first.DishID)
		}
		if a.ID != second.DishID {
			t.Error("foreign key was wrong value", a.ID, second.DishID)
		}

		if first.R.Dish != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Dish != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DeliveryDishes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DeliveryDishes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DeliveryDishes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDishToManyAddOpDishPriceHistories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dish
	var b, c, d, e DishPriceHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dishDBTypes, false, strmangle.SetComplement(dishPrimaryKeyColumns, dishColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DishPriceHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dishPriceHistoryDBTypes, false, strmangle.SetComplement(dishPriceHistoryPrimaryKeyColumns, dishPriceHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DishPriceHistory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDishPriceHistories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.DishID) {
			t.Error("foreign key was wrong value", a.ID, first.DishID)
		}
		if !queries.Equal(a.ID, second.DishID) {
			t.Error("foreign key was wrong value", a.ID, second.DishID)
		}

		if first.R.Dish != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Dish != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DishPriceHistories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DishPriceHistories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DishPriceHistories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDishToManySetOpDishPriceHistories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dish
	var b, c, d, e DishPriceHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dishDBTypes, false, strmangle.SetComplement(dishPrimaryKeyColumns, dishColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DishPriceHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dishPriceHistoryDBTypes, false, strmangle.SetComplement(dishPriceHistoryPrimaryKeyColumns, dishPriceHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDishPriceHistories(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DishPriceHistories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDishPriceHistories(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DishPriceHistories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DishID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DishID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.DishID) {
		t.Error("foreign key was wrong value", a.ID, d.DishID)
	}
	if !queries.Equal(a.ID, e.DishID) {
		t.Error("foreign key was wrong value", a.ID, e.DishID)
	}

	if b.R.Dish != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Dish != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Dish != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Dish != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.DishPriceHistories[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.DishPriceHistories[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDishToManyRemoveOpDishPriceHistories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dish
	var b, c, d, e DishPriceHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dishDBTypes, false, strmangle.SetComplement(dishPrimaryKeyColumns, dishColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DishPriceHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dishPriceHistoryDBTypes, false, strmangle.SetComplement(dishPriceHistoryPrimaryKeyColumns, dishPriceHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDishPriceHistories(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DishPriceHistories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDishPriceHistories(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DishPriceHistories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DishID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DishID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Dish != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Dish != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Dish != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Dish != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.DishPriceHistories) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.DishPriceHistories[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.DishPriceHistories[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDishToManyAddOpOrderDishes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dish
	var b, c, d, e OrderDish

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dishDBTypes, false, strmangle.SetComplement(dishPrimaryKeyColumns, dishColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderDish{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDishDBTypes, false, strmangle.SetComplement(orderDishPrimaryKeyColumns, orderDishColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrderDish{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrderDishes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DishID {
			t.Error("foreign key was wrong value", a.ID, first.DishID)
		}
		if a.ID != second.DishID {
			t.Error("foreign key was wrong value", a.ID, second.DishID)
		}

		if first.R.Dish != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Dish != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrderDishes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrderDishes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrderDishes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDishToManyAddOpSetDishes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dish
	var b, c, d, e SetDish

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dishDBTypes, false, strmangle.SetComplement(dishPrimaryKeyColumns, dishColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SetDish{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, setDishDBTypes, false, strmangle.SetComplement(setDishPrimaryKeyColumns, setDishColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SetDish{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSetDishes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DishID {
			t.Error("foreign key was wrong value", a.ID, first.DishID)
		}
		if a.ID != second.DishID {
			t.Error("foreign key was wrong value", a.ID, second.DishID)
		}

		if first.R.Dish != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Dish != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SetDishes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SetDishes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SetDishes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDishToOneBranchUsingBranch(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Dish
	var foreign Branch

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dishDBTypes, true, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, branchDBTypes, false, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.BranchID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Branch().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddBranchHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Branch) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DishSlice{&local}
	if err = local.L.LoadBranch(ctx, tx, false, (*[]*Dish)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Branch == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Branch = nil
	if err = local.L.LoadBranch(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Branch == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDishToOneSetOpBranchUsingBranch(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dish
	var b, c Branch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dishDBTypes, false, strmangle.SetComplement(dishPrimaryKeyColumns, dishColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Branch{&b, &c} {
		err = a.SetBranch(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Branch != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Dishes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.BranchID, x.ID) {
			t.Error("foreign key was wrong value", a.BranchID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BranchID))
		reflect.Indirect(reflect.ValueOf(&a.BranchID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.BranchID, x.ID) {
			t.Error("foreign key was wrong value", a.BranchID, x.ID)
		}
	}
}

func testDishToOneRemoveOpBranchUsingBranch(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dish
	var b Branch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dishDBTypes, false, strmangle.SetComplement(dishPrimaryKeyColumns, dishColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetBranch(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveBranch(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Branch().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Branch != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.BranchID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Dishes) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDishesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dish{}
	if err = randomize.Struct(seed, o, dishDBTypes, true, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDishesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dish{}
	if err = randomize.Struct(seed, o, dishDBTypes, true, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DishSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDishesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dish{}
	if err = randomize.Struct(seed, o, dishDBTypes, true, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Dishes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dishDBTypes = map[string]string{`ID`: `bigint`, `BranchID`: `bigint`, `Name`: `character varying`, `Price`: `integer`, `Description`: `text`, `Image`: `character varying`, `Status`: `character varying`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `CountOrder`: `integer`, `TotalSold`: `integer`, `DeletedAt`: `timestamp with time zone`}
	_           = bytes.MinRead
)

func testDishesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dishPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dishAllColumns) == len(dishPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Dish{}
	if err = randomize.Struct(seed, o, dishDBTypes, true, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Dishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dishDBTypes, true, dishPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDishesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dishAllColumns) == len(dishPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Dish{}
	if err = randomize.Struct(seed, o, dishDBTypes, true, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Dishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dishDBTypes, true, dishPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dishAllColumns, dishPrimaryKeyColumns) {
		fields = dishAllColumns
	} else {
		fields = strmangle.SetComplement(
			dishAllColumns,
			dishPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DishSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDishesUpsert(t *testing.T) {
	t.Parallel()

	if len(dishAllColumns) == len(dishPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Dish{}
	if err = randomize.Struct(seed, &o, dishDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Dish: %s", err)
	}

	count, err := Dishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dishDBTypes, false, dishPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Dish: %s", err)
	}

	count, err = Dishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
