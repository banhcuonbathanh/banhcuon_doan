// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDeliveryDishes(t *testing.T) {
	t.Parallel()

	query := DeliveryDishes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDeliveryDishesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryDish{}
	if err = randomize.Struct(seed, o, deliveryDishDBTypes, true, deliveryDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeliveryDishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeliveryDishesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryDish{}
	if err = randomize.Struct(seed, o, deliveryDishDBTypes, true, deliveryDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DeliveryDishes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeliveryDishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeliveryDishesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryDish{}
	if err = randomize.Struct(seed, o, deliveryDishDBTypes, true, deliveryDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeliveryDishSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeliveryDishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeliveryDishesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryDish{}
	if err = randomize.Struct(seed, o, deliveryDishDBTypes, true, deliveryDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DeliveryDishExists(ctx, tx, o.DeliveryID, o.DishID)
	if err != nil {
		t.Errorf("Unable to check if DeliveryDish exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DeliveryDishExists to return true, but got false.")
	}
}

func testDeliveryDishesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryDish{}
	if err = randomize.Struct(seed, o, deliveryDishDBTypes, true, deliveryDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	deliveryDishFound, err := FindDeliveryDish(ctx, tx, o.DeliveryID, o.DishID)
	if err != nil {
		t.Error(err)
	}

	if deliveryDishFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDeliveryDishesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryDish{}
	if err = randomize.Struct(seed, o, deliveryDishDBTypes, true, deliveryDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DeliveryDishes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDeliveryDishesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryDish{}
	if err = randomize.Struct(seed, o, deliveryDishDBTypes, true, deliveryDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DeliveryDishes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDeliveryDishesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	deliveryDishOne := &DeliveryDish{}
	deliveryDishTwo := &DeliveryDish{}
	if err = randomize.Struct(seed, deliveryDishOne, deliveryDishDBTypes, false, deliveryDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}
	if err = randomize.Struct(seed, deliveryDishTwo, deliveryDishDBTypes, false, deliveryDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deliveryDishOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deliveryDishTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeliveryDishes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDeliveryDishesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	deliveryDishOne := &DeliveryDish{}
	deliveryDishTwo := &DeliveryDish{}
	if err = randomize.Struct(seed, deliveryDishOne, deliveryDishDBTypes, false, deliveryDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}
	if err = randomize.Struct(seed, deliveryDishTwo, deliveryDishDBTypes, false, deliveryDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deliveryDishOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deliveryDishTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeliveryDishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func deliveryDishBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DeliveryDish) error {
	*o = DeliveryDish{}
	return nil
}

func deliveryDishAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DeliveryDish) error {
	*o = DeliveryDish{}
	return nil
}

func deliveryDishAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DeliveryDish) error {
	*o = DeliveryDish{}
	return nil
}

func deliveryDishBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DeliveryDish) error {
	*o = DeliveryDish{}
	return nil
}

func deliveryDishAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DeliveryDish) error {
	*o = DeliveryDish{}
	return nil
}

func deliveryDishBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DeliveryDish) error {
	*o = DeliveryDish{}
	return nil
}

func deliveryDishAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DeliveryDish) error {
	*o = DeliveryDish{}
	return nil
}

func deliveryDishBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DeliveryDish) error {
	*o = DeliveryDish{}
	return nil
}

func deliveryDishAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DeliveryDish) error {
	*o = DeliveryDish{}
	return nil
}

func testDeliveryDishesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DeliveryDish{}
	o := &DeliveryDish{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, deliveryDishDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DeliveryDish object: %s", err)
	}

	AddDeliveryDishHook(boil.BeforeInsertHook, deliveryDishBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	deliveryDishBeforeInsertHooks = []DeliveryDishHook{}

	AddDeliveryDishHook(boil.AfterInsertHook, deliveryDishAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	deliveryDishAfterInsertHooks = []DeliveryDishHook{}

	AddDeliveryDishHook(boil.AfterSelectHook, deliveryDishAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	deliveryDishAfterSelectHooks = []DeliveryDishHook{}

	AddDeliveryDishHook(boil.BeforeUpdateHook, deliveryDishBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	deliveryDishBeforeUpdateHooks = []DeliveryDishHook{}

	AddDeliveryDishHook(boil.AfterUpdateHook, deliveryDishAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	deliveryDishAfterUpdateHooks = []DeliveryDishHook{}

	AddDeliveryDishHook(boil.BeforeDeleteHook, deliveryDishBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	deliveryDishBeforeDeleteHooks = []DeliveryDishHook{}

	AddDeliveryDishHook(boil.AfterDeleteHook, deliveryDishAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	deliveryDishAfterDeleteHooks = []DeliveryDishHook{}

	AddDeliveryDishHook(boil.BeforeUpsertHook, deliveryDishBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	deliveryDishBeforeUpsertHooks = []DeliveryDishHook{}

	AddDeliveryDishHook(boil.AfterUpsertHook, deliveryDishAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	deliveryDishAfterUpsertHooks = []DeliveryDishHook{}
}

func testDeliveryDishesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryDish{}
	if err = randomize.Struct(seed, o, deliveryDishDBTypes, true, deliveryDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeliveryDishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeliveryDishesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryDish{}
	if err = randomize.Struct(seed, o, deliveryDishDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(deliveryDishPrimaryKeyColumns, deliveryDishColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := DeliveryDishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeliveryDishToOneDeliveryUsingDelivery(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DeliveryDish
	var foreign Delivery

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, deliveryDishDBTypes, false, deliveryDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, deliveryDBTypes, false, deliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DeliveryID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Delivery().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddDeliveryHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Delivery) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DeliveryDishSlice{&local}
	if err = local.L.LoadDelivery(ctx, tx, false, (*[]*DeliveryDish)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Delivery == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Delivery = nil
	if err = local.L.LoadDelivery(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Delivery == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDeliveryDishToOneDishUsingDish(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DeliveryDish
	var foreign Dish

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, deliveryDishDBTypes, false, deliveryDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dishDBTypes, false, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DishID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Dish().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddDishHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Dish) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DeliveryDishSlice{&local}
	if err = local.L.LoadDish(ctx, tx, false, (*[]*DeliveryDish)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Dish == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Dish = nil
	if err = local.L.LoadDish(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Dish == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDeliveryDishToOneSetOpDeliveryUsingDelivery(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DeliveryDish
	var b, c Delivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, deliveryDishDBTypes, false, strmangle.SetComplement(deliveryDishPrimaryKeyColumns, deliveryDishColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, deliveryDBTypes, false, strmangle.SetComplement(deliveryPrimaryKeyColumns, deliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, deliveryDBTypes, false, strmangle.SetComplement(deliveryPrimaryKeyColumns, deliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Delivery{&b, &c} {
		err = a.SetDelivery(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Delivery != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DeliveryDishes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DeliveryID != x.ID {
			t.Error("foreign key was wrong value", a.DeliveryID)
		}

		if exists, err := DeliveryDishExists(ctx, tx, a.DeliveryID, a.DishID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testDeliveryDishToOneSetOpDishUsingDish(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DeliveryDish
	var b, c Dish

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, deliveryDishDBTypes, false, strmangle.SetComplement(deliveryDishPrimaryKeyColumns, deliveryDishColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dishDBTypes, false, strmangle.SetComplement(dishPrimaryKeyColumns, dishColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dishDBTypes, false, strmangle.SetComplement(dishPrimaryKeyColumns, dishColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Dish{&b, &c} {
		err = a.SetDish(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Dish != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DeliveryDishes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DishID != x.ID {
			t.Error("foreign key was wrong value", a.DishID)
		}

		if exists, err := DeliveryDishExists(ctx, tx, a.DeliveryID, a.DishID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testDeliveryDishesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryDish{}
	if err = randomize.Struct(seed, o, deliveryDishDBTypes, true, deliveryDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeliveryDishesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryDish{}
	if err = randomize.Struct(seed, o, deliveryDishDBTypes, true, deliveryDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeliveryDishSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeliveryDishesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryDish{}
	if err = randomize.Struct(seed, o, deliveryDishDBTypes, true, deliveryDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeliveryDishes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	deliveryDishDBTypes = map[string]string{`DeliveryID`: `bigint`, `DishID`: `bigint`, `Quantity`: `integer`}
	_                   = bytes.MinRead
)

func testDeliveryDishesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(deliveryDishPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(deliveryDishAllColumns) == len(deliveryDishPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryDish{}
	if err = randomize.Struct(seed, o, deliveryDishDBTypes, true, deliveryDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeliveryDishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deliveryDishDBTypes, true, deliveryDishPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDeliveryDishesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(deliveryDishAllColumns) == len(deliveryDishPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryDish{}
	if err = randomize.Struct(seed, o, deliveryDishDBTypes, true, deliveryDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeliveryDishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deliveryDishDBTypes, true, deliveryDishPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(deliveryDishAllColumns, deliveryDishPrimaryKeyColumns) {
		fields = deliveryDishAllColumns
	} else {
		fields = strmangle.SetComplement(
			deliveryDishAllColumns,
			deliveryDishPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DeliveryDishSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDeliveryDishesUpsert(t *testing.T) {
	t.Parallel()

	if len(deliveryDishAllColumns) == len(deliveryDishPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DeliveryDish{}
	if err = randomize.Struct(seed, &o, deliveryDishDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeliveryDish: %s", err)
	}

	count, err := DeliveryDishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, deliveryDishDBTypes, false, deliveryDishPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeliveryDish struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeliveryDish: %s", err)
	}

	count, err = DeliveryDishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
