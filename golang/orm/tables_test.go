// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTables(t *testing.T) {
	t.Parallel()

	query := Tables()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTablesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Table{}
	if err = randomize.Struct(seed, o, tableDBTypes, true, tableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTablesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Table{}
	if err = randomize.Struct(seed, o, tableDBTypes, true, tableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Tables().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTablesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Table{}
	if err = randomize.Struct(seed, o, tableDBTypes, true, tableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TableSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTablesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Table{}
	if err = randomize.Struct(seed, o, tableDBTypes, true, tableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TableExists(ctx, tx, o.Number)
	if err != nil {
		t.Errorf("Unable to check if Table exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TableExists to return true, but got false.")
	}
}

func testTablesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Table{}
	if err = randomize.Struct(seed, o, tableDBTypes, true, tableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tableFound, err := FindTable(ctx, tx, o.Number)
	if err != nil {
		t.Error(err)
	}

	if tableFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTablesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Table{}
	if err = randomize.Struct(seed, o, tableDBTypes, true, tableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Tables().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTablesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Table{}
	if err = randomize.Struct(seed, o, tableDBTypes, true, tableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Tables().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTablesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tableOne := &Table{}
	tableTwo := &Table{}
	if err = randomize.Struct(seed, tableOne, tableDBTypes, false, tableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}
	if err = randomize.Struct(seed, tableTwo, tableDBTypes, false, tableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tableOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tableTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tables().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTablesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tableOne := &Table{}
	tableTwo := &Table{}
	if err = randomize.Struct(seed, tableOne, tableDBTypes, false, tableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}
	if err = randomize.Struct(seed, tableTwo, tableDBTypes, false, tableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tableOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tableTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tableBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Table) error {
	*o = Table{}
	return nil
}

func tableAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Table) error {
	*o = Table{}
	return nil
}

func tableAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Table) error {
	*o = Table{}
	return nil
}

func tableBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Table) error {
	*o = Table{}
	return nil
}

func tableAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Table) error {
	*o = Table{}
	return nil
}

func tableBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Table) error {
	*o = Table{}
	return nil
}

func tableAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Table) error {
	*o = Table{}
	return nil
}

func tableBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Table) error {
	*o = Table{}
	return nil
}

func tableAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Table) error {
	*o = Table{}
	return nil
}

func testTablesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Table{}
	o := &Table{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tableDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Table object: %s", err)
	}

	AddTableHook(boil.BeforeInsertHook, tableBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tableBeforeInsertHooks = []TableHook{}

	AddTableHook(boil.AfterInsertHook, tableAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tableAfterInsertHooks = []TableHook{}

	AddTableHook(boil.AfterSelectHook, tableAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tableAfterSelectHooks = []TableHook{}

	AddTableHook(boil.BeforeUpdateHook, tableBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tableBeforeUpdateHooks = []TableHook{}

	AddTableHook(boil.AfterUpdateHook, tableAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tableAfterUpdateHooks = []TableHook{}

	AddTableHook(boil.BeforeDeleteHook, tableBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tableBeforeDeleteHooks = []TableHook{}

	AddTableHook(boil.AfterDeleteHook, tableAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tableAfterDeleteHooks = []TableHook{}

	AddTableHook(boil.BeforeUpsertHook, tableBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tableBeforeUpsertHooks = []TableHook{}

	AddTableHook(boil.AfterUpsertHook, tableAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tableAfterUpsertHooks = []TableHook{}
}

func testTablesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Table{}
	if err = randomize.Struct(seed, o, tableDBTypes, true, tableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTablesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Table{}
	if err = randomize.Struct(seed, o, tableDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(tablePrimaryKeyColumns, tableColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Tables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTableToManyTableNumberDeliveries(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Table
	var b, c Delivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tableDBTypes, true, tableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, deliveryDBTypes, false, deliveryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, deliveryDBTypes, false, deliveryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.TableNumber, a.Number)
	queries.Assign(&c.TableNumber, a.Number)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TableNumberDeliveries().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.TableNumber, b.TableNumber) {
			bFound = true
		}
		if queries.Equal(v.TableNumber, c.TableNumber) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TableSlice{&a}
	if err = a.L.LoadTableNumberDeliveries(ctx, tx, false, (*[]*Table)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TableNumberDeliveries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TableNumberDeliveries = nil
	if err = a.L.LoadTableNumberDeliveries(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TableNumberDeliveries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTableToManyTableNumberGuests(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Table
	var b, c Guest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tableDBTypes, true, tableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, guestDBTypes, false, guestColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, guestDBTypes, false, guestColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.TableNumber, a.Number)
	queries.Assign(&c.TableNumber, a.Number)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TableNumberGuests().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.TableNumber, b.TableNumber) {
			bFound = true
		}
		if queries.Equal(v.TableNumber, c.TableNumber) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TableSlice{&a}
	if err = a.L.LoadTableNumberGuests(ctx, tx, false, (*[]*Table)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TableNumberGuests); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TableNumberGuests = nil
	if err = a.L.LoadTableNumberGuests(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TableNumberGuests); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTableToManyTableNumberOrders(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Table
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tableDBTypes, true, tableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.TableNumber, a.Number)
	queries.Assign(&c.TableNumber, a.Number)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TableNumberOrders().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.TableNumber, b.TableNumber) {
			bFound = true
		}
		if queries.Equal(v.TableNumber, c.TableNumber) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TableSlice{&a}
	if err = a.L.LoadTableNumberOrders(ctx, tx, false, (*[]*Table)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TableNumberOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TableNumberOrders = nil
	if err = a.L.LoadTableNumberOrders(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TableNumberOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTableToManyAddOpTableNumberDeliveries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Table
	var b, c, d, e Delivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tableDBTypes, false, strmangle.SetComplement(tablePrimaryKeyColumns, tableColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Delivery{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, deliveryDBTypes, false, strmangle.SetComplement(deliveryPrimaryKeyColumns, deliveryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Delivery{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTableNumberDeliveries(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Number, first.TableNumber) {
			t.Error("foreign key was wrong value", a.Number, first.TableNumber)
		}
		if !queries.Equal(a.Number, second.TableNumber) {
			t.Error("foreign key was wrong value", a.Number, second.TableNumber)
		}

		if first.R.TableNumberTable != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.TableNumberTable != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TableNumberDeliveries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TableNumberDeliveries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TableNumberDeliveries().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTableToManySetOpTableNumberDeliveries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Table
	var b, c, d, e Delivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tableDBTypes, false, strmangle.SetComplement(tablePrimaryKeyColumns, tableColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Delivery{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, deliveryDBTypes, false, strmangle.SetComplement(deliveryPrimaryKeyColumns, deliveryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTableNumberDeliveries(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TableNumberDeliveries().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTableNumberDeliveries(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TableNumberDeliveries().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TableNumber) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TableNumber) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Number, d.TableNumber) {
		t.Error("foreign key was wrong value", a.Number, d.TableNumber)
	}
	if !queries.Equal(a.Number, e.TableNumber) {
		t.Error("foreign key was wrong value", a.Number, e.TableNumber)
	}

	if b.R.TableNumberTable != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.TableNumberTable != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.TableNumberTable != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.TableNumberTable != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.TableNumberDeliveries[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.TableNumberDeliveries[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTableToManyRemoveOpTableNumberDeliveries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Table
	var b, c, d, e Delivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tableDBTypes, false, strmangle.SetComplement(tablePrimaryKeyColumns, tableColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Delivery{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, deliveryDBTypes, false, strmangle.SetComplement(deliveryPrimaryKeyColumns, deliveryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTableNumberDeliveries(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TableNumberDeliveries().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTableNumberDeliveries(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TableNumberDeliveries().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TableNumber) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TableNumber) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.TableNumberTable != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.TableNumberTable != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.TableNumberTable != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.TableNumberTable != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.TableNumberDeliveries) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.TableNumberDeliveries[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.TableNumberDeliveries[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTableToManyAddOpTableNumberGuests(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Table
	var b, c, d, e Guest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tableDBTypes, false, strmangle.SetComplement(tablePrimaryKeyColumns, tableColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Guest{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, guestDBTypes, false, strmangle.SetComplement(guestPrimaryKeyColumns, guestColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Guest{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTableNumberGuests(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Number, first.TableNumber) {
			t.Error("foreign key was wrong value", a.Number, first.TableNumber)
		}
		if !queries.Equal(a.Number, second.TableNumber) {
			t.Error("foreign key was wrong value", a.Number, second.TableNumber)
		}

		if first.R.TableNumberTable != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.TableNumberTable != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TableNumberGuests[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TableNumberGuests[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TableNumberGuests().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTableToManySetOpTableNumberGuests(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Table
	var b, c, d, e Guest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tableDBTypes, false, strmangle.SetComplement(tablePrimaryKeyColumns, tableColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Guest{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, guestDBTypes, false, strmangle.SetComplement(guestPrimaryKeyColumns, guestColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTableNumberGuests(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TableNumberGuests().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTableNumberGuests(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TableNumberGuests().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TableNumber) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TableNumber) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Number, d.TableNumber) {
		t.Error("foreign key was wrong value", a.Number, d.TableNumber)
	}
	if !queries.Equal(a.Number, e.TableNumber) {
		t.Error("foreign key was wrong value", a.Number, e.TableNumber)
	}

	if b.R.TableNumberTable != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.TableNumberTable != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.TableNumberTable != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.TableNumberTable != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.TableNumberGuests[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.TableNumberGuests[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTableToManyRemoveOpTableNumberGuests(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Table
	var b, c, d, e Guest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tableDBTypes, false, strmangle.SetComplement(tablePrimaryKeyColumns, tableColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Guest{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, guestDBTypes, false, strmangle.SetComplement(guestPrimaryKeyColumns, guestColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTableNumberGuests(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TableNumberGuests().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTableNumberGuests(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TableNumberGuests().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TableNumber) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TableNumber) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.TableNumberTable != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.TableNumberTable != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.TableNumberTable != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.TableNumberTable != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.TableNumberGuests) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.TableNumberGuests[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.TableNumberGuests[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTableToManyAddOpTableNumberOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Table
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tableDBTypes, false, strmangle.SetComplement(tablePrimaryKeyColumns, tableColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Order{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTableNumberOrders(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Number, first.TableNumber) {
			t.Error("foreign key was wrong value", a.Number, first.TableNumber)
		}
		if !queries.Equal(a.Number, second.TableNumber) {
			t.Error("foreign key was wrong value", a.Number, second.TableNumber)
		}

		if first.R.TableNumberTable != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.TableNumberTable != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TableNumberOrders[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TableNumberOrders[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TableNumberOrders().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTableToManySetOpTableNumberOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Table
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tableDBTypes, false, strmangle.SetComplement(tablePrimaryKeyColumns, tableColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTableNumberOrders(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TableNumberOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTableNumberOrders(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TableNumberOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TableNumber) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TableNumber) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Number, d.TableNumber) {
		t.Error("foreign key was wrong value", a.Number, d.TableNumber)
	}
	if !queries.Equal(a.Number, e.TableNumber) {
		t.Error("foreign key was wrong value", a.Number, e.TableNumber)
	}

	if b.R.TableNumberTable != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.TableNumberTable != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.TableNumberTable != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.TableNumberTable != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.TableNumberOrders[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.TableNumberOrders[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTableToManyRemoveOpTableNumberOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Table
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tableDBTypes, false, strmangle.SetComplement(tablePrimaryKeyColumns, tableColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTableNumberOrders(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TableNumberOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTableNumberOrders(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TableNumberOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TableNumber) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TableNumber) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.TableNumberTable != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.TableNumberTable != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.TableNumberTable != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.TableNumberTable != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.TableNumberOrders) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.TableNumberOrders[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.TableNumberOrders[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTableToOneBranchUsingBranch(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Table
	var foreign Branch

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tableDBTypes, true, tableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, branchDBTypes, false, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.BranchID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Branch().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddBranchHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Branch) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TableSlice{&local}
	if err = local.L.LoadBranch(ctx, tx, false, (*[]*Table)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Branch == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Branch = nil
	if err = local.L.LoadBranch(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Branch == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTableToOneSetOpBranchUsingBranch(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Table
	var b, c Branch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tableDBTypes, false, strmangle.SetComplement(tablePrimaryKeyColumns, tableColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Branch{&b, &c} {
		err = a.SetBranch(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Branch != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Tables[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.BranchID, x.ID) {
			t.Error("foreign key was wrong value", a.BranchID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BranchID))
		reflect.Indirect(reflect.ValueOf(&a.BranchID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.BranchID, x.ID) {
			t.Error("foreign key was wrong value", a.BranchID, x.ID)
		}
	}
}

func testTableToOneRemoveOpBranchUsingBranch(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Table
	var b Branch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tableDBTypes, false, strmangle.SetComplement(tablePrimaryKeyColumns, tableColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetBranch(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveBranch(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Branch().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Branch != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.BranchID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Tables) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTablesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Table{}
	if err = randomize.Struct(seed, o, tableDBTypes, true, tableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTablesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Table{}
	if err = randomize.Struct(seed, o, tableDBTypes, true, tableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TableSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTablesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Table{}
	if err = randomize.Struct(seed, o, tableDBTypes, true, tableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tables().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tableDBTypes = map[string]string{`Number`: `integer`, `BranchID`: `bigint`, `Capacity`: `integer`, `Status`: `enum.table_status('AVAILABLE','OCCUPIED','RESERVED','OUT_OF_SERVICE','TAKE_AWAY')`, `Token`: `character varying`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`}
	_            = bytes.MinRead
)

func testTablesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tablePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tableAllColumns) == len(tablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Table{}
	if err = randomize.Struct(seed, o, tableDBTypes, true, tableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tableDBTypes, true, tablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTablesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tableAllColumns) == len(tablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Table{}
	if err = randomize.Struct(seed, o, tableDBTypes, true, tableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tableDBTypes, true, tablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tableAllColumns, tablePrimaryKeyColumns) {
		fields = tableAllColumns
	} else {
		fields = strmangle.SetComplement(
			tableAllColumns,
			tablePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TableSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTablesUpsert(t *testing.T) {
	t.Parallel()

	if len(tableAllColumns) == len(tablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Table{}
	if err = randomize.Struct(seed, &o, tableDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Table: %s", err)
	}

	count, err := Tables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tableDBTypes, false, tablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Table struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Table: %s", err)
	}

	count, err = Tables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
