// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// OrderSet is an object representing the database table.
type OrderSet struct {
	OrderID  int64 `boil:"order_id" json:"order_id" toml:"order_id" yaml:"order_id"`
	SetID    int64 `boil:"set_id" json:"set_id" toml:"set_id" yaml:"set_id"`
	Quantity int   `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`

	R *orderSetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderSetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderSetColumns = struct {
	OrderID  string
	SetID    string
	Quantity string
}{
	OrderID:  "order_id",
	SetID:    "set_id",
	Quantity: "quantity",
}

var OrderSetTableColumns = struct {
	OrderID  string
	SetID    string
	Quantity string
}{
	OrderID:  "order_sets.order_id",
	SetID:    "order_sets.set_id",
	Quantity: "order_sets.quantity",
}

// Generated where

var OrderSetWhere = struct {
	OrderID  whereHelperint64
	SetID    whereHelperint64
	Quantity whereHelperint
}{
	OrderID:  whereHelperint64{field: "\"order_sets\".\"order_id\""},
	SetID:    whereHelperint64{field: "\"order_sets\".\"set_id\""},
	Quantity: whereHelperint{field: "\"order_sets\".\"quantity\""},
}

// OrderSetRels is where relationship names are stored.
var OrderSetRels = struct {
	Order string
	Set   string
}{
	Order: "Order",
	Set:   "Set",
}

// orderSetR is where relationships are stored.
type orderSetR struct {
	Order *Order `boil:"Order" json:"Order" toml:"Order" yaml:"Order"`
	Set   *Set   `boil:"Set" json:"Set" toml:"Set" yaml:"Set"`
}

// NewStruct creates a new relationship struct
func (*orderSetR) NewStruct() *orderSetR {
	return &orderSetR{}
}

func (o *OrderSet) GetOrder() *Order {
	if o == nil {
		return nil
	}

	return o.R.GetOrder()
}

func (r *orderSetR) GetOrder() *Order {
	if r == nil {
		return nil
	}

	return r.Order
}

func (o *OrderSet) GetSet() *Set {
	if o == nil {
		return nil
	}

	return o.R.GetSet()
}

func (r *orderSetR) GetSet() *Set {
	if r == nil {
		return nil
	}

	return r.Set
}

// orderSetL is where Load methods for each relationship are stored.
type orderSetL struct{}

var (
	orderSetAllColumns            = []string{"order_id", "set_id", "quantity"}
	orderSetColumnsWithoutDefault = []string{"order_id", "set_id", "quantity"}
	orderSetColumnsWithDefault    = []string{}
	orderSetPrimaryKeyColumns     = []string{"order_id", "set_id"}
	orderSetGeneratedColumns      = []string{}
)

type (
	// OrderSetSlice is an alias for a slice of pointers to OrderSet.
	// This should almost always be used instead of []OrderSet.
	OrderSetSlice []*OrderSet
	// OrderSetHook is the signature for custom OrderSet hook methods
	OrderSetHook func(context.Context, boil.ContextExecutor, *OrderSet) error

	orderSetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderSetType                 = reflect.TypeOf(&OrderSet{})
	orderSetMapping              = queries.MakeStructMapping(orderSetType)
	orderSetPrimaryKeyMapping, _ = queries.BindMapping(orderSetType, orderSetMapping, orderSetPrimaryKeyColumns)
	orderSetInsertCacheMut       sync.RWMutex
	orderSetInsertCache          = make(map[string]insertCache)
	orderSetUpdateCacheMut       sync.RWMutex
	orderSetUpdateCache          = make(map[string]updateCache)
	orderSetUpsertCacheMut       sync.RWMutex
	orderSetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderSetAfterSelectMu sync.Mutex
var orderSetAfterSelectHooks []OrderSetHook

var orderSetBeforeInsertMu sync.Mutex
var orderSetBeforeInsertHooks []OrderSetHook
var orderSetAfterInsertMu sync.Mutex
var orderSetAfterInsertHooks []OrderSetHook

var orderSetBeforeUpdateMu sync.Mutex
var orderSetBeforeUpdateHooks []OrderSetHook
var orderSetAfterUpdateMu sync.Mutex
var orderSetAfterUpdateHooks []OrderSetHook

var orderSetBeforeDeleteMu sync.Mutex
var orderSetBeforeDeleteHooks []OrderSetHook
var orderSetAfterDeleteMu sync.Mutex
var orderSetAfterDeleteHooks []OrderSetHook

var orderSetBeforeUpsertMu sync.Mutex
var orderSetBeforeUpsertHooks []OrderSetHook
var orderSetAfterUpsertMu sync.Mutex
var orderSetAfterUpsertHooks []OrderSetHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderSet) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderSetAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderSet) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderSetBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderSet) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderSetAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderSet) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderSetBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderSet) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderSetAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderSet) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderSetBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderSet) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderSetAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderSet) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderSetBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderSet) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderSetAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderSetHook registers your hook function for all future operations.
func AddOrderSetHook(hookPoint boil.HookPoint, orderSetHook OrderSetHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderSetAfterSelectMu.Lock()
		orderSetAfterSelectHooks = append(orderSetAfterSelectHooks, orderSetHook)
		orderSetAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		orderSetBeforeInsertMu.Lock()
		orderSetBeforeInsertHooks = append(orderSetBeforeInsertHooks, orderSetHook)
		orderSetBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		orderSetAfterInsertMu.Lock()
		orderSetAfterInsertHooks = append(orderSetAfterInsertHooks, orderSetHook)
		orderSetAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		orderSetBeforeUpdateMu.Lock()
		orderSetBeforeUpdateHooks = append(orderSetBeforeUpdateHooks, orderSetHook)
		orderSetBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		orderSetAfterUpdateMu.Lock()
		orderSetAfterUpdateHooks = append(orderSetAfterUpdateHooks, orderSetHook)
		orderSetAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		orderSetBeforeDeleteMu.Lock()
		orderSetBeforeDeleteHooks = append(orderSetBeforeDeleteHooks, orderSetHook)
		orderSetBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		orderSetAfterDeleteMu.Lock()
		orderSetAfterDeleteHooks = append(orderSetAfterDeleteHooks, orderSetHook)
		orderSetAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		orderSetBeforeUpsertMu.Lock()
		orderSetBeforeUpsertHooks = append(orderSetBeforeUpsertHooks, orderSetHook)
		orderSetBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		orderSetAfterUpsertMu.Lock()
		orderSetAfterUpsertHooks = append(orderSetAfterUpsertHooks, orderSetHook)
		orderSetAfterUpsertMu.Unlock()
	}
}

// One returns a single orderSet record from the query.
func (q orderSetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderSet, error) {
	o := &OrderSet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for order_sets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrderSet records from the query.
func (q orderSetQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderSetSlice, error) {
	var o []*OrderSet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to OrderSet slice")
	}

	if len(orderSetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrderSet records in the query.
func (q orderSetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count order_sets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderSetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if order_sets exists")
	}

	return count > 0, nil
}

// Order pointed to by the foreign key.
func (o *OrderSet) Order(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return Orders(queryMods...)
}

// Set pointed to by the foreign key.
func (o *OrderSet) Set(mods ...qm.QueryMod) setQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SetID),
	}

	queryMods = append(queryMods, mods...)

	return Sets(queryMods...)
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderSetL) LoadOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderSet interface{}, mods queries.Applicator) error {
	var slice []*OrderSet
	var object *OrderSet

	if singular {
		var ok bool
		object, ok = maybeOrderSet.(*OrderSet)
		if !ok {
			object = new(OrderSet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderSet))
			}
		}
	} else {
		s, ok := maybeOrderSet.(*[]*OrderSet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderSet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderSetR{}
		}
		args[object.OrderID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderSetR{}
			}

			args[obj.OrderID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.OrderSets = append(foreign.R.OrderSets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderID == foreign.ID {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.OrderSets = append(foreign.R.OrderSets, local)
				break
			}
		}
	}

	return nil
}

// LoadSet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderSetL) LoadSet(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderSet interface{}, mods queries.Applicator) error {
	var slice []*OrderSet
	var object *OrderSet

	if singular {
		var ok bool
		object, ok = maybeOrderSet.(*OrderSet)
		if !ok {
			object = new(OrderSet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderSet))
			}
		}
	} else {
		s, ok := maybeOrderSet.(*[]*OrderSet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderSet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderSetR{}
		}
		args[object.SetID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderSetR{}
			}

			args[obj.SetID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sets`),
		qm.WhereIn(`sets.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Set")
	}

	var resultSlice []*Set
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Set")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sets")
	}

	if len(setAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Set = foreign
		if foreign.R == nil {
			foreign.R = &setR{}
		}
		foreign.R.OrderSets = append(foreign.R.OrderSets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SetID == foreign.ID {
				local.R.Set = foreign
				if foreign.R == nil {
					foreign.R = &setR{}
				}
				foreign.R.OrderSets = append(foreign.R.OrderSets, local)
				break
			}
		}
	}

	return nil
}

// SetOrder of the orderSet to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.OrderSets.
func (o *OrderSet) SetOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_sets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderSetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.OrderID, o.SetID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderID = related.ID
	if o.R == nil {
		o.R = &orderSetR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &orderR{
			OrderSets: OrderSetSlice{o},
		}
	} else {
		related.R.OrderSets = append(related.R.OrderSets, o)
	}

	return nil
}

// SetSet of the orderSet to the related item.
// Sets o.R.Set to related.
// Adds o to related.R.OrderSets.
func (o *OrderSet) SetSet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Set) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_sets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"set_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderSetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.OrderID, o.SetID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SetID = related.ID
	if o.R == nil {
		o.R = &orderSetR{
			Set: related,
		}
	} else {
		o.R.Set = related
	}

	if related.R == nil {
		related.R = &setR{
			OrderSets: OrderSetSlice{o},
		}
	} else {
		related.R.OrderSets = append(related.R.OrderSets, o)
	}

	return nil
}

// OrderSets retrieves all the records using an executor.
func OrderSets(mods ...qm.QueryMod) orderSetQuery {
	mods = append(mods, qm.From("\"order_sets\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"order_sets\".*"})
	}

	return orderSetQuery{q}
}

// FindOrderSet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderSet(ctx context.Context, exec boil.ContextExecutor, orderID int64, setID int64, selectCols ...string) (*OrderSet, error) {
	orderSetObj := &OrderSet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_sets\" where \"order_id\"=$1 AND \"set_id\"=$2", sel,
	)

	q := queries.Raw(query, orderID, setID)

	err := q.Bind(ctx, exec, orderSetObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from order_sets")
	}

	if err = orderSetObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderSetObj, err
	}

	return orderSetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderSet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no order_sets provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderSetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderSetInsertCacheMut.RLock()
	cache, cached := orderSetInsertCache[key]
	orderSetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderSetAllColumns,
			orderSetColumnsWithDefault,
			orderSetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderSetType, orderSetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderSetType, orderSetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_sets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_sets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into order_sets")
	}

	if !cached {
		orderSetInsertCacheMut.Lock()
		orderSetInsertCache[key] = cache
		orderSetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrderSet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderSet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderSetUpdateCacheMut.RLock()
	cache, cached := orderSetUpdateCache[key]
	orderSetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderSetAllColumns,
			orderSetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update order_sets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_sets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orderSetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderSetType, orderSetMapping, append(wl, orderSetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update order_sets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for order_sets")
	}

	if !cached {
		orderSetUpdateCacheMut.Lock()
		orderSetUpdateCache[key] = cache
		orderSetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q orderSetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for order_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for order_sets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderSetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_sets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderSetPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in orderSet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all orderSet")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderSet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no order_sets provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderSetColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderSetUpsertCacheMut.RLock()
	cache, cached := orderSetUpsertCache[key]
	orderSetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			orderSetAllColumns,
			orderSetColumnsWithDefault,
			orderSetColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			orderSetAllColumns,
			orderSetPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert order_sets, could not build update column list")
		}

		ret := strmangle.SetComplement(orderSetAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(orderSetPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert order_sets, could not build conflict column list")
			}

			conflict = make([]string, len(orderSetPrimaryKeyColumns))
			copy(conflict, orderSetPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"order_sets\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(orderSetType, orderSetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderSetType, orderSetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert order_sets")
	}

	if !cached {
		orderSetUpsertCacheMut.Lock()
		orderSetUpsertCache[key] = cache
		orderSetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrderSet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderSet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no OrderSet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderSetPrimaryKeyMapping)
	sql := "DELETE FROM \"order_sets\" WHERE \"order_id\"=$1 AND \"set_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from order_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for order_sets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderSetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no orderSetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from order_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for order_sets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderSetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderSetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_sets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderSetPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from orderSet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for order_sets")
	}

	if len(orderSetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderSet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderSet(ctx, exec, o.OrderID, o.SetID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderSetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderSetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_sets\".* FROM \"order_sets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderSetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in OrderSetSlice")
	}

	*o = slice

	return nil
}

// OrderSetExists checks if the OrderSet row exists.
func OrderSetExists(ctx context.Context, exec boil.ContextExecutor, orderID int64, setID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_sets\" where \"order_id\"=$1 AND \"set_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, orderID, setID)
	}
	row := exec.QueryRowContext(ctx, sql, orderID, setID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if order_sets exists")
	}

	return exists, nil
}

// Exists checks if the OrderSet row exists.
func (o *OrderSet) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderSetExists(ctx, exec, o.OrderID, o.SetID)
}
