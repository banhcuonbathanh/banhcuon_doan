// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Regulation is an object representing the database table.
type Regulation struct {
	ID        int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	BranchID  null.Int64 `boil:"branch_id" json:"branch_id,omitempty" toml:"branch_id" yaml:"branch_id,omitempty"`
	Title     string     `boil:"title" json:"title" toml:"title" yaml:"title"`
	Content   string     `boil:"content" json:"content" toml:"content" yaml:"content"`
	CreatedAt null.Time  `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time  `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt null.Time  `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *regulationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L regulationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RegulationColumns = struct {
	ID        string
	BranchID  string
	Title     string
	Content   string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	BranchID:  "branch_id",
	Title:     "title",
	Content:   "content",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var RegulationTableColumns = struct {
	ID        string
	BranchID  string
	Title     string
	Content   string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "regulations.id",
	BranchID:  "regulations.branch_id",
	Title:     "regulations.title",
	Content:   "regulations.content",
	CreatedAt: "regulations.created_at",
	UpdatedAt: "regulations.updated_at",
	DeletedAt: "regulations.deleted_at",
}

// Generated where

var RegulationWhere = struct {
	ID        whereHelperint64
	BranchID  whereHelpernull_Int64
	Title     whereHelperstring
	Content   whereHelperstring
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperint64{field: "\"regulations\".\"id\""},
	BranchID:  whereHelpernull_Int64{field: "\"regulations\".\"branch_id\""},
	Title:     whereHelperstring{field: "\"regulations\".\"title\""},
	Content:   whereHelperstring{field: "\"regulations\".\"content\""},
	CreatedAt: whereHelpernull_Time{field: "\"regulations\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"regulations\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"regulations\".\"deleted_at\""},
}

// RegulationRels is where relationship names are stored.
var RegulationRels = struct {
	Branch string
}{
	Branch: "Branch",
}

// regulationR is where relationships are stored.
type regulationR struct {
	Branch *Branch `boil:"Branch" json:"Branch" toml:"Branch" yaml:"Branch"`
}

// NewStruct creates a new relationship struct
func (*regulationR) NewStruct() *regulationR {
	return &regulationR{}
}

func (o *Regulation) GetBranch() *Branch {
	if o == nil {
		return nil
	}

	return o.R.GetBranch()
}

func (r *regulationR) GetBranch() *Branch {
	if r == nil {
		return nil
	}

	return r.Branch
}

// regulationL is where Load methods for each relationship are stored.
type regulationL struct{}

var (
	regulationAllColumns            = []string{"id", "branch_id", "title", "content", "created_at", "updated_at", "deleted_at"}
	regulationColumnsWithoutDefault = []string{"title", "content"}
	regulationColumnsWithDefault    = []string{"id", "branch_id", "created_at", "updated_at", "deleted_at"}
	regulationPrimaryKeyColumns     = []string{"id"}
	regulationGeneratedColumns      = []string{}
)

type (
	// RegulationSlice is an alias for a slice of pointers to Regulation.
	// This should almost always be used instead of []Regulation.
	RegulationSlice []*Regulation
	// RegulationHook is the signature for custom Regulation hook methods
	RegulationHook func(context.Context, boil.ContextExecutor, *Regulation) error

	regulationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	regulationType                 = reflect.TypeOf(&Regulation{})
	regulationMapping              = queries.MakeStructMapping(regulationType)
	regulationPrimaryKeyMapping, _ = queries.BindMapping(regulationType, regulationMapping, regulationPrimaryKeyColumns)
	regulationInsertCacheMut       sync.RWMutex
	regulationInsertCache          = make(map[string]insertCache)
	regulationUpdateCacheMut       sync.RWMutex
	regulationUpdateCache          = make(map[string]updateCache)
	regulationUpsertCacheMut       sync.RWMutex
	regulationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var regulationAfterSelectMu sync.Mutex
var regulationAfterSelectHooks []RegulationHook

var regulationBeforeInsertMu sync.Mutex
var regulationBeforeInsertHooks []RegulationHook
var regulationAfterInsertMu sync.Mutex
var regulationAfterInsertHooks []RegulationHook

var regulationBeforeUpdateMu sync.Mutex
var regulationBeforeUpdateHooks []RegulationHook
var regulationAfterUpdateMu sync.Mutex
var regulationAfterUpdateHooks []RegulationHook

var regulationBeforeDeleteMu sync.Mutex
var regulationBeforeDeleteHooks []RegulationHook
var regulationAfterDeleteMu sync.Mutex
var regulationAfterDeleteHooks []RegulationHook

var regulationBeforeUpsertMu sync.Mutex
var regulationBeforeUpsertHooks []RegulationHook
var regulationAfterUpsertMu sync.Mutex
var regulationAfterUpsertHooks []RegulationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Regulation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range regulationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Regulation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range regulationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Regulation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range regulationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Regulation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range regulationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Regulation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range regulationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Regulation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range regulationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Regulation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range regulationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Regulation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range regulationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Regulation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range regulationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRegulationHook registers your hook function for all future operations.
func AddRegulationHook(hookPoint boil.HookPoint, regulationHook RegulationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		regulationAfterSelectMu.Lock()
		regulationAfterSelectHooks = append(regulationAfterSelectHooks, regulationHook)
		regulationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		regulationBeforeInsertMu.Lock()
		regulationBeforeInsertHooks = append(regulationBeforeInsertHooks, regulationHook)
		regulationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		regulationAfterInsertMu.Lock()
		regulationAfterInsertHooks = append(regulationAfterInsertHooks, regulationHook)
		regulationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		regulationBeforeUpdateMu.Lock()
		regulationBeforeUpdateHooks = append(regulationBeforeUpdateHooks, regulationHook)
		regulationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		regulationAfterUpdateMu.Lock()
		regulationAfterUpdateHooks = append(regulationAfterUpdateHooks, regulationHook)
		regulationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		regulationBeforeDeleteMu.Lock()
		regulationBeforeDeleteHooks = append(regulationBeforeDeleteHooks, regulationHook)
		regulationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		regulationAfterDeleteMu.Lock()
		regulationAfterDeleteHooks = append(regulationAfterDeleteHooks, regulationHook)
		regulationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		regulationBeforeUpsertMu.Lock()
		regulationBeforeUpsertHooks = append(regulationBeforeUpsertHooks, regulationHook)
		regulationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		regulationAfterUpsertMu.Lock()
		regulationAfterUpsertHooks = append(regulationAfterUpsertHooks, regulationHook)
		regulationAfterUpsertMu.Unlock()
	}
}

// One returns a single regulation record from the query.
func (q regulationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Regulation, error) {
	o := &Regulation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for regulations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Regulation records from the query.
func (q regulationQuery) All(ctx context.Context, exec boil.ContextExecutor) (RegulationSlice, error) {
	var o []*Regulation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Regulation slice")
	}

	if len(regulationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Regulation records in the query.
func (q regulationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count regulations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q regulationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if regulations exists")
	}

	return count > 0, nil
}

// Branch pointed to by the foreign key.
func (o *Regulation) Branch(mods ...qm.QueryMod) branchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BranchID),
	}

	queryMods = append(queryMods, mods...)

	return Branches(queryMods...)
}

// LoadBranch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (regulationL) LoadBranch(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRegulation interface{}, mods queries.Applicator) error {
	var slice []*Regulation
	var object *Regulation

	if singular {
		var ok bool
		object, ok = maybeRegulation.(*Regulation)
		if !ok {
			object = new(Regulation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRegulation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRegulation))
			}
		}
	} else {
		s, ok := maybeRegulation.(*[]*Regulation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRegulation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRegulation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &regulationR{}
		}
		if !queries.IsNil(object.BranchID) {
			args[object.BranchID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &regulationR{}
			}

			if !queries.IsNil(obj.BranchID) {
				args[obj.BranchID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`branches`),
		qm.WhereIn(`branches.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Branch")
	}

	var resultSlice []*Branch
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Branch")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for branches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for branches")
	}

	if len(branchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Branch = foreign
		if foreign.R == nil {
			foreign.R = &branchR{}
		}
		foreign.R.Regulations = append(foreign.R.Regulations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BranchID, foreign.ID) {
				local.R.Branch = foreign
				if foreign.R == nil {
					foreign.R = &branchR{}
				}
				foreign.R.Regulations = append(foreign.R.Regulations, local)
				break
			}
		}
	}

	return nil
}

// SetBranch of the regulation to the related item.
// Sets o.R.Branch to related.
// Adds o to related.R.Regulations.
func (o *Regulation) SetBranch(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Branch) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"regulations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"branch_id"}),
		strmangle.WhereClause("\"", "\"", 2, regulationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BranchID, related.ID)
	if o.R == nil {
		o.R = &regulationR{
			Branch: related,
		}
	} else {
		o.R.Branch = related
	}

	if related.R == nil {
		related.R = &branchR{
			Regulations: RegulationSlice{o},
		}
	} else {
		related.R.Regulations = append(related.R.Regulations, o)
	}

	return nil
}

// RemoveBranch relationship.
// Sets o.R.Branch to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Regulation) RemoveBranch(ctx context.Context, exec boil.ContextExecutor, related *Branch) error {
	var err error

	queries.SetScanner(&o.BranchID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("branch_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Branch = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Regulations {
		if queries.Equal(o.BranchID, ri.BranchID) {
			continue
		}

		ln := len(related.R.Regulations)
		if ln > 1 && i < ln-1 {
			related.R.Regulations[i] = related.R.Regulations[ln-1]
		}
		related.R.Regulations = related.R.Regulations[:ln-1]
		break
	}
	return nil
}

// Regulations retrieves all the records using an executor.
func Regulations(mods ...qm.QueryMod) regulationQuery {
	mods = append(mods, qm.From("\"regulations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"regulations\".*"})
	}

	return regulationQuery{q}
}

// FindRegulation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRegulation(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Regulation, error) {
	regulationObj := &Regulation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"regulations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, regulationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from regulations")
	}

	if err = regulationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return regulationObj, err
	}

	return regulationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Regulation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no regulations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(regulationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	regulationInsertCacheMut.RLock()
	cache, cached := regulationInsertCache[key]
	regulationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			regulationAllColumns,
			regulationColumnsWithDefault,
			regulationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(regulationType, regulationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(regulationType, regulationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"regulations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"regulations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into regulations")
	}

	if !cached {
		regulationInsertCacheMut.Lock()
		regulationInsertCache[key] = cache
		regulationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Regulation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Regulation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	regulationUpdateCacheMut.RLock()
	cache, cached := regulationUpdateCache[key]
	regulationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			regulationAllColumns,
			regulationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update regulations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"regulations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, regulationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(regulationType, regulationMapping, append(wl, regulationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update regulations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for regulations")
	}

	if !cached {
		regulationUpdateCacheMut.Lock()
		regulationUpdateCache[key] = cache
		regulationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q regulationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for regulations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for regulations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RegulationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), regulationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"regulations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, regulationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in regulation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all regulation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Regulation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no regulations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(regulationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	regulationUpsertCacheMut.RLock()
	cache, cached := regulationUpsertCache[key]
	regulationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			regulationAllColumns,
			regulationColumnsWithDefault,
			regulationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			regulationAllColumns,
			regulationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert regulations, could not build update column list")
		}

		ret := strmangle.SetComplement(regulationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(regulationPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert regulations, could not build conflict column list")
			}

			conflict = make([]string, len(regulationPrimaryKeyColumns))
			copy(conflict, regulationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"regulations\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(regulationType, regulationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(regulationType, regulationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert regulations")
	}

	if !cached {
		regulationUpsertCacheMut.Lock()
		regulationUpsertCache[key] = cache
		regulationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Regulation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Regulation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Regulation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), regulationPrimaryKeyMapping)
	sql := "DELETE FROM \"regulations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from regulations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for regulations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q regulationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no regulationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from regulations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for regulations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RegulationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(regulationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), regulationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"regulations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, regulationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from regulation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for regulations")
	}

	if len(regulationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Regulation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRegulation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RegulationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RegulationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), regulationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"regulations\".* FROM \"regulations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, regulationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in RegulationSlice")
	}

	*o = slice

	return nil
}

// RegulationExists checks if the Regulation row exists.
func RegulationExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"regulations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if regulations exists")
	}

	return exists, nil
}

// Exists checks if the Regulation row exists.
func (o *Regulation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RegulationExists(ctx, exec, o.ID)
}
