// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSets(t *testing.T) {
	t.Parallel()

	query := Sets()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSetsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Set{}
	if err = randomize.Struct(seed, o, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSetsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Set{}
	if err = randomize.Struct(seed, o, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Sets().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSetsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Set{}
	if err = randomize.Struct(seed, o, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SetSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSetsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Set{}
	if err = randomize.Struct(seed, o, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SetExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Set exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SetExists to return true, but got false.")
	}
}

func testSetsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Set{}
	if err = randomize.Struct(seed, o, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	setFound, err := FindSet(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if setFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSetsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Set{}
	if err = randomize.Struct(seed, o, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Sets().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSetsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Set{}
	if err = randomize.Struct(seed, o, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Sets().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSetsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	setOne := &Set{}
	setTwo := &Set{}
	if err = randomize.Struct(seed, setOne, setDBTypes, false, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}
	if err = randomize.Struct(seed, setTwo, setDBTypes, false, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = setOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = setTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Sets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSetsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	setOne := &Set{}
	setTwo := &Set{}
	if err = randomize.Struct(seed, setOne, setDBTypes, false, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}
	if err = randomize.Struct(seed, setTwo, setDBTypes, false, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = setOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = setTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func setBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Set) error {
	*o = Set{}
	return nil
}

func setAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Set) error {
	*o = Set{}
	return nil
}

func setAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Set) error {
	*o = Set{}
	return nil
}

func setBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Set) error {
	*o = Set{}
	return nil
}

func setAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Set) error {
	*o = Set{}
	return nil
}

func setBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Set) error {
	*o = Set{}
	return nil
}

func setAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Set) error {
	*o = Set{}
	return nil
}

func setBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Set) error {
	*o = Set{}
	return nil
}

func setAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Set) error {
	*o = Set{}
	return nil
}

func testSetsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Set{}
	o := &Set{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, setDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Set object: %s", err)
	}

	AddSetHook(boil.BeforeInsertHook, setBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	setBeforeInsertHooks = []SetHook{}

	AddSetHook(boil.AfterInsertHook, setAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	setAfterInsertHooks = []SetHook{}

	AddSetHook(boil.AfterSelectHook, setAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	setAfterSelectHooks = []SetHook{}

	AddSetHook(boil.BeforeUpdateHook, setBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	setBeforeUpdateHooks = []SetHook{}

	AddSetHook(boil.AfterUpdateHook, setAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	setAfterUpdateHooks = []SetHook{}

	AddSetHook(boil.BeforeDeleteHook, setBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	setBeforeDeleteHooks = []SetHook{}

	AddSetHook(boil.AfterDeleteHook, setAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	setAfterDeleteHooks = []SetHook{}

	AddSetHook(boil.BeforeUpsertHook, setBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	setBeforeUpsertHooks = []SetHook{}

	AddSetHook(boil.AfterUpsertHook, setAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	setAfterUpsertHooks = []SetHook{}
}

func testSetsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Set{}
	if err = randomize.Struct(seed, o, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSetsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Set{}
	if err = randomize.Struct(seed, o, setDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(setPrimaryKeyColumns, setColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Sets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSetToManyOrderSets(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Set
	var b, c OrderSet

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderSetDBTypes, false, orderSetColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderSetDBTypes, false, orderSetColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SetID = a.ID
	c.SetID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrderSets().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SetID == b.SetID {
			bFound = true
		}
		if v.SetID == c.SetID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SetSlice{&a}
	if err = a.L.LoadOrderSets(ctx, tx, false, (*[]*Set)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderSets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrderSets = nil
	if err = a.L.LoadOrderSets(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderSets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSetToManySetDishes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Set
	var b, c SetDish

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, setDishDBTypes, false, setDishColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, setDishDBTypes, false, setDishColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SetID = a.ID
	c.SetID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SetDishes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SetID == b.SetID {
			bFound = true
		}
		if v.SetID == c.SetID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SetSlice{&a}
	if err = a.L.LoadSetDishes(ctx, tx, false, (*[]*Set)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SetDishes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SetDishes = nil
	if err = a.L.LoadSetDishes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SetDishes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSetToManyAddOpOrderSets(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Set
	var b, c, d, e OrderSet

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, setDBTypes, false, strmangle.SetComplement(setPrimaryKeyColumns, setColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderSet{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderSetDBTypes, false, strmangle.SetComplement(orderSetPrimaryKeyColumns, orderSetColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrderSet{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrderSets(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SetID {
			t.Error("foreign key was wrong value", a.ID, first.SetID)
		}
		if a.ID != second.SetID {
			t.Error("foreign key was wrong value", a.ID, second.SetID)
		}

		if first.R.Set != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Set != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrderSets[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrderSets[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrderSets().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSetToManyAddOpSetDishes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Set
	var b, c, d, e SetDish

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, setDBTypes, false, strmangle.SetComplement(setPrimaryKeyColumns, setColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SetDish{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, setDishDBTypes, false, strmangle.SetComplement(setDishPrimaryKeyColumns, setDishColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SetDish{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSetDishes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SetID {
			t.Error("foreign key was wrong value", a.ID, first.SetID)
		}
		if a.ID != second.SetID {
			t.Error("foreign key was wrong value", a.ID, second.SetID)
		}

		if first.R.Set != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Set != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SetDishes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SetDishes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SetDishes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSetToOneBranchUsingBranch(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Set
	var foreign Branch

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, branchDBTypes, false, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.BranchID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Branch().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddBranchHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Branch) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SetSlice{&local}
	if err = local.L.LoadBranch(ctx, tx, false, (*[]*Set)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Branch == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Branch = nil
	if err = local.L.LoadBranch(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Branch == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSetToOneSetOpBranchUsingBranch(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Set
	var b, c Branch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, setDBTypes, false, strmangle.SetComplement(setPrimaryKeyColumns, setColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Branch{&b, &c} {
		err = a.SetBranch(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Branch != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Sets[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.BranchID, x.ID) {
			t.Error("foreign key was wrong value", a.BranchID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BranchID))
		reflect.Indirect(reflect.ValueOf(&a.BranchID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.BranchID, x.ID) {
			t.Error("foreign key was wrong value", a.BranchID, x.ID)
		}
	}
}

func testSetToOneRemoveOpBranchUsingBranch(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Set
	var b Branch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, setDBTypes, false, strmangle.SetComplement(setPrimaryKeyColumns, setColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetBranch(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveBranch(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Branch().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Branch != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.BranchID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Sets) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSetsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Set{}
	if err = randomize.Struct(seed, o, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSetsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Set{}
	if err = randomize.Struct(seed, o, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SetSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSetsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Set{}
	if err = randomize.Struct(seed, o, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Sets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	setDBTypes = map[string]string{`ID`: `bigint`, `BranchID`: `bigint`, `Name`: `character varying`, `Description`: `text`, `UserID`: `bigint`, `IsFavourite`: `boolean`, `IsPublic`: `boolean`, `Image`: `character varying`, `Price`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`}
	_          = bytes.MinRead
)

func testSetsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(setPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(setAllColumns) == len(setPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Set{}
	if err = randomize.Struct(seed, o, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, setDBTypes, true, setPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSetsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(setAllColumns) == len(setPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Set{}
	if err = randomize.Struct(seed, o, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, setDBTypes, true, setPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(setAllColumns, setPrimaryKeyColumns) {
		fields = setAllColumns
	} else {
		fields = strmangle.SetComplement(
			setAllColumns,
			setPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SetSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSetsUpsert(t *testing.T) {
	t.Parallel()

	if len(setAllColumns) == len(setPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Set{}
	if err = randomize.Struct(seed, &o, setDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Set: %s", err)
	}

	count, err := Sets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, setDBTypes, false, setPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Set: %s", err)
	}

	count, err = Sets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
