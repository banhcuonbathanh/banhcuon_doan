// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Table is an object representing the database table.
type Table struct {
	Number    int         `boil:"number" json:"number" toml:"number" yaml:"number"`
	BranchID  null.Int64  `boil:"branch_id" json:"branch_id,omitempty" toml:"branch_id" yaml:"branch_id,omitempty"`
	Capacity  int         `boil:"capacity" json:"capacity" toml:"capacity" yaml:"capacity"`
	Status    null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	Token     string      `boil:"token" json:"token" toml:"token" yaml:"token"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *tableR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tableL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TableColumns = struct {
	Number    string
	BranchID  string
	Capacity  string
	Status    string
	Token     string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	Number:    "number",
	BranchID:  "branch_id",
	Capacity:  "capacity",
	Status:    "status",
	Token:     "token",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var TableTableColumns = struct {
	Number    string
	BranchID  string
	Capacity  string
	Status    string
	Token     string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	Number:    "tables.number",
	BranchID:  "tables.branch_id",
	Capacity:  "tables.capacity",
	Status:    "tables.status",
	Token:     "tables.token",
	CreatedAt: "tables.created_at",
	UpdatedAt: "tables.updated_at",
	DeletedAt: "tables.deleted_at",
}

// Generated where

var TableWhere = struct {
	Number    whereHelperint
	BranchID  whereHelpernull_Int64
	Capacity  whereHelperint
	Status    whereHelpernull_String
	Token     whereHelperstring
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
}{
	Number:    whereHelperint{field: "\"tables\".\"number\""},
	BranchID:  whereHelpernull_Int64{field: "\"tables\".\"branch_id\""},
	Capacity:  whereHelperint{field: "\"tables\".\"capacity\""},
	Status:    whereHelpernull_String{field: "\"tables\".\"status\""},
	Token:     whereHelperstring{field: "\"tables\".\"token\""},
	CreatedAt: whereHelpernull_Time{field: "\"tables\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"tables\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"tables\".\"deleted_at\""},
}

// TableRels is where relationship names are stored.
var TableRels = struct {
	Branch                string
	TableNumberDeliveries string
	TableNumberGuests     string
	TableNumberOrders     string
}{
	Branch:                "Branch",
	TableNumberDeliveries: "TableNumberDeliveries",
	TableNumberGuests:     "TableNumberGuests",
	TableNumberOrders:     "TableNumberOrders",
}

// tableR is where relationships are stored.
type tableR struct {
	Branch                *Branch       `boil:"Branch" json:"Branch" toml:"Branch" yaml:"Branch"`
	TableNumberDeliveries DeliverySlice `boil:"TableNumberDeliveries" json:"TableNumberDeliveries" toml:"TableNumberDeliveries" yaml:"TableNumberDeliveries"`
	TableNumberGuests     GuestSlice    `boil:"TableNumberGuests" json:"TableNumberGuests" toml:"TableNumberGuests" yaml:"TableNumberGuests"`
	TableNumberOrders     OrderSlice    `boil:"TableNumberOrders" json:"TableNumberOrders" toml:"TableNumberOrders" yaml:"TableNumberOrders"`
}

// NewStruct creates a new relationship struct
func (*tableR) NewStruct() *tableR {
	return &tableR{}
}

func (o *Table) GetBranch() *Branch {
	if o == nil {
		return nil
	}

	return o.R.GetBranch()
}

func (r *tableR) GetBranch() *Branch {
	if r == nil {
		return nil
	}

	return r.Branch
}

func (o *Table) GetTableNumberDeliveries() DeliverySlice {
	if o == nil {
		return nil
	}

	return o.R.GetTableNumberDeliveries()
}

func (r *tableR) GetTableNumberDeliveries() DeliverySlice {
	if r == nil {
		return nil
	}

	return r.TableNumberDeliveries
}

func (o *Table) GetTableNumberGuests() GuestSlice {
	if o == nil {
		return nil
	}

	return o.R.GetTableNumberGuests()
}

func (r *tableR) GetTableNumberGuests() GuestSlice {
	if r == nil {
		return nil
	}

	return r.TableNumberGuests
}

func (o *Table) GetTableNumberOrders() OrderSlice {
	if o == nil {
		return nil
	}

	return o.R.GetTableNumberOrders()
}

func (r *tableR) GetTableNumberOrders() OrderSlice {
	if r == nil {
		return nil
	}

	return r.TableNumberOrders
}

// tableL is where Load methods for each relationship are stored.
type tableL struct{}

var (
	tableAllColumns            = []string{"number", "branch_id", "capacity", "status", "token", "created_at", "updated_at", "deleted_at"}
	tableColumnsWithoutDefault = []string{"number", "capacity", "token"}
	tableColumnsWithDefault    = []string{"branch_id", "status", "created_at", "updated_at", "deleted_at"}
	tablePrimaryKeyColumns     = []string{"number"}
	tableGeneratedColumns      = []string{}
)

type (
	// TableSlice is an alias for a slice of pointers to Table.
	// This should almost always be used instead of []Table.
	TableSlice []*Table
	// TableHook is the signature for custom Table hook methods
	TableHook func(context.Context, boil.ContextExecutor, *Table) error

	tableQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tableType                 = reflect.TypeOf(&Table{})
	tableMapping              = queries.MakeStructMapping(tableType)
	tablePrimaryKeyMapping, _ = queries.BindMapping(tableType, tableMapping, tablePrimaryKeyColumns)
	tableInsertCacheMut       sync.RWMutex
	tableInsertCache          = make(map[string]insertCache)
	tableUpdateCacheMut       sync.RWMutex
	tableUpdateCache          = make(map[string]updateCache)
	tableUpsertCacheMut       sync.RWMutex
	tableUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tableAfterSelectMu sync.Mutex
var tableAfterSelectHooks []TableHook

var tableBeforeInsertMu sync.Mutex
var tableBeforeInsertHooks []TableHook
var tableAfterInsertMu sync.Mutex
var tableAfterInsertHooks []TableHook

var tableBeforeUpdateMu sync.Mutex
var tableBeforeUpdateHooks []TableHook
var tableAfterUpdateMu sync.Mutex
var tableAfterUpdateHooks []TableHook

var tableBeforeDeleteMu sync.Mutex
var tableBeforeDeleteHooks []TableHook
var tableAfterDeleteMu sync.Mutex
var tableAfterDeleteHooks []TableHook

var tableBeforeUpsertMu sync.Mutex
var tableBeforeUpsertHooks []TableHook
var tableAfterUpsertMu sync.Mutex
var tableAfterUpsertHooks []TableHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Table) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tableAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Table) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tableBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Table) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tableAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Table) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tableBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Table) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tableAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Table) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tableBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Table) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tableAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Table) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tableBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Table) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tableAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTableHook registers your hook function for all future operations.
func AddTableHook(hookPoint boil.HookPoint, tableHook TableHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tableAfterSelectMu.Lock()
		tableAfterSelectHooks = append(tableAfterSelectHooks, tableHook)
		tableAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		tableBeforeInsertMu.Lock()
		tableBeforeInsertHooks = append(tableBeforeInsertHooks, tableHook)
		tableBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		tableAfterInsertMu.Lock()
		tableAfterInsertHooks = append(tableAfterInsertHooks, tableHook)
		tableAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		tableBeforeUpdateMu.Lock()
		tableBeforeUpdateHooks = append(tableBeforeUpdateHooks, tableHook)
		tableBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		tableAfterUpdateMu.Lock()
		tableAfterUpdateHooks = append(tableAfterUpdateHooks, tableHook)
		tableAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		tableBeforeDeleteMu.Lock()
		tableBeforeDeleteHooks = append(tableBeforeDeleteHooks, tableHook)
		tableBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		tableAfterDeleteMu.Lock()
		tableAfterDeleteHooks = append(tableAfterDeleteHooks, tableHook)
		tableAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		tableBeforeUpsertMu.Lock()
		tableBeforeUpsertHooks = append(tableBeforeUpsertHooks, tableHook)
		tableBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		tableAfterUpsertMu.Lock()
		tableAfterUpsertHooks = append(tableAfterUpsertHooks, tableHook)
		tableAfterUpsertMu.Unlock()
	}
}

// One returns a single table record from the query.
func (q tableQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Table, error) {
	o := &Table{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for tables")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Table records from the query.
func (q tableQuery) All(ctx context.Context, exec boil.ContextExecutor) (TableSlice, error) {
	var o []*Table

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Table slice")
	}

	if len(tableAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Table records in the query.
func (q tableQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count tables rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tableQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if tables exists")
	}

	return count > 0, nil
}

// Branch pointed to by the foreign key.
func (o *Table) Branch(mods ...qm.QueryMod) branchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BranchID),
	}

	queryMods = append(queryMods, mods...)

	return Branches(queryMods...)
}

// TableNumberDeliveries retrieves all the delivery's Deliveries with an executor via table_number column.
func (o *Table) TableNumberDeliveries(mods ...qm.QueryMod) deliveryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"deliveries\".\"table_number\"=?", o.Number),
	)

	return Deliveries(queryMods...)
}

// TableNumberGuests retrieves all the guest's Guests with an executor via table_number column.
func (o *Table) TableNumberGuests(mods ...qm.QueryMod) guestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"guests\".\"table_number\"=?", o.Number),
	)

	return Guests(queryMods...)
}

// TableNumberOrders retrieves all the order's Orders with an executor via table_number column.
func (o *Table) TableNumberOrders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"table_number\"=?", o.Number),
	)

	return Orders(queryMods...)
}

// LoadBranch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tableL) LoadBranch(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTable interface{}, mods queries.Applicator) error {
	var slice []*Table
	var object *Table

	if singular {
		var ok bool
		object, ok = maybeTable.(*Table)
		if !ok {
			object = new(Table)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTable))
			}
		}
	} else {
		s, ok := maybeTable.(*[]*Table)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTable))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tableR{}
		}
		if !queries.IsNil(object.BranchID) {
			args[object.BranchID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tableR{}
			}

			if !queries.IsNil(obj.BranchID) {
				args[obj.BranchID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`branches`),
		qm.WhereIn(`branches.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Branch")
	}

	var resultSlice []*Branch
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Branch")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for branches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for branches")
	}

	if len(branchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Branch = foreign
		if foreign.R == nil {
			foreign.R = &branchR{}
		}
		foreign.R.Tables = append(foreign.R.Tables, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BranchID, foreign.ID) {
				local.R.Branch = foreign
				if foreign.R == nil {
					foreign.R = &branchR{}
				}
				foreign.R.Tables = append(foreign.R.Tables, local)
				break
			}
		}
	}

	return nil
}

// LoadTableNumberDeliveries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tableL) LoadTableNumberDeliveries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTable interface{}, mods queries.Applicator) error {
	var slice []*Table
	var object *Table

	if singular {
		var ok bool
		object, ok = maybeTable.(*Table)
		if !ok {
			object = new(Table)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTable))
			}
		}
	} else {
		s, ok := maybeTable.(*[]*Table)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTable))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tableR{}
		}
		args[object.Number] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tableR{}
			}
			args[obj.Number] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`deliveries`),
		qm.WhereIn(`deliveries.table_number in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load deliveries")
	}

	var resultSlice []*Delivery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice deliveries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on deliveries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for deliveries")
	}

	if len(deliveryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TableNumberDeliveries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deliveryR{}
			}
			foreign.R.TableNumberTable = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Number, foreign.TableNumber) {
				local.R.TableNumberDeliveries = append(local.R.TableNumberDeliveries, foreign)
				if foreign.R == nil {
					foreign.R = &deliveryR{}
				}
				foreign.R.TableNumberTable = local
				break
			}
		}
	}

	return nil
}

// LoadTableNumberGuests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tableL) LoadTableNumberGuests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTable interface{}, mods queries.Applicator) error {
	var slice []*Table
	var object *Table

	if singular {
		var ok bool
		object, ok = maybeTable.(*Table)
		if !ok {
			object = new(Table)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTable))
			}
		}
	} else {
		s, ok := maybeTable.(*[]*Table)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTable))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tableR{}
		}
		args[object.Number] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tableR{}
			}
			args[obj.Number] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`guests`),
		qm.WhereIn(`guests.table_number in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load guests")
	}

	var resultSlice []*Guest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice guests")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on guests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for guests")
	}

	if len(guestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TableNumberGuests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &guestR{}
			}
			foreign.R.TableNumberTable = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Number, foreign.TableNumber) {
				local.R.TableNumberGuests = append(local.R.TableNumberGuests, foreign)
				if foreign.R == nil {
					foreign.R = &guestR{}
				}
				foreign.R.TableNumberTable = local
				break
			}
		}
	}

	return nil
}

// LoadTableNumberOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tableL) LoadTableNumberOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTable interface{}, mods queries.Applicator) error {
	var slice []*Table
	var object *Table

	if singular {
		var ok bool
		object, ok = maybeTable.(*Table)
		if !ok {
			object = new(Table)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTable))
			}
		}
	} else {
		s, ok := maybeTable.(*[]*Table)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTable))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tableR{}
		}
		args[object.Number] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tableR{}
			}
			args[obj.Number] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.table_number in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TableNumberOrders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.TableNumberTable = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Number, foreign.TableNumber) {
				local.R.TableNumberOrders = append(local.R.TableNumberOrders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.TableNumberTable = local
				break
			}
		}
	}

	return nil
}

// SetBranch of the table to the related item.
// Sets o.R.Branch to related.
// Adds o to related.R.Tables.
func (o *Table) SetBranch(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Branch) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tables\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"branch_id"}),
		strmangle.WhereClause("\"", "\"", 2, tablePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Number}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BranchID, related.ID)
	if o.R == nil {
		o.R = &tableR{
			Branch: related,
		}
	} else {
		o.R.Branch = related
	}

	if related.R == nil {
		related.R = &branchR{
			Tables: TableSlice{o},
		}
	} else {
		related.R.Tables = append(related.R.Tables, o)
	}

	return nil
}

// RemoveBranch relationship.
// Sets o.R.Branch to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Table) RemoveBranch(ctx context.Context, exec boil.ContextExecutor, related *Branch) error {
	var err error

	queries.SetScanner(&o.BranchID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("branch_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Branch = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Tables {
		if queries.Equal(o.BranchID, ri.BranchID) {
			continue
		}

		ln := len(related.R.Tables)
		if ln > 1 && i < ln-1 {
			related.R.Tables[i] = related.R.Tables[ln-1]
		}
		related.R.Tables = related.R.Tables[:ln-1]
		break
	}
	return nil
}

// AddTableNumberDeliveries adds the given related objects to the existing relationships
// of the table, optionally inserting them as new records.
// Appends related to o.R.TableNumberDeliveries.
// Sets related.R.TableNumberTable appropriately.
func (o *Table) AddTableNumberDeliveries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Delivery) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TableNumber, o.Number)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"deliveries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"table_number"}),
				strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
			)
			values := []interface{}{o.Number, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TableNumber, o.Number)
		}
	}

	if o.R == nil {
		o.R = &tableR{
			TableNumberDeliveries: related,
		}
	} else {
		o.R.TableNumberDeliveries = append(o.R.TableNumberDeliveries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deliveryR{
				TableNumberTable: o,
			}
		} else {
			rel.R.TableNumberTable = o
		}
	}
	return nil
}

// SetTableNumberDeliveries removes all previously related items of the
// table replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TableNumberTable's TableNumberDeliveries accordingly.
// Replaces o.R.TableNumberDeliveries with related.
// Sets related.R.TableNumberTable's TableNumberDeliveries accordingly.
func (o *Table) SetTableNumberDeliveries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Delivery) error {
	query := "update \"deliveries\" set \"table_number\" = null where \"table_number\" = $1"
	values := []interface{}{o.Number}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TableNumberDeliveries {
			queries.SetScanner(&rel.TableNumber, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TableNumberTable = nil
		}
		o.R.TableNumberDeliveries = nil
	}

	return o.AddTableNumberDeliveries(ctx, exec, insert, related...)
}

// RemoveTableNumberDeliveries relationships from objects passed in.
// Removes related items from R.TableNumberDeliveries (uses pointer comparison, removal does not keep order)
// Sets related.R.TableNumberTable.
func (o *Table) RemoveTableNumberDeliveries(ctx context.Context, exec boil.ContextExecutor, related ...*Delivery) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TableNumber, nil)
		if rel.R != nil {
			rel.R.TableNumberTable = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("table_number")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TableNumberDeliveries {
			if rel != ri {
				continue
			}

			ln := len(o.R.TableNumberDeliveries)
			if ln > 1 && i < ln-1 {
				o.R.TableNumberDeliveries[i] = o.R.TableNumberDeliveries[ln-1]
			}
			o.R.TableNumberDeliveries = o.R.TableNumberDeliveries[:ln-1]
			break
		}
	}

	return nil
}

// AddTableNumberGuests adds the given related objects to the existing relationships
// of the table, optionally inserting them as new records.
// Appends related to o.R.TableNumberGuests.
// Sets related.R.TableNumberTable appropriately.
func (o *Table) AddTableNumberGuests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Guest) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TableNumber, o.Number)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"guests\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"table_number"}),
				strmangle.WhereClause("\"", "\"", 2, guestPrimaryKeyColumns),
			)
			values := []interface{}{o.Number, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TableNumber, o.Number)
		}
	}

	if o.R == nil {
		o.R = &tableR{
			TableNumberGuests: related,
		}
	} else {
		o.R.TableNumberGuests = append(o.R.TableNumberGuests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &guestR{
				TableNumberTable: o,
			}
		} else {
			rel.R.TableNumberTable = o
		}
	}
	return nil
}

// SetTableNumberGuests removes all previously related items of the
// table replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TableNumberTable's TableNumberGuests accordingly.
// Replaces o.R.TableNumberGuests with related.
// Sets related.R.TableNumberTable's TableNumberGuests accordingly.
func (o *Table) SetTableNumberGuests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Guest) error {
	query := "update \"guests\" set \"table_number\" = null where \"table_number\" = $1"
	values := []interface{}{o.Number}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TableNumberGuests {
			queries.SetScanner(&rel.TableNumber, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TableNumberTable = nil
		}
		o.R.TableNumberGuests = nil
	}

	return o.AddTableNumberGuests(ctx, exec, insert, related...)
}

// RemoveTableNumberGuests relationships from objects passed in.
// Removes related items from R.TableNumberGuests (uses pointer comparison, removal does not keep order)
// Sets related.R.TableNumberTable.
func (o *Table) RemoveTableNumberGuests(ctx context.Context, exec boil.ContextExecutor, related ...*Guest) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TableNumber, nil)
		if rel.R != nil {
			rel.R.TableNumberTable = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("table_number")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TableNumberGuests {
			if rel != ri {
				continue
			}

			ln := len(o.R.TableNumberGuests)
			if ln > 1 && i < ln-1 {
				o.R.TableNumberGuests[i] = o.R.TableNumberGuests[ln-1]
			}
			o.R.TableNumberGuests = o.R.TableNumberGuests[:ln-1]
			break
		}
	}

	return nil
}

// AddTableNumberOrders adds the given related objects to the existing relationships
// of the table, optionally inserting them as new records.
// Appends related to o.R.TableNumberOrders.
// Sets related.R.TableNumberTable appropriately.
func (o *Table) AddTableNumberOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TableNumber, o.Number)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"table_number"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.Number, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TableNumber, o.Number)
		}
	}

	if o.R == nil {
		o.R = &tableR{
			TableNumberOrders: related,
		}
	} else {
		o.R.TableNumberOrders = append(o.R.TableNumberOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				TableNumberTable: o,
			}
		} else {
			rel.R.TableNumberTable = o
		}
	}
	return nil
}

// SetTableNumberOrders removes all previously related items of the
// table replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TableNumberTable's TableNumberOrders accordingly.
// Replaces o.R.TableNumberOrders with related.
// Sets related.R.TableNumberTable's TableNumberOrders accordingly.
func (o *Table) SetTableNumberOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	query := "update \"orders\" set \"table_number\" = null where \"table_number\" = $1"
	values := []interface{}{o.Number}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TableNumberOrders {
			queries.SetScanner(&rel.TableNumber, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TableNumberTable = nil
		}
		o.R.TableNumberOrders = nil
	}

	return o.AddTableNumberOrders(ctx, exec, insert, related...)
}

// RemoveTableNumberOrders relationships from objects passed in.
// Removes related items from R.TableNumberOrders (uses pointer comparison, removal does not keep order)
// Sets related.R.TableNumberTable.
func (o *Table) RemoveTableNumberOrders(ctx context.Context, exec boil.ContextExecutor, related ...*Order) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TableNumber, nil)
		if rel.R != nil {
			rel.R.TableNumberTable = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("table_number")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TableNumberOrders {
			if rel != ri {
				continue
			}

			ln := len(o.R.TableNumberOrders)
			if ln > 1 && i < ln-1 {
				o.R.TableNumberOrders[i] = o.R.TableNumberOrders[ln-1]
			}
			o.R.TableNumberOrders = o.R.TableNumberOrders[:ln-1]
			break
		}
	}

	return nil
}

// Tables retrieves all the records using an executor.
func Tables(mods ...qm.QueryMod) tableQuery {
	mods = append(mods, qm.From("\"tables\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tables\".*"})
	}

	return tableQuery{q}
}

// FindTable retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTable(ctx context.Context, exec boil.ContextExecutor, number int, selectCols ...string) (*Table, error) {
	tableObj := &Table{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tables\" where \"number\"=$1", sel,
	)

	q := queries.Raw(query, number)

	err := q.Bind(ctx, exec, tableObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from tables")
	}

	if err = tableObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tableObj, err
	}

	return tableObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Table) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no tables provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tableColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tableInsertCacheMut.RLock()
	cache, cached := tableInsertCache[key]
	tableInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tableAllColumns,
			tableColumnsWithDefault,
			tableColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tableType, tableMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tableType, tableMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tables\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tables\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into tables")
	}

	if !cached {
		tableInsertCacheMut.Lock()
		tableInsertCache[key] = cache
		tableInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Table.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Table) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tableUpdateCacheMut.RLock()
	cache, cached := tableUpdateCache[key]
	tableUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tableAllColumns,
			tablePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update tables, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tables\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tablePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tableType, tableMapping, append(wl, tablePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update tables row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for tables")
	}

	if !cached {
		tableUpdateCacheMut.Lock()
		tableUpdateCache[key] = cache
		tableUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tableQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for tables")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for tables")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TableSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tables\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tablePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in table slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all table")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Table) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no tables provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tableColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tableUpsertCacheMut.RLock()
	cache, cached := tableUpsertCache[key]
	tableUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			tableAllColumns,
			tableColumnsWithDefault,
			tableColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tableAllColumns,
			tablePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert tables, could not build update column list")
		}

		ret := strmangle.SetComplement(tableAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(tablePrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert tables, could not build conflict column list")
			}

			conflict = make([]string, len(tablePrimaryKeyColumns))
			copy(conflict, tablePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tables\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(tableType, tableMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tableType, tableMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert tables")
	}

	if !cached {
		tableUpsertCacheMut.Lock()
		tableUpsertCache[key] = cache
		tableUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Table record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Table) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Table provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tablePrimaryKeyMapping)
	sql := "DELETE FROM \"tables\" WHERE \"number\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from tables")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for tables")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tableQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no tableQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from tables")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for tables")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TableSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tableBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tables\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tablePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from table slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for tables")
	}

	if len(tableAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Table) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTable(ctx, exec, o.Number)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TableSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TableSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tables\".* FROM \"tables\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tablePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in TableSlice")
	}

	*o = slice

	return nil
}

// TableExists checks if the Table row exists.
func TableExists(ctx context.Context, exec boil.ContextExecutor, number int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tables\" where \"number\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, number)
	}
	row := exec.QueryRowContext(ctx, sql, number)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if tables exists")
	}

	return exists, nil
}

// Exists checks if the Table row exists.
func (o *Table) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TableExists(ctx, exec, o.Number)
}
