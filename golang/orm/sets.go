// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Set is an object representing the database table.
type Set struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	BranchID    null.Int64  `boil:"branch_id" json:"branch_id,omitempty" toml:"branch_id" yaml:"branch_id,omitempty"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	UserID      null.Int64  `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	IsFavourite null.Bool   `boil:"is_favourite" json:"is_favourite,omitempty" toml:"is_favourite" yaml:"is_favourite,omitempty"`
	IsPublic    null.Bool   `boil:"is_public" json:"is_public,omitempty" toml:"is_public" yaml:"is_public,omitempty"`
	Image       null.String `boil:"image" json:"image,omitempty" toml:"image" yaml:"image,omitempty"`
	Price       null.Int    `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`
	CreatedAt   null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt   null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *setR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L setL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SetColumns = struct {
	ID          string
	BranchID    string
	Name        string
	Description string
	UserID      string
	IsFavourite string
	IsPublic    string
	Image       string
	Price       string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	BranchID:    "branch_id",
	Name:        "name",
	Description: "description",
	UserID:      "user_id",
	IsFavourite: "is_favourite",
	IsPublic:    "is_public",
	Image:       "image",
	Price:       "price",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

var SetTableColumns = struct {
	ID          string
	BranchID    string
	Name        string
	Description string
	UserID      string
	IsFavourite string
	IsPublic    string
	Image       string
	Price       string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "sets.id",
	BranchID:    "sets.branch_id",
	Name:        "sets.name",
	Description: "sets.description",
	UserID:      "sets.user_id",
	IsFavourite: "sets.is_favourite",
	IsPublic:    "sets.is_public",
	Image:       "sets.image",
	Price:       "sets.price",
	CreatedAt:   "sets.created_at",
	UpdatedAt:   "sets.updated_at",
	DeletedAt:   "sets.deleted_at",
}

// Generated where

var SetWhere = struct {
	ID          whereHelperint64
	BranchID    whereHelpernull_Int64
	Name        whereHelperstring
	Description whereHelpernull_String
	UserID      whereHelpernull_Int64
	IsFavourite whereHelpernull_Bool
	IsPublic    whereHelpernull_Bool
	Image       whereHelpernull_String
	Price       whereHelpernull_Int
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelperint64{field: "\"sets\".\"id\""},
	BranchID:    whereHelpernull_Int64{field: "\"sets\".\"branch_id\""},
	Name:        whereHelperstring{field: "\"sets\".\"name\""},
	Description: whereHelpernull_String{field: "\"sets\".\"description\""},
	UserID:      whereHelpernull_Int64{field: "\"sets\".\"user_id\""},
	IsFavourite: whereHelpernull_Bool{field: "\"sets\".\"is_favourite\""},
	IsPublic:    whereHelpernull_Bool{field: "\"sets\".\"is_public\""},
	Image:       whereHelpernull_String{field: "\"sets\".\"image\""},
	Price:       whereHelpernull_Int{field: "\"sets\".\"price\""},
	CreatedAt:   whereHelpernull_Time{field: "\"sets\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"sets\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"sets\".\"deleted_at\""},
}

// SetRels is where relationship names are stored.
var SetRels = struct {
	Branch    string
	OrderSets string
	SetDishes string
}{
	Branch:    "Branch",
	OrderSets: "OrderSets",
	SetDishes: "SetDishes",
}

// setR is where relationships are stored.
type setR struct {
	Branch    *Branch       `boil:"Branch" json:"Branch" toml:"Branch" yaml:"Branch"`
	OrderSets OrderSetSlice `boil:"OrderSets" json:"OrderSets" toml:"OrderSets" yaml:"OrderSets"`
	SetDishes SetDishSlice  `boil:"SetDishes" json:"SetDishes" toml:"SetDishes" yaml:"SetDishes"`
}

// NewStruct creates a new relationship struct
func (*setR) NewStruct() *setR {
	return &setR{}
}

func (o *Set) GetBranch() *Branch {
	if o == nil {
		return nil
	}

	return o.R.GetBranch()
}

func (r *setR) GetBranch() *Branch {
	if r == nil {
		return nil
	}

	return r.Branch
}

func (o *Set) GetOrderSets() OrderSetSlice {
	if o == nil {
		return nil
	}

	return o.R.GetOrderSets()
}

func (r *setR) GetOrderSets() OrderSetSlice {
	if r == nil {
		return nil
	}

	return r.OrderSets
}

func (o *Set) GetSetDishes() SetDishSlice {
	if o == nil {
		return nil
	}

	return o.R.GetSetDishes()
}

func (r *setR) GetSetDishes() SetDishSlice {
	if r == nil {
		return nil
	}

	return r.SetDishes
}

// setL is where Load methods for each relationship are stored.
type setL struct{}

var (
	setAllColumns            = []string{"id", "branch_id", "name", "description", "user_id", "is_favourite", "is_public", "image", "price", "created_at", "updated_at", "deleted_at"}
	setColumnsWithoutDefault = []string{"name"}
	setColumnsWithDefault    = []string{"id", "branch_id", "description", "user_id", "is_favourite", "is_public", "image", "price", "created_at", "updated_at", "deleted_at"}
	setPrimaryKeyColumns     = []string{"id"}
	setGeneratedColumns      = []string{}
)

type (
	// SetSlice is an alias for a slice of pointers to Set.
	// This should almost always be used instead of []Set.
	SetSlice []*Set
	// SetHook is the signature for custom Set hook methods
	SetHook func(context.Context, boil.ContextExecutor, *Set) error

	setQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	setType                 = reflect.TypeOf(&Set{})
	setMapping              = queries.MakeStructMapping(setType)
	setPrimaryKeyMapping, _ = queries.BindMapping(setType, setMapping, setPrimaryKeyColumns)
	setInsertCacheMut       sync.RWMutex
	setInsertCache          = make(map[string]insertCache)
	setUpdateCacheMut       sync.RWMutex
	setUpdateCache          = make(map[string]updateCache)
	setUpsertCacheMut       sync.RWMutex
	setUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var setAfterSelectMu sync.Mutex
var setAfterSelectHooks []SetHook

var setBeforeInsertMu sync.Mutex
var setBeforeInsertHooks []SetHook
var setAfterInsertMu sync.Mutex
var setAfterInsertHooks []SetHook

var setBeforeUpdateMu sync.Mutex
var setBeforeUpdateHooks []SetHook
var setAfterUpdateMu sync.Mutex
var setAfterUpdateHooks []SetHook

var setBeforeDeleteMu sync.Mutex
var setBeforeDeleteHooks []SetHook
var setAfterDeleteMu sync.Mutex
var setAfterDeleteHooks []SetHook

var setBeforeUpsertMu sync.Mutex
var setBeforeUpsertHooks []SetHook
var setAfterUpsertMu sync.Mutex
var setAfterUpsertHooks []SetHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Set) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Set) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Set) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Set) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Set) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Set) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Set) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Set) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Set) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSetHook registers your hook function for all future operations.
func AddSetHook(hookPoint boil.HookPoint, setHook SetHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		setAfterSelectMu.Lock()
		setAfterSelectHooks = append(setAfterSelectHooks, setHook)
		setAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		setBeforeInsertMu.Lock()
		setBeforeInsertHooks = append(setBeforeInsertHooks, setHook)
		setBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		setAfterInsertMu.Lock()
		setAfterInsertHooks = append(setAfterInsertHooks, setHook)
		setAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		setBeforeUpdateMu.Lock()
		setBeforeUpdateHooks = append(setBeforeUpdateHooks, setHook)
		setBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		setAfterUpdateMu.Lock()
		setAfterUpdateHooks = append(setAfterUpdateHooks, setHook)
		setAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		setBeforeDeleteMu.Lock()
		setBeforeDeleteHooks = append(setBeforeDeleteHooks, setHook)
		setBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		setAfterDeleteMu.Lock()
		setAfterDeleteHooks = append(setAfterDeleteHooks, setHook)
		setAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		setBeforeUpsertMu.Lock()
		setBeforeUpsertHooks = append(setBeforeUpsertHooks, setHook)
		setBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		setAfterUpsertMu.Lock()
		setAfterUpsertHooks = append(setAfterUpsertHooks, setHook)
		setAfterUpsertMu.Unlock()
	}
}

// One returns a single set record from the query.
func (q setQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Set, error) {
	o := &Set{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for sets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Set records from the query.
func (q setQuery) All(ctx context.Context, exec boil.ContextExecutor) (SetSlice, error) {
	var o []*Set

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Set slice")
	}

	if len(setAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Set records in the query.
func (q setQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count sets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q setQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if sets exists")
	}

	return count > 0, nil
}

// Branch pointed to by the foreign key.
func (o *Set) Branch(mods ...qm.QueryMod) branchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BranchID),
	}

	queryMods = append(queryMods, mods...)

	return Branches(queryMods...)
}

// OrderSets retrieves all the order_set's OrderSets with an executor.
func (o *Set) OrderSets(mods ...qm.QueryMod) orderSetQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_sets\".\"set_id\"=?", o.ID),
	)

	return OrderSets(queryMods...)
}

// SetDishes retrieves all the set_dish's SetDishes with an executor.
func (o *Set) SetDishes(mods ...qm.QueryMod) setDishQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"set_dishes\".\"set_id\"=?", o.ID),
	)

	return SetDishes(queryMods...)
}

// LoadBranch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (setL) LoadBranch(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSet interface{}, mods queries.Applicator) error {
	var slice []*Set
	var object *Set

	if singular {
		var ok bool
		object, ok = maybeSet.(*Set)
		if !ok {
			object = new(Set)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSet))
			}
		}
	} else {
		s, ok := maybeSet.(*[]*Set)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &setR{}
		}
		if !queries.IsNil(object.BranchID) {
			args[object.BranchID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &setR{}
			}

			if !queries.IsNil(obj.BranchID) {
				args[obj.BranchID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`branches`),
		qm.WhereIn(`branches.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Branch")
	}

	var resultSlice []*Branch
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Branch")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for branches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for branches")
	}

	if len(branchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Branch = foreign
		if foreign.R == nil {
			foreign.R = &branchR{}
		}
		foreign.R.Sets = append(foreign.R.Sets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BranchID, foreign.ID) {
				local.R.Branch = foreign
				if foreign.R == nil {
					foreign.R = &branchR{}
				}
				foreign.R.Sets = append(foreign.R.Sets, local)
				break
			}
		}
	}

	return nil
}

// LoadOrderSets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (setL) LoadOrderSets(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSet interface{}, mods queries.Applicator) error {
	var slice []*Set
	var object *Set

	if singular {
		var ok bool
		object, ok = maybeSet.(*Set)
		if !ok {
			object = new(Set)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSet))
			}
		}
	} else {
		s, ok := maybeSet.(*[]*Set)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &setR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &setR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`order_sets`),
		qm.WhereIn(`order_sets.set_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_sets")
	}

	var resultSlice []*OrderSet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_sets")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_sets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_sets")
	}

	if len(orderSetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderSets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderSetR{}
			}
			foreign.R.Set = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SetID {
				local.R.OrderSets = append(local.R.OrderSets, foreign)
				if foreign.R == nil {
					foreign.R = &orderSetR{}
				}
				foreign.R.Set = local
				break
			}
		}
	}

	return nil
}

// LoadSetDishes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (setL) LoadSetDishes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSet interface{}, mods queries.Applicator) error {
	var slice []*Set
	var object *Set

	if singular {
		var ok bool
		object, ok = maybeSet.(*Set)
		if !ok {
			object = new(Set)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSet))
			}
		}
	} else {
		s, ok := maybeSet.(*[]*Set)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &setR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &setR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`set_dishes`),
		qm.WhereIn(`set_dishes.set_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load set_dishes")
	}

	var resultSlice []*SetDish
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice set_dishes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on set_dishes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for set_dishes")
	}

	if len(setDishAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SetDishes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &setDishR{}
			}
			foreign.R.Set = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SetID {
				local.R.SetDishes = append(local.R.SetDishes, foreign)
				if foreign.R == nil {
					foreign.R = &setDishR{}
				}
				foreign.R.Set = local
				break
			}
		}
	}

	return nil
}

// SetBranch of the set to the related item.
// Sets o.R.Branch to related.
// Adds o to related.R.Sets.
func (o *Set) SetBranch(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Branch) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"branch_id"}),
		strmangle.WhereClause("\"", "\"", 2, setPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BranchID, related.ID)
	if o.R == nil {
		o.R = &setR{
			Branch: related,
		}
	} else {
		o.R.Branch = related
	}

	if related.R == nil {
		related.R = &branchR{
			Sets: SetSlice{o},
		}
	} else {
		related.R.Sets = append(related.R.Sets, o)
	}

	return nil
}

// RemoveBranch relationship.
// Sets o.R.Branch to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Set) RemoveBranch(ctx context.Context, exec boil.ContextExecutor, related *Branch) error {
	var err error

	queries.SetScanner(&o.BranchID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("branch_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Branch = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Sets {
		if queries.Equal(o.BranchID, ri.BranchID) {
			continue
		}

		ln := len(related.R.Sets)
		if ln > 1 && i < ln-1 {
			related.R.Sets[i] = related.R.Sets[ln-1]
		}
		related.R.Sets = related.R.Sets[:ln-1]
		break
	}
	return nil
}

// AddOrderSets adds the given related objects to the existing relationships
// of the set, optionally inserting them as new records.
// Appends related to o.R.OrderSets.
// Sets related.R.Set appropriately.
func (o *Set) AddOrderSets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderSet) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SetID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_sets\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"set_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderSetPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.OrderID, rel.SetID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SetID = o.ID
		}
	}

	if o.R == nil {
		o.R = &setR{
			OrderSets: related,
		}
	} else {
		o.R.OrderSets = append(o.R.OrderSets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderSetR{
				Set: o,
			}
		} else {
			rel.R.Set = o
		}
	}
	return nil
}

// AddSetDishes adds the given related objects to the existing relationships
// of the set, optionally inserting them as new records.
// Appends related to o.R.SetDishes.
// Sets related.R.Set appropriately.
func (o *Set) AddSetDishes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SetDish) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SetID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"set_dishes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"set_id"}),
				strmangle.WhereClause("\"", "\"", 2, setDishPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SetID, rel.DishID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SetID = o.ID
		}
	}

	if o.R == nil {
		o.R = &setR{
			SetDishes: related,
		}
	} else {
		o.R.SetDishes = append(o.R.SetDishes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &setDishR{
				Set: o,
			}
		} else {
			rel.R.Set = o
		}
	}
	return nil
}

// Sets retrieves all the records using an executor.
func Sets(mods ...qm.QueryMod) setQuery {
	mods = append(mods, qm.From("\"sets\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sets\".*"})
	}

	return setQuery{q}
}

// FindSet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSet(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Set, error) {
	setObj := &Set{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sets\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, setObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from sets")
	}

	if err = setObj.doAfterSelectHooks(ctx, exec); err != nil {
		return setObj, err
	}

	return setObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Set) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no sets provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(setColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	setInsertCacheMut.RLock()
	cache, cached := setInsertCache[key]
	setInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			setAllColumns,
			setColumnsWithDefault,
			setColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(setType, setMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(setType, setMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into sets")
	}

	if !cached {
		setInsertCacheMut.Lock()
		setInsertCache[key] = cache
		setInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Set.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Set) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	setUpdateCacheMut.RLock()
	cache, cached := setUpdateCache[key]
	setUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			setAllColumns,
			setPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update sets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, setPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(setType, setMapping, append(wl, setPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update sets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for sets")
	}

	if !cached {
		setUpdateCacheMut.Lock()
		setUpdateCache[key] = cache
		setUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q setQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for sets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), setPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, setPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in set slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all set")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Set) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no sets provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(setColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	setUpsertCacheMut.RLock()
	cache, cached := setUpsertCache[key]
	setUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			setAllColumns,
			setColumnsWithDefault,
			setColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			setAllColumns,
			setPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert sets, could not build update column list")
		}

		ret := strmangle.SetComplement(setAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(setPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert sets, could not build conflict column list")
			}

			conflict = make([]string, len(setPrimaryKeyColumns))
			copy(conflict, setPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sets\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(setType, setMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(setType, setMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert sets")
	}

	if !cached {
		setUpsertCacheMut.Lock()
		setUpsertCache[key] = cache
		setUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Set record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Set) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Set provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), setPrimaryKeyMapping)
	sql := "DELETE FROM \"sets\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for sets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q setQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no setQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for sets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(setBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), setPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, setPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from set slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for sets")
	}

	if len(setAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Set) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSet(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), setPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sets\".* FROM \"sets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, setPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in SetSlice")
	}

	*o = slice

	return nil
}

// SetExists checks if the Set row exists.
func SetExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sets\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if sets exists")
	}

	return exists, nil
}

// Exists checks if the Set row exists.
func (o *Set) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SetExists(ctx, exec, o.ID)
}
