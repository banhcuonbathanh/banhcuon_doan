// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDishPriceHistories(t *testing.T) {
	t.Parallel()

	query := DishPriceHistories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDishPriceHistoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishPriceHistory{}
	if err = randomize.Struct(seed, o, dishPriceHistoryDBTypes, true, dishPriceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DishPriceHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDishPriceHistoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishPriceHistory{}
	if err = randomize.Struct(seed, o, dishPriceHistoryDBTypes, true, dishPriceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DishPriceHistories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DishPriceHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDishPriceHistoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishPriceHistory{}
	if err = randomize.Struct(seed, o, dishPriceHistoryDBTypes, true, dishPriceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DishPriceHistorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DishPriceHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDishPriceHistoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishPriceHistory{}
	if err = randomize.Struct(seed, o, dishPriceHistoryDBTypes, true, dishPriceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DishPriceHistoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DishPriceHistory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DishPriceHistoryExists to return true, but got false.")
	}
}

func testDishPriceHistoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishPriceHistory{}
	if err = randomize.Struct(seed, o, dishPriceHistoryDBTypes, true, dishPriceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dishPriceHistoryFound, err := FindDishPriceHistory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dishPriceHistoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDishPriceHistoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishPriceHistory{}
	if err = randomize.Struct(seed, o, dishPriceHistoryDBTypes, true, dishPriceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DishPriceHistories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDishPriceHistoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishPriceHistory{}
	if err = randomize.Struct(seed, o, dishPriceHistoryDBTypes, true, dishPriceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DishPriceHistories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDishPriceHistoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dishPriceHistoryOne := &DishPriceHistory{}
	dishPriceHistoryTwo := &DishPriceHistory{}
	if err = randomize.Struct(seed, dishPriceHistoryOne, dishPriceHistoryDBTypes, false, dishPriceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, dishPriceHistoryTwo, dishPriceHistoryDBTypes, false, dishPriceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dishPriceHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dishPriceHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DishPriceHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDishPriceHistoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dishPriceHistoryOne := &DishPriceHistory{}
	dishPriceHistoryTwo := &DishPriceHistory{}
	if err = randomize.Struct(seed, dishPriceHistoryOne, dishPriceHistoryDBTypes, false, dishPriceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, dishPriceHistoryTwo, dishPriceHistoryDBTypes, false, dishPriceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dishPriceHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dishPriceHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DishPriceHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dishPriceHistoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DishPriceHistory) error {
	*o = DishPriceHistory{}
	return nil
}

func dishPriceHistoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DishPriceHistory) error {
	*o = DishPriceHistory{}
	return nil
}

func dishPriceHistoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DishPriceHistory) error {
	*o = DishPriceHistory{}
	return nil
}

func dishPriceHistoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DishPriceHistory) error {
	*o = DishPriceHistory{}
	return nil
}

func dishPriceHistoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DishPriceHistory) error {
	*o = DishPriceHistory{}
	return nil
}

func dishPriceHistoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DishPriceHistory) error {
	*o = DishPriceHistory{}
	return nil
}

func dishPriceHistoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DishPriceHistory) error {
	*o = DishPriceHistory{}
	return nil
}

func dishPriceHistoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DishPriceHistory) error {
	*o = DishPriceHistory{}
	return nil
}

func dishPriceHistoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DishPriceHistory) error {
	*o = DishPriceHistory{}
	return nil
}

func testDishPriceHistoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DishPriceHistory{}
	o := &DishPriceHistory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dishPriceHistoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory object: %s", err)
	}

	AddDishPriceHistoryHook(boil.BeforeInsertHook, dishPriceHistoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dishPriceHistoryBeforeInsertHooks = []DishPriceHistoryHook{}

	AddDishPriceHistoryHook(boil.AfterInsertHook, dishPriceHistoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dishPriceHistoryAfterInsertHooks = []DishPriceHistoryHook{}

	AddDishPriceHistoryHook(boil.AfterSelectHook, dishPriceHistoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dishPriceHistoryAfterSelectHooks = []DishPriceHistoryHook{}

	AddDishPriceHistoryHook(boil.BeforeUpdateHook, dishPriceHistoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dishPriceHistoryBeforeUpdateHooks = []DishPriceHistoryHook{}

	AddDishPriceHistoryHook(boil.AfterUpdateHook, dishPriceHistoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dishPriceHistoryAfterUpdateHooks = []DishPriceHistoryHook{}

	AddDishPriceHistoryHook(boil.BeforeDeleteHook, dishPriceHistoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dishPriceHistoryBeforeDeleteHooks = []DishPriceHistoryHook{}

	AddDishPriceHistoryHook(boil.AfterDeleteHook, dishPriceHistoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dishPriceHistoryAfterDeleteHooks = []DishPriceHistoryHook{}

	AddDishPriceHistoryHook(boil.BeforeUpsertHook, dishPriceHistoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dishPriceHistoryBeforeUpsertHooks = []DishPriceHistoryHook{}

	AddDishPriceHistoryHook(boil.AfterUpsertHook, dishPriceHistoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dishPriceHistoryAfterUpsertHooks = []DishPriceHistoryHook{}
}

func testDishPriceHistoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishPriceHistory{}
	if err = randomize.Struct(seed, o, dishPriceHistoryDBTypes, true, dishPriceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DishPriceHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDishPriceHistoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishPriceHistory{}
	if err = randomize.Struct(seed, o, dishPriceHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(dishPriceHistoryPrimaryKeyColumns, dishPriceHistoryColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := DishPriceHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDishPriceHistoryToOneDishUsingDish(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DishPriceHistory
	var foreign Dish

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dishPriceHistoryDBTypes, true, dishPriceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dishDBTypes, false, dishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dish struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DishID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Dish().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddDishHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Dish) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DishPriceHistorySlice{&local}
	if err = local.L.LoadDish(ctx, tx, false, (*[]*DishPriceHistory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Dish == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Dish = nil
	if err = local.L.LoadDish(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Dish == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDishPriceHistoryToOneSetOpDishUsingDish(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DishPriceHistory
	var b, c Dish

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dishPriceHistoryDBTypes, false, strmangle.SetComplement(dishPriceHistoryPrimaryKeyColumns, dishPriceHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dishDBTypes, false, strmangle.SetComplement(dishPrimaryKeyColumns, dishColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dishDBTypes, false, strmangle.SetComplement(dishPrimaryKeyColumns, dishColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Dish{&b, &c} {
		err = a.SetDish(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Dish != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DishPriceHistories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DishID, x.ID) {
			t.Error("foreign key was wrong value", a.DishID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DishID))
		reflect.Indirect(reflect.ValueOf(&a.DishID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DishID, x.ID) {
			t.Error("foreign key was wrong value", a.DishID, x.ID)
		}
	}
}

func testDishPriceHistoryToOneRemoveOpDishUsingDish(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DishPriceHistory
	var b Dish

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dishPriceHistoryDBTypes, false, strmangle.SetComplement(dishPriceHistoryPrimaryKeyColumns, dishPriceHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dishDBTypes, false, strmangle.SetComplement(dishPrimaryKeyColumns, dishColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDish(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDish(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Dish().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Dish != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.DishID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.DishPriceHistories) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDishPriceHistoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishPriceHistory{}
	if err = randomize.Struct(seed, o, dishPriceHistoryDBTypes, true, dishPriceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDishPriceHistoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishPriceHistory{}
	if err = randomize.Struct(seed, o, dishPriceHistoryDBTypes, true, dishPriceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DishPriceHistorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDishPriceHistoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DishPriceHistory{}
	if err = randomize.Struct(seed, o, dishPriceHistoryDBTypes, true, dishPriceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DishPriceHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dishPriceHistoryDBTypes = map[string]string{`ID`: `bigint`, `DishID`: `bigint`, `Price`: `integer`, `CustomerCount`: `integer`, `StartTime`: `timestamp with time zone`, `EndTime`: `timestamp with time zone`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`}
	_                       = bytes.MinRead
)

func testDishPriceHistoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dishPriceHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dishPriceHistoryAllColumns) == len(dishPriceHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DishPriceHistory{}
	if err = randomize.Struct(seed, o, dishPriceHistoryDBTypes, true, dishPriceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DishPriceHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dishPriceHistoryDBTypes, true, dishPriceHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDishPriceHistoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dishPriceHistoryAllColumns) == len(dishPriceHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DishPriceHistory{}
	if err = randomize.Struct(seed, o, dishPriceHistoryDBTypes, true, dishPriceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DishPriceHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dishPriceHistoryDBTypes, true, dishPriceHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dishPriceHistoryAllColumns, dishPriceHistoryPrimaryKeyColumns) {
		fields = dishPriceHistoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			dishPriceHistoryAllColumns,
			dishPriceHistoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DishPriceHistorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDishPriceHistoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(dishPriceHistoryAllColumns) == len(dishPriceHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DishPriceHistory{}
	if err = randomize.Struct(seed, &o, dishPriceHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DishPriceHistory: %s", err)
	}

	count, err := DishPriceHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dishPriceHistoryDBTypes, false, dishPriceHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DishPriceHistory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DishPriceHistory: %s", err)
	}

	count, err = DishPriceHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
