// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBranches(t *testing.T) {
	t.Parallel()

	query := Branches()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBranchesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Branch{}
	if err = randomize.Struct(seed, o, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Branches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBranchesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Branch{}
	if err = randomize.Struct(seed, o, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Branches().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Branches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBranchesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Branch{}
	if err = randomize.Struct(seed, o, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BranchSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Branches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBranchesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Branch{}
	if err = randomize.Struct(seed, o, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BranchExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Branch exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BranchExists to return true, but got false.")
	}
}

func testBranchesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Branch{}
	if err = randomize.Struct(seed, o, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	branchFound, err := FindBranch(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if branchFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBranchesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Branch{}
	if err = randomize.Struct(seed, o, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Branches().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBranchesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Branch{}
	if err = randomize.Struct(seed, o, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Branches().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBranchesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	branchOne := &Branch{}
	branchTwo := &Branch{}
	if err = randomize.Struct(seed, branchOne, branchDBTypes, false, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}
	if err = randomize.Struct(seed, branchTwo, branchDBTypes, false, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = branchOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = branchTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Branches().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBranchesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	branchOne := &Branch{}
	branchTwo := &Branch{}
	if err = randomize.Struct(seed, branchOne, branchDBTypes, false, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}
	if err = randomize.Struct(seed, branchTwo, branchDBTypes, false, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = branchOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = branchTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Branches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func branchBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Branch) error {
	*o = Branch{}
	return nil
}

func branchAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Branch) error {
	*o = Branch{}
	return nil
}

func branchAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Branch) error {
	*o = Branch{}
	return nil
}

func branchBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Branch) error {
	*o = Branch{}
	return nil
}

func branchAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Branch) error {
	*o = Branch{}
	return nil
}

func branchBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Branch) error {
	*o = Branch{}
	return nil
}

func branchAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Branch) error {
	*o = Branch{}
	return nil
}

func branchBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Branch) error {
	*o = Branch{}
	return nil
}

func branchAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Branch) error {
	*o = Branch{}
	return nil
}

func testBranchesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Branch{}
	o := &Branch{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, branchDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Branch object: %s", err)
	}

	AddBranchHook(boil.BeforeInsertHook, branchBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	branchBeforeInsertHooks = []BranchHook{}

	AddBranchHook(boil.AfterInsertHook, branchAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	branchAfterInsertHooks = []BranchHook{}

	AddBranchHook(boil.AfterSelectHook, branchAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	branchAfterSelectHooks = []BranchHook{}

	AddBranchHook(boil.BeforeUpdateHook, branchBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	branchBeforeUpdateHooks = []BranchHook{}

	AddBranchHook(boil.AfterUpdateHook, branchAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	branchAfterUpdateHooks = []BranchHook{}

	AddBranchHook(boil.BeforeDeleteHook, branchBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	branchBeforeDeleteHooks = []BranchHook{}

	AddBranchHook(boil.AfterDeleteHook, branchAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	branchAfterDeleteHooks = []BranchHook{}

	AddBranchHook(boil.BeforeUpsertHook, branchBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	branchBeforeUpsertHooks = []BranchHook{}

	AddBranchHook(boil.AfterUpsertHook, branchAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	branchAfterUpsertHooks = []BranchHook{}
}

func testBranchesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Branch{}
	if err = randomize.Struct(seed, o, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Branches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBranchesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Branch{}
	if err = randomize.Struct(seed, o, branchDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Branches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBranchToManyAccounts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, accountDBTypes, false, accountColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, accountDBTypes, false, accountColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.BranchID, a.ID)
	queries.Assign(&c.BranchID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Accounts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.BranchID, b.BranchID) {
			bFound = true
		}
		if queries.Equal(v.BranchID, c.BranchID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BranchSlice{&a}
	if err = a.L.LoadAccounts(ctx, tx, false, (*[]*Branch)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Accounts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Accounts = nil
	if err = a.L.LoadAccounts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Accounts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testBranchToManyDeliveries(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c Delivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, deliveryDBTypes, false, deliveryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, deliveryDBTypes, false, deliveryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.BranchID, a.ID)
	queries.Assign(&c.BranchID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Deliveries().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.BranchID, b.BranchID) {
			bFound = true
		}
		if queries.Equal(v.BranchID, c.BranchID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BranchSlice{&a}
	if err = a.L.LoadDeliveries(ctx, tx, false, (*[]*Branch)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Deliveries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Deliveries = nil
	if err = a.L.LoadDeliveries(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Deliveries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testBranchToManyDishes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c Dish

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dishDBTypes, false, dishColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dishDBTypes, false, dishColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.BranchID, a.ID)
	queries.Assign(&c.BranchID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Dishes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.BranchID, b.BranchID) {
			bFound = true
		}
		if queries.Equal(v.BranchID, c.BranchID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BranchSlice{&a}
	if err = a.L.LoadDishes(ctx, tx, false, (*[]*Branch)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Dishes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Dishes = nil
	if err = a.L.LoadDishes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Dishes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testBranchToManyGuests(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c Guest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, guestDBTypes, false, guestColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, guestDBTypes, false, guestColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.BranchID, a.ID)
	queries.Assign(&c.BranchID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Guests().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.BranchID, b.BranchID) {
			bFound = true
		}
		if queries.Equal(v.BranchID, c.BranchID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BranchSlice{&a}
	if err = a.L.LoadGuests(ctx, tx, false, (*[]*Branch)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Guests); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Guests = nil
	if err = a.L.LoadGuests(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Guests); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testBranchToManyOrders(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.BranchID, a.ID)
	queries.Assign(&c.BranchID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Orders().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.BranchID, b.BranchID) {
			bFound = true
		}
		if queries.Equal(v.BranchID, c.BranchID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BranchSlice{&a}
	if err = a.L.LoadOrders(ctx, tx, false, (*[]*Branch)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Orders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Orders = nil
	if err = a.L.LoadOrders(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Orders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testBranchToManyRegulations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c Regulation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, regulationDBTypes, false, regulationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, regulationDBTypes, false, regulationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.BranchID, a.ID)
	queries.Assign(&c.BranchID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Regulations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.BranchID, b.BranchID) {
			bFound = true
		}
		if queries.Equal(v.BranchID, c.BranchID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BranchSlice{&a}
	if err = a.L.LoadRegulations(ctx, tx, false, (*[]*Branch)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Regulations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Regulations = nil
	if err = a.L.LoadRegulations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Regulations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testBranchToManySets(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c Set

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, setDBTypes, false, setColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, setDBTypes, false, setColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.BranchID, a.ID)
	queries.Assign(&c.BranchID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Sets().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.BranchID, b.BranchID) {
			bFound = true
		}
		if queries.Equal(v.BranchID, c.BranchID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BranchSlice{&a}
	if err = a.L.LoadSets(ctx, tx, false, (*[]*Branch)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Sets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Sets = nil
	if err = a.L.LoadSets(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Sets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testBranchToManyTables(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c Table

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tableDBTypes, false, tableColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tableDBTypes, false, tableColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.BranchID, a.ID)
	queries.Assign(&c.BranchID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Tables().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.BranchID, b.BranchID) {
			bFound = true
		}
		if queries.Equal(v.BranchID, c.BranchID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BranchSlice{&a}
	if err = a.L.LoadTables(ctx, tx, false, (*[]*Branch)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tables); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Tables = nil
	if err = a.L.LoadTables(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tables); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testBranchToManyAddOpAccounts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Account{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Account{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAccounts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.BranchID) {
			t.Error("foreign key was wrong value", a.ID, first.BranchID)
		}
		if !queries.Equal(a.ID, second.BranchID) {
			t.Error("foreign key was wrong value", a.ID, second.BranchID)
		}

		if first.R.Branch != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Branch != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Accounts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Accounts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Accounts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testBranchToManySetOpAccounts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Account{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAccounts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Accounts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAccounts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Accounts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BranchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BranchID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.BranchID) {
		t.Error("foreign key was wrong value", a.ID, d.BranchID)
	}
	if !queries.Equal(a.ID, e.BranchID) {
		t.Error("foreign key was wrong value", a.ID, e.BranchID)
	}

	if b.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Branch != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Branch != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Accounts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Accounts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testBranchToManyRemoveOpAccounts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Account{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAccounts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Accounts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAccounts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Accounts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BranchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BranchID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Branch != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Branch != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Accounts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Accounts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Accounts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testBranchToManyAddOpDeliveries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Delivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Delivery{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, deliveryDBTypes, false, strmangle.SetComplement(deliveryPrimaryKeyColumns, deliveryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Delivery{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDeliveries(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.BranchID) {
			t.Error("foreign key was wrong value", a.ID, first.BranchID)
		}
		if !queries.Equal(a.ID, second.BranchID) {
			t.Error("foreign key was wrong value", a.ID, second.BranchID)
		}

		if first.R.Branch != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Branch != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Deliveries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Deliveries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Deliveries().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testBranchToManySetOpDeliveries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Delivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Delivery{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, deliveryDBTypes, false, strmangle.SetComplement(deliveryPrimaryKeyColumns, deliveryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDeliveries(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Deliveries().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDeliveries(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Deliveries().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BranchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BranchID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.BranchID) {
		t.Error("foreign key was wrong value", a.ID, d.BranchID)
	}
	if !queries.Equal(a.ID, e.BranchID) {
		t.Error("foreign key was wrong value", a.ID, e.BranchID)
	}

	if b.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Branch != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Branch != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Deliveries[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Deliveries[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testBranchToManyRemoveOpDeliveries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Delivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Delivery{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, deliveryDBTypes, false, strmangle.SetComplement(deliveryPrimaryKeyColumns, deliveryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDeliveries(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Deliveries().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDeliveries(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Deliveries().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BranchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BranchID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Branch != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Branch != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Deliveries) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Deliveries[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Deliveries[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testBranchToManyAddOpDishes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Dish

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dish{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dishDBTypes, false, strmangle.SetComplement(dishPrimaryKeyColumns, dishColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Dish{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDishes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.BranchID) {
			t.Error("foreign key was wrong value", a.ID, first.BranchID)
		}
		if !queries.Equal(a.ID, second.BranchID) {
			t.Error("foreign key was wrong value", a.ID, second.BranchID)
		}

		if first.R.Branch != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Branch != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Dishes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Dishes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Dishes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testBranchToManySetOpDishes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Dish

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dish{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dishDBTypes, false, strmangle.SetComplement(dishPrimaryKeyColumns, dishColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDishes(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Dishes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDishes(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Dishes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BranchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BranchID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.BranchID) {
		t.Error("foreign key was wrong value", a.ID, d.BranchID)
	}
	if !queries.Equal(a.ID, e.BranchID) {
		t.Error("foreign key was wrong value", a.ID, e.BranchID)
	}

	if b.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Branch != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Branch != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Dishes[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Dishes[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testBranchToManyRemoveOpDishes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Dish

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dish{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dishDBTypes, false, strmangle.SetComplement(dishPrimaryKeyColumns, dishColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDishes(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Dishes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDishes(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Dishes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BranchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BranchID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Branch != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Branch != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Dishes) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Dishes[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Dishes[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testBranchToManyAddOpGuests(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Guest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Guest{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, guestDBTypes, false, strmangle.SetComplement(guestPrimaryKeyColumns, guestColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Guest{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGuests(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.BranchID) {
			t.Error("foreign key was wrong value", a.ID, first.BranchID)
		}
		if !queries.Equal(a.ID, second.BranchID) {
			t.Error("foreign key was wrong value", a.ID, second.BranchID)
		}

		if first.R.Branch != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Branch != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Guests[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Guests[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Guests().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testBranchToManySetOpGuests(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Guest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Guest{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, guestDBTypes, false, strmangle.SetComplement(guestPrimaryKeyColumns, guestColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetGuests(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Guests().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetGuests(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Guests().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BranchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BranchID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.BranchID) {
		t.Error("foreign key was wrong value", a.ID, d.BranchID)
	}
	if !queries.Equal(a.ID, e.BranchID) {
		t.Error("foreign key was wrong value", a.ID, e.BranchID)
	}

	if b.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Branch != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Branch != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Guests[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Guests[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testBranchToManyRemoveOpGuests(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Guest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Guest{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, guestDBTypes, false, strmangle.SetComplement(guestPrimaryKeyColumns, guestColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddGuests(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Guests().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveGuests(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Guests().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BranchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BranchID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Branch != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Branch != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Guests) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Guests[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Guests[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testBranchToManyAddOpOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Order{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrders(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.BranchID) {
			t.Error("foreign key was wrong value", a.ID, first.BranchID)
		}
		if !queries.Equal(a.ID, second.BranchID) {
			t.Error("foreign key was wrong value", a.ID, second.BranchID)
		}

		if first.R.Branch != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Branch != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Orders[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Orders[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Orders().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testBranchToManySetOpOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOrders(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Orders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOrders(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Orders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BranchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BranchID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.BranchID) {
		t.Error("foreign key was wrong value", a.ID, d.BranchID)
	}
	if !queries.Equal(a.ID, e.BranchID) {
		t.Error("foreign key was wrong value", a.ID, e.BranchID)
	}

	if b.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Branch != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Branch != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Orders[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Orders[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testBranchToManyRemoveOpOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOrders(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Orders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOrders(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Orders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BranchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BranchID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Branch != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Branch != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Orders) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Orders[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Orders[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testBranchToManyAddOpRegulations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Regulation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Regulation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, regulationDBTypes, false, strmangle.SetComplement(regulationPrimaryKeyColumns, regulationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Regulation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRegulations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.BranchID) {
			t.Error("foreign key was wrong value", a.ID, first.BranchID)
		}
		if !queries.Equal(a.ID, second.BranchID) {
			t.Error("foreign key was wrong value", a.ID, second.BranchID)
		}

		if first.R.Branch != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Branch != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Regulations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Regulations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Regulations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testBranchToManySetOpRegulations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Regulation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Regulation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, regulationDBTypes, false, strmangle.SetComplement(regulationPrimaryKeyColumns, regulationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetRegulations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Regulations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRegulations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Regulations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BranchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BranchID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.BranchID) {
		t.Error("foreign key was wrong value", a.ID, d.BranchID)
	}
	if !queries.Equal(a.ID, e.BranchID) {
		t.Error("foreign key was wrong value", a.ID, e.BranchID)
	}

	if b.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Branch != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Branch != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Regulations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Regulations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testBranchToManyRemoveOpRegulations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Regulation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Regulation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, regulationDBTypes, false, strmangle.SetComplement(regulationPrimaryKeyColumns, regulationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddRegulations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Regulations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRegulations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Regulations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BranchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BranchID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Branch != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Branch != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Regulations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Regulations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Regulations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testBranchToManyAddOpSets(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Set

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Set{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, setDBTypes, false, strmangle.SetComplement(setPrimaryKeyColumns, setColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Set{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSets(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.BranchID) {
			t.Error("foreign key was wrong value", a.ID, first.BranchID)
		}
		if !queries.Equal(a.ID, second.BranchID) {
			t.Error("foreign key was wrong value", a.ID, second.BranchID)
		}

		if first.R.Branch != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Branch != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Sets[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Sets[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Sets().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testBranchToManySetOpSets(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Set

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Set{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, setDBTypes, false, strmangle.SetComplement(setPrimaryKeyColumns, setColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSets(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Sets().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSets(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Sets().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BranchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BranchID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.BranchID) {
		t.Error("foreign key was wrong value", a.ID, d.BranchID)
	}
	if !queries.Equal(a.ID, e.BranchID) {
		t.Error("foreign key was wrong value", a.ID, e.BranchID)
	}

	if b.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Branch != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Branch != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Sets[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Sets[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testBranchToManyRemoveOpSets(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Set

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Set{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, setDBTypes, false, strmangle.SetComplement(setPrimaryKeyColumns, setColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSets(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Sets().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSets(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Sets().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BranchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BranchID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Branch != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Branch != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Sets) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Sets[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Sets[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testBranchToManyAddOpTables(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Table

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Table{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tableDBTypes, false, strmangle.SetComplement(tablePrimaryKeyColumns, tableColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Table{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTables(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.BranchID) {
			t.Error("foreign key was wrong value", a.ID, first.BranchID)
		}
		if !queries.Equal(a.ID, second.BranchID) {
			t.Error("foreign key was wrong value", a.ID, second.BranchID)
		}

		if first.R.Branch != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Branch != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Tables[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Tables[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Tables().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testBranchToManySetOpTables(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Table

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Table{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tableDBTypes, false, strmangle.SetComplement(tablePrimaryKeyColumns, tableColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTables(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Tables().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTables(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Tables().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BranchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BranchID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.BranchID) {
		t.Error("foreign key was wrong value", a.ID, d.BranchID)
	}
	if !queries.Equal(a.ID, e.BranchID) {
		t.Error("foreign key was wrong value", a.ID, e.BranchID)
	}

	if b.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Branch != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Branch != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Tables[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Tables[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testBranchToManyRemoveOpTables(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Branch
	var b, c, d, e Table

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Table{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tableDBTypes, false, strmangle.SetComplement(tablePrimaryKeyColumns, tableColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTables(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Tables().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTables(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Tables().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BranchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BranchID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Branch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Branch != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Branch != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Tables) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Tables[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Tables[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testBranchesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Branch{}
	if err = randomize.Struct(seed, o, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBranchesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Branch{}
	if err = randomize.Struct(seed, o, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BranchSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBranchesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Branch{}
	if err = randomize.Struct(seed, o, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Branches().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	branchDBTypes = map[string]string{`ID`: `bigint`, `Name`: `character varying`, `Address`: `character varying`, `Phone`: `character varying`, `ManagerID`: `bigint`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`}
	_             = bytes.MinRead
)

func testBranchesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(branchPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(branchAllColumns) == len(branchPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Branch{}
	if err = randomize.Struct(seed, o, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Branches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, branchDBTypes, true, branchPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBranchesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(branchAllColumns) == len(branchPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Branch{}
	if err = randomize.Struct(seed, o, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Branches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, branchDBTypes, true, branchPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(branchAllColumns, branchPrimaryKeyColumns) {
		fields = branchAllColumns
	} else {
		fields = strmangle.SetComplement(
			branchAllColumns,
			branchPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BranchSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBranchesUpsert(t *testing.T) {
	t.Parallel()

	if len(branchAllColumns) == len(branchPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Branch{}
	if err = randomize.Struct(seed, &o, branchDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Branch: %s", err)
	}

	count, err := Branches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, branchDBTypes, false, branchPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Branch: %s", err)
	}

	count, err = Branches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
