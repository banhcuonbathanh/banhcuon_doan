// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// SetDish is an object representing the database table.
type SetDish struct {
	SetID    int64 `boil:"set_id" json:"set_id" toml:"set_id" yaml:"set_id"`
	DishID   int64 `boil:"dish_id" json:"dish_id" toml:"dish_id" yaml:"dish_id"`
	Quantity int   `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`

	R *setDishR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L setDishL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SetDishColumns = struct {
	SetID    string
	DishID   string
	Quantity string
}{
	SetID:    "set_id",
	DishID:   "dish_id",
	Quantity: "quantity",
}

var SetDishTableColumns = struct {
	SetID    string
	DishID   string
	Quantity string
}{
	SetID:    "set_dishes.set_id",
	DishID:   "set_dishes.dish_id",
	Quantity: "set_dishes.quantity",
}

// Generated where

var SetDishWhere = struct {
	SetID    whereHelperint64
	DishID   whereHelperint64
	Quantity whereHelperint
}{
	SetID:    whereHelperint64{field: "\"set_dishes\".\"set_id\""},
	DishID:   whereHelperint64{field: "\"set_dishes\".\"dish_id\""},
	Quantity: whereHelperint{field: "\"set_dishes\".\"quantity\""},
}

// SetDishRels is where relationship names are stored.
var SetDishRels = struct {
	Dish string
	Set  string
}{
	Dish: "Dish",
	Set:  "Set",
}

// setDishR is where relationships are stored.
type setDishR struct {
	Dish *Dish `boil:"Dish" json:"Dish" toml:"Dish" yaml:"Dish"`
	Set  *Set  `boil:"Set" json:"Set" toml:"Set" yaml:"Set"`
}

// NewStruct creates a new relationship struct
func (*setDishR) NewStruct() *setDishR {
	return &setDishR{}
}

func (o *SetDish) GetDish() *Dish {
	if o == nil {
		return nil
	}

	return o.R.GetDish()
}

func (r *setDishR) GetDish() *Dish {
	if r == nil {
		return nil
	}

	return r.Dish
}

func (o *SetDish) GetSet() *Set {
	if o == nil {
		return nil
	}

	return o.R.GetSet()
}

func (r *setDishR) GetSet() *Set {
	if r == nil {
		return nil
	}

	return r.Set
}

// setDishL is where Load methods for each relationship are stored.
type setDishL struct{}

var (
	setDishAllColumns            = []string{"set_id", "dish_id", "quantity"}
	setDishColumnsWithoutDefault = []string{"set_id", "dish_id", "quantity"}
	setDishColumnsWithDefault    = []string{}
	setDishPrimaryKeyColumns     = []string{"set_id", "dish_id"}
	setDishGeneratedColumns      = []string{}
)

type (
	// SetDishSlice is an alias for a slice of pointers to SetDish.
	// This should almost always be used instead of []SetDish.
	SetDishSlice []*SetDish
	// SetDishHook is the signature for custom SetDish hook methods
	SetDishHook func(context.Context, boil.ContextExecutor, *SetDish) error

	setDishQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	setDishType                 = reflect.TypeOf(&SetDish{})
	setDishMapping              = queries.MakeStructMapping(setDishType)
	setDishPrimaryKeyMapping, _ = queries.BindMapping(setDishType, setDishMapping, setDishPrimaryKeyColumns)
	setDishInsertCacheMut       sync.RWMutex
	setDishInsertCache          = make(map[string]insertCache)
	setDishUpdateCacheMut       sync.RWMutex
	setDishUpdateCache          = make(map[string]updateCache)
	setDishUpsertCacheMut       sync.RWMutex
	setDishUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var setDishAfterSelectMu sync.Mutex
var setDishAfterSelectHooks []SetDishHook

var setDishBeforeInsertMu sync.Mutex
var setDishBeforeInsertHooks []SetDishHook
var setDishAfterInsertMu sync.Mutex
var setDishAfterInsertHooks []SetDishHook

var setDishBeforeUpdateMu sync.Mutex
var setDishBeforeUpdateHooks []SetDishHook
var setDishAfterUpdateMu sync.Mutex
var setDishAfterUpdateHooks []SetDishHook

var setDishBeforeDeleteMu sync.Mutex
var setDishBeforeDeleteHooks []SetDishHook
var setDishAfterDeleteMu sync.Mutex
var setDishAfterDeleteHooks []SetDishHook

var setDishBeforeUpsertMu sync.Mutex
var setDishBeforeUpsertHooks []SetDishHook
var setDishAfterUpsertMu sync.Mutex
var setDishAfterUpsertHooks []SetDishHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SetDish) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setDishAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SetDish) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setDishBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SetDish) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setDishAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SetDish) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setDishBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SetDish) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setDishAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SetDish) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setDishBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SetDish) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setDishAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SetDish) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setDishBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SetDish) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range setDishAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSetDishHook registers your hook function for all future operations.
func AddSetDishHook(hookPoint boil.HookPoint, setDishHook SetDishHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		setDishAfterSelectMu.Lock()
		setDishAfterSelectHooks = append(setDishAfterSelectHooks, setDishHook)
		setDishAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		setDishBeforeInsertMu.Lock()
		setDishBeforeInsertHooks = append(setDishBeforeInsertHooks, setDishHook)
		setDishBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		setDishAfterInsertMu.Lock()
		setDishAfterInsertHooks = append(setDishAfterInsertHooks, setDishHook)
		setDishAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		setDishBeforeUpdateMu.Lock()
		setDishBeforeUpdateHooks = append(setDishBeforeUpdateHooks, setDishHook)
		setDishBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		setDishAfterUpdateMu.Lock()
		setDishAfterUpdateHooks = append(setDishAfterUpdateHooks, setDishHook)
		setDishAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		setDishBeforeDeleteMu.Lock()
		setDishBeforeDeleteHooks = append(setDishBeforeDeleteHooks, setDishHook)
		setDishBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		setDishAfterDeleteMu.Lock()
		setDishAfterDeleteHooks = append(setDishAfterDeleteHooks, setDishHook)
		setDishAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		setDishBeforeUpsertMu.Lock()
		setDishBeforeUpsertHooks = append(setDishBeforeUpsertHooks, setDishHook)
		setDishBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		setDishAfterUpsertMu.Lock()
		setDishAfterUpsertHooks = append(setDishAfterUpsertHooks, setDishHook)
		setDishAfterUpsertMu.Unlock()
	}
}

// One returns a single setDish record from the query.
func (q setDishQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SetDish, error) {
	o := &SetDish{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for set_dishes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SetDish records from the query.
func (q setDishQuery) All(ctx context.Context, exec boil.ContextExecutor) (SetDishSlice, error) {
	var o []*SetDish

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to SetDish slice")
	}

	if len(setDishAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SetDish records in the query.
func (q setDishQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count set_dishes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q setDishQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if set_dishes exists")
	}

	return count > 0, nil
}

// Dish pointed to by the foreign key.
func (o *SetDish) Dish(mods ...qm.QueryMod) dishQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DishID),
	}

	queryMods = append(queryMods, mods...)

	return Dishes(queryMods...)
}

// Set pointed to by the foreign key.
func (o *SetDish) Set(mods ...qm.QueryMod) setQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SetID),
	}

	queryMods = append(queryMods, mods...)

	return Sets(queryMods...)
}

// LoadDish allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (setDishL) LoadDish(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSetDish interface{}, mods queries.Applicator) error {
	var slice []*SetDish
	var object *SetDish

	if singular {
		var ok bool
		object, ok = maybeSetDish.(*SetDish)
		if !ok {
			object = new(SetDish)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSetDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSetDish))
			}
		}
	} else {
		s, ok := maybeSetDish.(*[]*SetDish)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSetDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSetDish))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &setDishR{}
		}
		args[object.DishID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &setDishR{}
			}

			args[obj.DishID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`dishes`),
		qm.WhereIn(`dishes.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Dish")
	}

	var resultSlice []*Dish
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Dish")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dishes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dishes")
	}

	if len(dishAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Dish = foreign
		if foreign.R == nil {
			foreign.R = &dishR{}
		}
		foreign.R.SetDishes = append(foreign.R.SetDishes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DishID == foreign.ID {
				local.R.Dish = foreign
				if foreign.R == nil {
					foreign.R = &dishR{}
				}
				foreign.R.SetDishes = append(foreign.R.SetDishes, local)
				break
			}
		}
	}

	return nil
}

// LoadSet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (setDishL) LoadSet(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSetDish interface{}, mods queries.Applicator) error {
	var slice []*SetDish
	var object *SetDish

	if singular {
		var ok bool
		object, ok = maybeSetDish.(*SetDish)
		if !ok {
			object = new(SetDish)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSetDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSetDish))
			}
		}
	} else {
		s, ok := maybeSetDish.(*[]*SetDish)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSetDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSetDish))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &setDishR{}
		}
		args[object.SetID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &setDishR{}
			}

			args[obj.SetID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sets`),
		qm.WhereIn(`sets.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Set")
	}

	var resultSlice []*Set
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Set")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sets")
	}

	if len(setAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Set = foreign
		if foreign.R == nil {
			foreign.R = &setR{}
		}
		foreign.R.SetDishes = append(foreign.R.SetDishes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SetID == foreign.ID {
				local.R.Set = foreign
				if foreign.R == nil {
					foreign.R = &setR{}
				}
				foreign.R.SetDishes = append(foreign.R.SetDishes, local)
				break
			}
		}
	}

	return nil
}

// SetDish of the setDish to the related item.
// Sets o.R.Dish to related.
// Adds o to related.R.SetDishes.
func (o *SetDish) SetDish(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Dish) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"set_dishes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"dish_id"}),
		strmangle.WhereClause("\"", "\"", 2, setDishPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SetID, o.DishID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DishID = related.ID
	if o.R == nil {
		o.R = &setDishR{
			Dish: related,
		}
	} else {
		o.R.Dish = related
	}

	if related.R == nil {
		related.R = &dishR{
			SetDishes: SetDishSlice{o},
		}
	} else {
		related.R.SetDishes = append(related.R.SetDishes, o)
	}

	return nil
}

// SetSet of the setDish to the related item.
// Sets o.R.Set to related.
// Adds o to related.R.SetDishes.
func (o *SetDish) SetSet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Set) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"set_dishes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"set_id"}),
		strmangle.WhereClause("\"", "\"", 2, setDishPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SetID, o.DishID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SetID = related.ID
	if o.R == nil {
		o.R = &setDishR{
			Set: related,
		}
	} else {
		o.R.Set = related
	}

	if related.R == nil {
		related.R = &setR{
			SetDishes: SetDishSlice{o},
		}
	} else {
		related.R.SetDishes = append(related.R.SetDishes, o)
	}

	return nil
}

// SetDishes retrieves all the records using an executor.
func SetDishes(mods ...qm.QueryMod) setDishQuery {
	mods = append(mods, qm.From("\"set_dishes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"set_dishes\".*"})
	}

	return setDishQuery{q}
}

// FindSetDish retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSetDish(ctx context.Context, exec boil.ContextExecutor, setID int64, dishID int64, selectCols ...string) (*SetDish, error) {
	setDishObj := &SetDish{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"set_dishes\" where \"set_id\"=$1 AND \"dish_id\"=$2", sel,
	)

	q := queries.Raw(query, setID, dishID)

	err := q.Bind(ctx, exec, setDishObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from set_dishes")
	}

	if err = setDishObj.doAfterSelectHooks(ctx, exec); err != nil {
		return setDishObj, err
	}

	return setDishObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SetDish) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no set_dishes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(setDishColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	setDishInsertCacheMut.RLock()
	cache, cached := setDishInsertCache[key]
	setDishInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			setDishAllColumns,
			setDishColumnsWithDefault,
			setDishColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(setDishType, setDishMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(setDishType, setDishMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"set_dishes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"set_dishes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into set_dishes")
	}

	if !cached {
		setDishInsertCacheMut.Lock()
		setDishInsertCache[key] = cache
		setDishInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SetDish.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SetDish) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	setDishUpdateCacheMut.RLock()
	cache, cached := setDishUpdateCache[key]
	setDishUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			setDishAllColumns,
			setDishPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update set_dishes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"set_dishes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, setDishPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(setDishType, setDishMapping, append(wl, setDishPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update set_dishes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for set_dishes")
	}

	if !cached {
		setDishUpdateCacheMut.Lock()
		setDishUpdateCache[key] = cache
		setDishUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q setDishQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for set_dishes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for set_dishes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SetDishSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), setDishPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"set_dishes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, setDishPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in setDish slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all setDish")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SetDish) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no set_dishes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(setDishColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	setDishUpsertCacheMut.RLock()
	cache, cached := setDishUpsertCache[key]
	setDishUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			setDishAllColumns,
			setDishColumnsWithDefault,
			setDishColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			setDishAllColumns,
			setDishPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert set_dishes, could not build update column list")
		}

		ret := strmangle.SetComplement(setDishAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(setDishPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert set_dishes, could not build conflict column list")
			}

			conflict = make([]string, len(setDishPrimaryKeyColumns))
			copy(conflict, setDishPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"set_dishes\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(setDishType, setDishMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(setDishType, setDishMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert set_dishes")
	}

	if !cached {
		setDishUpsertCacheMut.Lock()
		setDishUpsertCache[key] = cache
		setDishUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SetDish record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SetDish) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no SetDish provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), setDishPrimaryKeyMapping)
	sql := "DELETE FROM \"set_dishes\" WHERE \"set_id\"=$1 AND \"dish_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from set_dishes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for set_dishes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q setDishQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no setDishQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from set_dishes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for set_dishes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SetDishSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(setDishBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), setDishPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"set_dishes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, setDishPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from setDish slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for set_dishes")
	}

	if len(setDishAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SetDish) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSetDish(ctx, exec, o.SetID, o.DishID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SetDishSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SetDishSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), setDishPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"set_dishes\".* FROM \"set_dishes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, setDishPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in SetDishSlice")
	}

	*o = slice

	return nil
}

// SetDishExists checks if the SetDish row exists.
func SetDishExists(ctx context.Context, exec boil.ContextExecutor, setID int64, dishID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"set_dishes\" where \"set_id\"=$1 AND \"dish_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, setID, dishID)
	}
	row := exec.QueryRowContext(ctx, sql, setID, dishID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if set_dishes exists")
	}

	return exists, nil
}

// Exists checks if the SetDish row exists.
func (o *SetDish) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SetDishExists(ctx, exec, o.SetID, o.DishID)
}
