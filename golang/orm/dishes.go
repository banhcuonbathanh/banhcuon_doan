// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Dish is an object representing the database table.
type Dish struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	BranchID    null.Int64  `boil:"branch_id" json:"branch_id,omitempty" toml:"branch_id" yaml:"branch_id,omitempty"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Price       int         `boil:"price" json:"price" toml:"price" yaml:"price"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Image       null.String `boil:"image" json:"image,omitempty" toml:"image" yaml:"image,omitempty"`
	Status      null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	CreatedAt   null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	CountOrder  null.Int    `boil:"count_order" json:"count_order,omitempty" toml:"count_order" yaml:"count_order,omitempty"`
	TotalSold   null.Int    `boil:"total_sold" json:"total_sold,omitempty" toml:"total_sold" yaml:"total_sold,omitempty"`
	DeletedAt   null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *dishR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dishL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DishColumns = struct {
	ID          string
	BranchID    string
	Name        string
	Price       string
	Description string
	Image       string
	Status      string
	CreatedAt   string
	UpdatedAt   string
	CountOrder  string
	TotalSold   string
	DeletedAt   string
}{
	ID:          "id",
	BranchID:    "branch_id",
	Name:        "name",
	Price:       "price",
	Description: "description",
	Image:       "image",
	Status:      "status",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	CountOrder:  "count_order",
	TotalSold:   "total_sold",
	DeletedAt:   "deleted_at",
}

var DishTableColumns = struct {
	ID          string
	BranchID    string
	Name        string
	Price       string
	Description string
	Image       string
	Status      string
	CreatedAt   string
	UpdatedAt   string
	CountOrder  string
	TotalSold   string
	DeletedAt   string
}{
	ID:          "dishes.id",
	BranchID:    "dishes.branch_id",
	Name:        "dishes.name",
	Price:       "dishes.price",
	Description: "dishes.description",
	Image:       "dishes.image",
	Status:      "dishes.status",
	CreatedAt:   "dishes.created_at",
	UpdatedAt:   "dishes.updated_at",
	CountOrder:  "dishes.count_order",
	TotalSold:   "dishes.total_sold",
	DeletedAt:   "dishes.deleted_at",
}

// Generated where

var DishWhere = struct {
	ID          whereHelperint64
	BranchID    whereHelpernull_Int64
	Name        whereHelperstring
	Price       whereHelperint
	Description whereHelpernull_String
	Image       whereHelpernull_String
	Status      whereHelpernull_String
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
	CountOrder  whereHelpernull_Int
	TotalSold   whereHelpernull_Int
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelperint64{field: "\"dishes\".\"id\""},
	BranchID:    whereHelpernull_Int64{field: "\"dishes\".\"branch_id\""},
	Name:        whereHelperstring{field: "\"dishes\".\"name\""},
	Price:       whereHelperint{field: "\"dishes\".\"price\""},
	Description: whereHelpernull_String{field: "\"dishes\".\"description\""},
	Image:       whereHelpernull_String{field: "\"dishes\".\"image\""},
	Status:      whereHelpernull_String{field: "\"dishes\".\"status\""},
	CreatedAt:   whereHelpernull_Time{field: "\"dishes\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"dishes\".\"updated_at\""},
	CountOrder:  whereHelpernull_Int{field: "\"dishes\".\"count_order\""},
	TotalSold:   whereHelpernull_Int{field: "\"dishes\".\"total_sold\""},
	DeletedAt:   whereHelpernull_Time{field: "\"dishes\".\"deleted_at\""},
}

// DishRels is where relationship names are stored.
var DishRels = struct {
	Branch             string
	DeliveryDishes     string
	DishPriceHistories string
	OrderDishes        string
	SetDishes          string
}{
	Branch:             "Branch",
	DeliveryDishes:     "DeliveryDishes",
	DishPriceHistories: "DishPriceHistories",
	OrderDishes:        "OrderDishes",
	SetDishes:          "SetDishes",
}

// dishR is where relationships are stored.
type dishR struct {
	Branch             *Branch               `boil:"Branch" json:"Branch" toml:"Branch" yaml:"Branch"`
	DeliveryDishes     DeliveryDishSlice     `boil:"DeliveryDishes" json:"DeliveryDishes" toml:"DeliveryDishes" yaml:"DeliveryDishes"`
	DishPriceHistories DishPriceHistorySlice `boil:"DishPriceHistories" json:"DishPriceHistories" toml:"DishPriceHistories" yaml:"DishPriceHistories"`
	OrderDishes        OrderDishSlice        `boil:"OrderDishes" json:"OrderDishes" toml:"OrderDishes" yaml:"OrderDishes"`
	SetDishes          SetDishSlice          `boil:"SetDishes" json:"SetDishes" toml:"SetDishes" yaml:"SetDishes"`
}

// NewStruct creates a new relationship struct
func (*dishR) NewStruct() *dishR {
	return &dishR{}
}

func (o *Dish) GetBranch() *Branch {
	if o == nil {
		return nil
	}

	return o.R.GetBranch()
}

func (r *dishR) GetBranch() *Branch {
	if r == nil {
		return nil
	}

	return r.Branch
}

func (o *Dish) GetDeliveryDishes() DeliveryDishSlice {
	if o == nil {
		return nil
	}

	return o.R.GetDeliveryDishes()
}

func (r *dishR) GetDeliveryDishes() DeliveryDishSlice {
	if r == nil {
		return nil
	}

	return r.DeliveryDishes
}

func (o *Dish) GetDishPriceHistories() DishPriceHistorySlice {
	if o == nil {
		return nil
	}

	return o.R.GetDishPriceHistories()
}

func (r *dishR) GetDishPriceHistories() DishPriceHistorySlice {
	if r == nil {
		return nil
	}

	return r.DishPriceHistories
}

func (o *Dish) GetOrderDishes() OrderDishSlice {
	if o == nil {
		return nil
	}

	return o.R.GetOrderDishes()
}

func (r *dishR) GetOrderDishes() OrderDishSlice {
	if r == nil {
		return nil
	}

	return r.OrderDishes
}

func (o *Dish) GetSetDishes() SetDishSlice {
	if o == nil {
		return nil
	}

	return o.R.GetSetDishes()
}

func (r *dishR) GetSetDishes() SetDishSlice {
	if r == nil {
		return nil
	}

	return r.SetDishes
}

// dishL is where Load methods for each relationship are stored.
type dishL struct{}

var (
	dishAllColumns            = []string{"id", "branch_id", "name", "price", "description", "image", "status", "created_at", "updated_at", "count_order", "total_sold", "deleted_at"}
	dishColumnsWithoutDefault = []string{"name", "price"}
	dishColumnsWithDefault    = []string{"id", "branch_id", "description", "image", "status", "created_at", "updated_at", "count_order", "total_sold", "deleted_at"}
	dishPrimaryKeyColumns     = []string{"id"}
	dishGeneratedColumns      = []string{}
)

type (
	// DishSlice is an alias for a slice of pointers to Dish.
	// This should almost always be used instead of []Dish.
	DishSlice []*Dish
	// DishHook is the signature for custom Dish hook methods
	DishHook func(context.Context, boil.ContextExecutor, *Dish) error

	dishQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dishType                 = reflect.TypeOf(&Dish{})
	dishMapping              = queries.MakeStructMapping(dishType)
	dishPrimaryKeyMapping, _ = queries.BindMapping(dishType, dishMapping, dishPrimaryKeyColumns)
	dishInsertCacheMut       sync.RWMutex
	dishInsertCache          = make(map[string]insertCache)
	dishUpdateCacheMut       sync.RWMutex
	dishUpdateCache          = make(map[string]updateCache)
	dishUpsertCacheMut       sync.RWMutex
	dishUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dishAfterSelectMu sync.Mutex
var dishAfterSelectHooks []DishHook

var dishBeforeInsertMu sync.Mutex
var dishBeforeInsertHooks []DishHook
var dishAfterInsertMu sync.Mutex
var dishAfterInsertHooks []DishHook

var dishBeforeUpdateMu sync.Mutex
var dishBeforeUpdateHooks []DishHook
var dishAfterUpdateMu sync.Mutex
var dishAfterUpdateHooks []DishHook

var dishBeforeDeleteMu sync.Mutex
var dishBeforeDeleteHooks []DishHook
var dishAfterDeleteMu sync.Mutex
var dishAfterDeleteHooks []DishHook

var dishBeforeUpsertMu sync.Mutex
var dishBeforeUpsertHooks []DishHook
var dishAfterUpsertMu sync.Mutex
var dishAfterUpsertHooks []DishHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Dish) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Dish) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Dish) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Dish) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Dish) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Dish) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Dish) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Dish) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Dish) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dishAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDishHook registers your hook function for all future operations.
func AddDishHook(hookPoint boil.HookPoint, dishHook DishHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dishAfterSelectMu.Lock()
		dishAfterSelectHooks = append(dishAfterSelectHooks, dishHook)
		dishAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		dishBeforeInsertMu.Lock()
		dishBeforeInsertHooks = append(dishBeforeInsertHooks, dishHook)
		dishBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		dishAfterInsertMu.Lock()
		dishAfterInsertHooks = append(dishAfterInsertHooks, dishHook)
		dishAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		dishBeforeUpdateMu.Lock()
		dishBeforeUpdateHooks = append(dishBeforeUpdateHooks, dishHook)
		dishBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		dishAfterUpdateMu.Lock()
		dishAfterUpdateHooks = append(dishAfterUpdateHooks, dishHook)
		dishAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		dishBeforeDeleteMu.Lock()
		dishBeforeDeleteHooks = append(dishBeforeDeleteHooks, dishHook)
		dishBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		dishAfterDeleteMu.Lock()
		dishAfterDeleteHooks = append(dishAfterDeleteHooks, dishHook)
		dishAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		dishBeforeUpsertMu.Lock()
		dishBeforeUpsertHooks = append(dishBeforeUpsertHooks, dishHook)
		dishBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		dishAfterUpsertMu.Lock()
		dishAfterUpsertHooks = append(dishAfterUpsertHooks, dishHook)
		dishAfterUpsertMu.Unlock()
	}
}

// One returns a single dish record from the query.
func (q dishQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Dish, error) {
	o := &Dish{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for dishes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Dish records from the query.
func (q dishQuery) All(ctx context.Context, exec boil.ContextExecutor) (DishSlice, error) {
	var o []*Dish

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Dish slice")
	}

	if len(dishAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Dish records in the query.
func (q dishQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count dishes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dishQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if dishes exists")
	}

	return count > 0, nil
}

// Branch pointed to by the foreign key.
func (o *Dish) Branch(mods ...qm.QueryMod) branchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BranchID),
	}

	queryMods = append(queryMods, mods...)

	return Branches(queryMods...)
}

// DeliveryDishes retrieves all the delivery_dish's DeliveryDishes with an executor.
func (o *Dish) DeliveryDishes(mods ...qm.QueryMod) deliveryDishQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"delivery_dishes\".\"dish_id\"=?", o.ID),
	)

	return DeliveryDishes(queryMods...)
}

// DishPriceHistories retrieves all the dish_price_history's DishPriceHistories with an executor.
func (o *Dish) DishPriceHistories(mods ...qm.QueryMod) dishPriceHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dish_price_history\".\"dish_id\"=?", o.ID),
	)

	return DishPriceHistories(queryMods...)
}

// OrderDishes retrieves all the order_dish's OrderDishes with an executor.
func (o *Dish) OrderDishes(mods ...qm.QueryMod) orderDishQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_dishes\".\"dish_id\"=?", o.ID),
	)

	return OrderDishes(queryMods...)
}

// SetDishes retrieves all the set_dish's SetDishes with an executor.
func (o *Dish) SetDishes(mods ...qm.QueryMod) setDishQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"set_dishes\".\"dish_id\"=?", o.ID),
	)

	return SetDishes(queryMods...)
}

// LoadBranch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dishL) LoadBranch(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDish interface{}, mods queries.Applicator) error {
	var slice []*Dish
	var object *Dish

	if singular {
		var ok bool
		object, ok = maybeDish.(*Dish)
		if !ok {
			object = new(Dish)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDish))
			}
		}
	} else {
		s, ok := maybeDish.(*[]*Dish)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDish))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &dishR{}
		}
		if !queries.IsNil(object.BranchID) {
			args[object.BranchID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dishR{}
			}

			if !queries.IsNil(obj.BranchID) {
				args[obj.BranchID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`branches`),
		qm.WhereIn(`branches.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Branch")
	}

	var resultSlice []*Branch
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Branch")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for branches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for branches")
	}

	if len(branchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Branch = foreign
		if foreign.R == nil {
			foreign.R = &branchR{}
		}
		foreign.R.Dishes = append(foreign.R.Dishes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BranchID, foreign.ID) {
				local.R.Branch = foreign
				if foreign.R == nil {
					foreign.R = &branchR{}
				}
				foreign.R.Dishes = append(foreign.R.Dishes, local)
				break
			}
		}
	}

	return nil
}

// LoadDeliveryDishes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dishL) LoadDeliveryDishes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDish interface{}, mods queries.Applicator) error {
	var slice []*Dish
	var object *Dish

	if singular {
		var ok bool
		object, ok = maybeDish.(*Dish)
		if !ok {
			object = new(Dish)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDish))
			}
		}
	} else {
		s, ok := maybeDish.(*[]*Dish)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDish))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &dishR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dishR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`delivery_dishes`),
		qm.WhereIn(`delivery_dishes.dish_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load delivery_dishes")
	}

	var resultSlice []*DeliveryDish
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice delivery_dishes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on delivery_dishes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for delivery_dishes")
	}

	if len(deliveryDishAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DeliveryDishes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deliveryDishR{}
			}
			foreign.R.Dish = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DishID {
				local.R.DeliveryDishes = append(local.R.DeliveryDishes, foreign)
				if foreign.R == nil {
					foreign.R = &deliveryDishR{}
				}
				foreign.R.Dish = local
				break
			}
		}
	}

	return nil
}

// LoadDishPriceHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dishL) LoadDishPriceHistories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDish interface{}, mods queries.Applicator) error {
	var slice []*Dish
	var object *Dish

	if singular {
		var ok bool
		object, ok = maybeDish.(*Dish)
		if !ok {
			object = new(Dish)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDish))
			}
		}
	} else {
		s, ok := maybeDish.(*[]*Dish)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDish))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &dishR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dishR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`dish_price_history`),
		qm.WhereIn(`dish_price_history.dish_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dish_price_history")
	}

	var resultSlice []*DishPriceHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dish_price_history")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dish_price_history")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dish_price_history")
	}

	if len(dishPriceHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DishPriceHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dishPriceHistoryR{}
			}
			foreign.R.Dish = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DishID) {
				local.R.DishPriceHistories = append(local.R.DishPriceHistories, foreign)
				if foreign.R == nil {
					foreign.R = &dishPriceHistoryR{}
				}
				foreign.R.Dish = local
				break
			}
		}
	}

	return nil
}

// LoadOrderDishes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dishL) LoadOrderDishes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDish interface{}, mods queries.Applicator) error {
	var slice []*Dish
	var object *Dish

	if singular {
		var ok bool
		object, ok = maybeDish.(*Dish)
		if !ok {
			object = new(Dish)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDish))
			}
		}
	} else {
		s, ok := maybeDish.(*[]*Dish)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDish))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &dishR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dishR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`order_dishes`),
		qm.WhereIn(`order_dishes.dish_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_dishes")
	}

	var resultSlice []*OrderDish
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_dishes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_dishes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_dishes")
	}

	if len(orderDishAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderDishes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderDishR{}
			}
			foreign.R.Dish = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DishID {
				local.R.OrderDishes = append(local.R.OrderDishes, foreign)
				if foreign.R == nil {
					foreign.R = &orderDishR{}
				}
				foreign.R.Dish = local
				break
			}
		}
	}

	return nil
}

// LoadSetDishes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dishL) LoadSetDishes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDish interface{}, mods queries.Applicator) error {
	var slice []*Dish
	var object *Dish

	if singular {
		var ok bool
		object, ok = maybeDish.(*Dish)
		if !ok {
			object = new(Dish)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDish))
			}
		}
	} else {
		s, ok := maybeDish.(*[]*Dish)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDish))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &dishR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dishR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`set_dishes`),
		qm.WhereIn(`set_dishes.dish_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load set_dishes")
	}

	var resultSlice []*SetDish
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice set_dishes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on set_dishes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for set_dishes")
	}

	if len(setDishAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SetDishes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &setDishR{}
			}
			foreign.R.Dish = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DishID {
				local.R.SetDishes = append(local.R.SetDishes, foreign)
				if foreign.R == nil {
					foreign.R = &setDishR{}
				}
				foreign.R.Dish = local
				break
			}
		}
	}

	return nil
}

// SetBranch of the dish to the related item.
// Sets o.R.Branch to related.
// Adds o to related.R.Dishes.
func (o *Dish) SetBranch(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Branch) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dishes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"branch_id"}),
		strmangle.WhereClause("\"", "\"", 2, dishPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BranchID, related.ID)
	if o.R == nil {
		o.R = &dishR{
			Branch: related,
		}
	} else {
		o.R.Branch = related
	}

	if related.R == nil {
		related.R = &branchR{
			Dishes: DishSlice{o},
		}
	} else {
		related.R.Dishes = append(related.R.Dishes, o)
	}

	return nil
}

// RemoveBranch relationship.
// Sets o.R.Branch to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Dish) RemoveBranch(ctx context.Context, exec boil.ContextExecutor, related *Branch) error {
	var err error

	queries.SetScanner(&o.BranchID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("branch_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Branch = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Dishes {
		if queries.Equal(o.BranchID, ri.BranchID) {
			continue
		}

		ln := len(related.R.Dishes)
		if ln > 1 && i < ln-1 {
			related.R.Dishes[i] = related.R.Dishes[ln-1]
		}
		related.R.Dishes = related.R.Dishes[:ln-1]
		break
	}
	return nil
}

// AddDeliveryDishes adds the given related objects to the existing relationships
// of the dish, optionally inserting them as new records.
// Appends related to o.R.DeliveryDishes.
// Sets related.R.Dish appropriately.
func (o *Dish) AddDeliveryDishes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeliveryDish) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DishID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"delivery_dishes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"dish_id"}),
				strmangle.WhereClause("\"", "\"", 2, deliveryDishPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.DeliveryID, rel.DishID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DishID = o.ID
		}
	}

	if o.R == nil {
		o.R = &dishR{
			DeliveryDishes: related,
		}
	} else {
		o.R.DeliveryDishes = append(o.R.DeliveryDishes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deliveryDishR{
				Dish: o,
			}
		} else {
			rel.R.Dish = o
		}
	}
	return nil
}

// AddDishPriceHistories adds the given related objects to the existing relationships
// of the dish, optionally inserting them as new records.
// Appends related to o.R.DishPriceHistories.
// Sets related.R.Dish appropriately.
func (o *Dish) AddDishPriceHistories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DishPriceHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DishID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dish_price_history\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"dish_id"}),
				strmangle.WhereClause("\"", "\"", 2, dishPriceHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DishID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &dishR{
			DishPriceHistories: related,
		}
	} else {
		o.R.DishPriceHistories = append(o.R.DishPriceHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dishPriceHistoryR{
				Dish: o,
			}
		} else {
			rel.R.Dish = o
		}
	}
	return nil
}

// SetDishPriceHistories removes all previously related items of the
// dish replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Dish's DishPriceHistories accordingly.
// Replaces o.R.DishPriceHistories with related.
// Sets related.R.Dish's DishPriceHistories accordingly.
func (o *Dish) SetDishPriceHistories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DishPriceHistory) error {
	query := "update \"dish_price_history\" set \"dish_id\" = null where \"dish_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DishPriceHistories {
			queries.SetScanner(&rel.DishID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Dish = nil
		}
		o.R.DishPriceHistories = nil
	}

	return o.AddDishPriceHistories(ctx, exec, insert, related...)
}

// RemoveDishPriceHistories relationships from objects passed in.
// Removes related items from R.DishPriceHistories (uses pointer comparison, removal does not keep order)
// Sets related.R.Dish.
func (o *Dish) RemoveDishPriceHistories(ctx context.Context, exec boil.ContextExecutor, related ...*DishPriceHistory) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DishID, nil)
		if rel.R != nil {
			rel.R.Dish = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("dish_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DishPriceHistories {
			if rel != ri {
				continue
			}

			ln := len(o.R.DishPriceHistories)
			if ln > 1 && i < ln-1 {
				o.R.DishPriceHistories[i] = o.R.DishPriceHistories[ln-1]
			}
			o.R.DishPriceHistories = o.R.DishPriceHistories[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderDishes adds the given related objects to the existing relationships
// of the dish, optionally inserting them as new records.
// Appends related to o.R.OrderDishes.
// Sets related.R.Dish appropriately.
func (o *Dish) AddOrderDishes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderDish) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DishID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_dishes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"dish_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderDishPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.OrderID, rel.DishID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DishID = o.ID
		}
	}

	if o.R == nil {
		o.R = &dishR{
			OrderDishes: related,
		}
	} else {
		o.R.OrderDishes = append(o.R.OrderDishes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderDishR{
				Dish: o,
			}
		} else {
			rel.R.Dish = o
		}
	}
	return nil
}

// AddSetDishes adds the given related objects to the existing relationships
// of the dish, optionally inserting them as new records.
// Appends related to o.R.SetDishes.
// Sets related.R.Dish appropriately.
func (o *Dish) AddSetDishes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SetDish) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DishID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"set_dishes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"dish_id"}),
				strmangle.WhereClause("\"", "\"", 2, setDishPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SetID, rel.DishID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DishID = o.ID
		}
	}

	if o.R == nil {
		o.R = &dishR{
			SetDishes: related,
		}
	} else {
		o.R.SetDishes = append(o.R.SetDishes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &setDishR{
				Dish: o,
			}
		} else {
			rel.R.Dish = o
		}
	}
	return nil
}

// Dishes retrieves all the records using an executor.
func Dishes(mods ...qm.QueryMod) dishQuery {
	mods = append(mods, qm.From("\"dishes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"dishes\".*"})
	}

	return dishQuery{q}
}

// FindDish retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDish(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Dish, error) {
	dishObj := &Dish{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dishes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dishObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from dishes")
	}

	if err = dishObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dishObj, err
	}

	return dishObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Dish) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no dishes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dishColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dishInsertCacheMut.RLock()
	cache, cached := dishInsertCache[key]
	dishInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dishAllColumns,
			dishColumnsWithDefault,
			dishColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dishType, dishMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dishType, dishMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dishes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dishes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into dishes")
	}

	if !cached {
		dishInsertCacheMut.Lock()
		dishInsertCache[key] = cache
		dishInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Dish.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Dish) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dishUpdateCacheMut.RLock()
	cache, cached := dishUpdateCache[key]
	dishUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dishAllColumns,
			dishPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update dishes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dishes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dishPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dishType, dishMapping, append(wl, dishPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update dishes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for dishes")
	}

	if !cached {
		dishUpdateCacheMut.Lock()
		dishUpdateCache[key] = cache
		dishUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dishQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for dishes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for dishes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DishSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dishPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dishes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dishPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in dish slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all dish")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Dish) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no dishes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dishColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dishUpsertCacheMut.RLock()
	cache, cached := dishUpsertCache[key]
	dishUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			dishAllColumns,
			dishColumnsWithDefault,
			dishColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dishAllColumns,
			dishPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert dishes, could not build update column list")
		}

		ret := strmangle.SetComplement(dishAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(dishPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert dishes, could not build conflict column list")
			}

			conflict = make([]string, len(dishPrimaryKeyColumns))
			copy(conflict, dishPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"dishes\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(dishType, dishMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dishType, dishMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert dishes")
	}

	if !cached {
		dishUpsertCacheMut.Lock()
		dishUpsertCache[key] = cache
		dishUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Dish record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Dish) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Dish provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dishPrimaryKeyMapping)
	sql := "DELETE FROM \"dishes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from dishes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for dishes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dishQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no dishQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from dishes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for dishes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DishSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dishBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dishPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dishes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dishPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from dish slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for dishes")
	}

	if len(dishAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Dish) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDish(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DishSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DishSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dishPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dishes\".* FROM \"dishes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dishPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in DishSlice")
	}

	*o = slice

	return nil
}

// DishExists checks if the Dish row exists.
func DishExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dishes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if dishes exists")
	}

	return exists, nil
}

// Exists checks if the Dish row exists.
func (o *Dish) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DishExists(ctx, exec, o.ID)
}
