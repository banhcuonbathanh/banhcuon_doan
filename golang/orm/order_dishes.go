// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// OrderDish is an object representing the database table.
type OrderDish struct {
	OrderID  int64 `boil:"order_id" json:"order_id" toml:"order_id" yaml:"order_id"`
	DishID   int64 `boil:"dish_id" json:"dish_id" toml:"dish_id" yaml:"dish_id"`
	Quantity int   `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`

	R *orderDishR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderDishL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderDishColumns = struct {
	OrderID  string
	DishID   string
	Quantity string
}{
	OrderID:  "order_id",
	DishID:   "dish_id",
	Quantity: "quantity",
}

var OrderDishTableColumns = struct {
	OrderID  string
	DishID   string
	Quantity string
}{
	OrderID:  "order_dishes.order_id",
	DishID:   "order_dishes.dish_id",
	Quantity: "order_dishes.quantity",
}

// Generated where

var OrderDishWhere = struct {
	OrderID  whereHelperint64
	DishID   whereHelperint64
	Quantity whereHelperint
}{
	OrderID:  whereHelperint64{field: "\"order_dishes\".\"order_id\""},
	DishID:   whereHelperint64{field: "\"order_dishes\".\"dish_id\""},
	Quantity: whereHelperint{field: "\"order_dishes\".\"quantity\""},
}

// OrderDishRels is where relationship names are stored.
var OrderDishRels = struct {
	Dish  string
	Order string
}{
	Dish:  "Dish",
	Order: "Order",
}

// orderDishR is where relationships are stored.
type orderDishR struct {
	Dish  *Dish  `boil:"Dish" json:"Dish" toml:"Dish" yaml:"Dish"`
	Order *Order `boil:"Order" json:"Order" toml:"Order" yaml:"Order"`
}

// NewStruct creates a new relationship struct
func (*orderDishR) NewStruct() *orderDishR {
	return &orderDishR{}
}

func (o *OrderDish) GetDish() *Dish {
	if o == nil {
		return nil
	}

	return o.R.GetDish()
}

func (r *orderDishR) GetDish() *Dish {
	if r == nil {
		return nil
	}

	return r.Dish
}

func (o *OrderDish) GetOrder() *Order {
	if o == nil {
		return nil
	}

	return o.R.GetOrder()
}

func (r *orderDishR) GetOrder() *Order {
	if r == nil {
		return nil
	}

	return r.Order
}

// orderDishL is where Load methods for each relationship are stored.
type orderDishL struct{}

var (
	orderDishAllColumns            = []string{"order_id", "dish_id", "quantity"}
	orderDishColumnsWithoutDefault = []string{"order_id", "dish_id", "quantity"}
	orderDishColumnsWithDefault    = []string{}
	orderDishPrimaryKeyColumns     = []string{"order_id", "dish_id"}
	orderDishGeneratedColumns      = []string{}
)

type (
	// OrderDishSlice is an alias for a slice of pointers to OrderDish.
	// This should almost always be used instead of []OrderDish.
	OrderDishSlice []*OrderDish
	// OrderDishHook is the signature for custom OrderDish hook methods
	OrderDishHook func(context.Context, boil.ContextExecutor, *OrderDish) error

	orderDishQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderDishType                 = reflect.TypeOf(&OrderDish{})
	orderDishMapping              = queries.MakeStructMapping(orderDishType)
	orderDishPrimaryKeyMapping, _ = queries.BindMapping(orderDishType, orderDishMapping, orderDishPrimaryKeyColumns)
	orderDishInsertCacheMut       sync.RWMutex
	orderDishInsertCache          = make(map[string]insertCache)
	orderDishUpdateCacheMut       sync.RWMutex
	orderDishUpdateCache          = make(map[string]updateCache)
	orderDishUpsertCacheMut       sync.RWMutex
	orderDishUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderDishAfterSelectMu sync.Mutex
var orderDishAfterSelectHooks []OrderDishHook

var orderDishBeforeInsertMu sync.Mutex
var orderDishBeforeInsertHooks []OrderDishHook
var orderDishAfterInsertMu sync.Mutex
var orderDishAfterInsertHooks []OrderDishHook

var orderDishBeforeUpdateMu sync.Mutex
var orderDishBeforeUpdateHooks []OrderDishHook
var orderDishAfterUpdateMu sync.Mutex
var orderDishAfterUpdateHooks []OrderDishHook

var orderDishBeforeDeleteMu sync.Mutex
var orderDishBeforeDeleteHooks []OrderDishHook
var orderDishAfterDeleteMu sync.Mutex
var orderDishAfterDeleteHooks []OrderDishHook

var orderDishBeforeUpsertMu sync.Mutex
var orderDishBeforeUpsertHooks []OrderDishHook
var orderDishAfterUpsertMu sync.Mutex
var orderDishAfterUpsertHooks []OrderDishHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderDish) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDishAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderDish) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDishBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderDish) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDishAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderDish) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDishBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderDish) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDishAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderDish) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDishBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderDish) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDishAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderDish) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDishBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderDish) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDishAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderDishHook registers your hook function for all future operations.
func AddOrderDishHook(hookPoint boil.HookPoint, orderDishHook OrderDishHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderDishAfterSelectMu.Lock()
		orderDishAfterSelectHooks = append(orderDishAfterSelectHooks, orderDishHook)
		orderDishAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		orderDishBeforeInsertMu.Lock()
		orderDishBeforeInsertHooks = append(orderDishBeforeInsertHooks, orderDishHook)
		orderDishBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		orderDishAfterInsertMu.Lock()
		orderDishAfterInsertHooks = append(orderDishAfterInsertHooks, orderDishHook)
		orderDishAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		orderDishBeforeUpdateMu.Lock()
		orderDishBeforeUpdateHooks = append(orderDishBeforeUpdateHooks, orderDishHook)
		orderDishBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		orderDishAfterUpdateMu.Lock()
		orderDishAfterUpdateHooks = append(orderDishAfterUpdateHooks, orderDishHook)
		orderDishAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		orderDishBeforeDeleteMu.Lock()
		orderDishBeforeDeleteHooks = append(orderDishBeforeDeleteHooks, orderDishHook)
		orderDishBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		orderDishAfterDeleteMu.Lock()
		orderDishAfterDeleteHooks = append(orderDishAfterDeleteHooks, orderDishHook)
		orderDishAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		orderDishBeforeUpsertMu.Lock()
		orderDishBeforeUpsertHooks = append(orderDishBeforeUpsertHooks, orderDishHook)
		orderDishBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		orderDishAfterUpsertMu.Lock()
		orderDishAfterUpsertHooks = append(orderDishAfterUpsertHooks, orderDishHook)
		orderDishAfterUpsertMu.Unlock()
	}
}

// One returns a single orderDish record from the query.
func (q orderDishQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderDish, error) {
	o := &OrderDish{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for order_dishes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrderDish records from the query.
func (q orderDishQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderDishSlice, error) {
	var o []*OrderDish

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to OrderDish slice")
	}

	if len(orderDishAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrderDish records in the query.
func (q orderDishQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count order_dishes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderDishQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if order_dishes exists")
	}

	return count > 0, nil
}

// Dish pointed to by the foreign key.
func (o *OrderDish) Dish(mods ...qm.QueryMod) dishQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DishID),
	}

	queryMods = append(queryMods, mods...)

	return Dishes(queryMods...)
}

// Order pointed to by the foreign key.
func (o *OrderDish) Order(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return Orders(queryMods...)
}

// LoadDish allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderDishL) LoadDish(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderDish interface{}, mods queries.Applicator) error {
	var slice []*OrderDish
	var object *OrderDish

	if singular {
		var ok bool
		object, ok = maybeOrderDish.(*OrderDish)
		if !ok {
			object = new(OrderDish)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderDish))
			}
		}
	} else {
		s, ok := maybeOrderDish.(*[]*OrderDish)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderDish))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderDishR{}
		}
		args[object.DishID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderDishR{}
			}

			args[obj.DishID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`dishes`),
		qm.WhereIn(`dishes.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Dish")
	}

	var resultSlice []*Dish
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Dish")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dishes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dishes")
	}

	if len(dishAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Dish = foreign
		if foreign.R == nil {
			foreign.R = &dishR{}
		}
		foreign.R.OrderDishes = append(foreign.R.OrderDishes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DishID == foreign.ID {
				local.R.Dish = foreign
				if foreign.R == nil {
					foreign.R = &dishR{}
				}
				foreign.R.OrderDishes = append(foreign.R.OrderDishes, local)
				break
			}
		}
	}

	return nil
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderDishL) LoadOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderDish interface{}, mods queries.Applicator) error {
	var slice []*OrderDish
	var object *OrderDish

	if singular {
		var ok bool
		object, ok = maybeOrderDish.(*OrderDish)
		if !ok {
			object = new(OrderDish)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderDish))
			}
		}
	} else {
		s, ok := maybeOrderDish.(*[]*OrderDish)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderDish))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderDishR{}
		}
		args[object.OrderID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderDishR{}
			}

			args[obj.OrderID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.OrderDishes = append(foreign.R.OrderDishes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderID == foreign.ID {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.OrderDishes = append(foreign.R.OrderDishes, local)
				break
			}
		}
	}

	return nil
}

// SetDish of the orderDish to the related item.
// Sets o.R.Dish to related.
// Adds o to related.R.OrderDishes.
func (o *OrderDish) SetDish(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Dish) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_dishes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"dish_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderDishPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.OrderID, o.DishID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DishID = related.ID
	if o.R == nil {
		o.R = &orderDishR{
			Dish: related,
		}
	} else {
		o.R.Dish = related
	}

	if related.R == nil {
		related.R = &dishR{
			OrderDishes: OrderDishSlice{o},
		}
	} else {
		related.R.OrderDishes = append(related.R.OrderDishes, o)
	}

	return nil
}

// SetOrder of the orderDish to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.OrderDishes.
func (o *OrderDish) SetOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_dishes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderDishPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.OrderID, o.DishID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderID = related.ID
	if o.R == nil {
		o.R = &orderDishR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &orderR{
			OrderDishes: OrderDishSlice{o},
		}
	} else {
		related.R.OrderDishes = append(related.R.OrderDishes, o)
	}

	return nil
}

// OrderDishes retrieves all the records using an executor.
func OrderDishes(mods ...qm.QueryMod) orderDishQuery {
	mods = append(mods, qm.From("\"order_dishes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"order_dishes\".*"})
	}

	return orderDishQuery{q}
}

// FindOrderDish retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderDish(ctx context.Context, exec boil.ContextExecutor, orderID int64, dishID int64, selectCols ...string) (*OrderDish, error) {
	orderDishObj := &OrderDish{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_dishes\" where \"order_id\"=$1 AND \"dish_id\"=$2", sel,
	)

	q := queries.Raw(query, orderID, dishID)

	err := q.Bind(ctx, exec, orderDishObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from order_dishes")
	}

	if err = orderDishObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderDishObj, err
	}

	return orderDishObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderDish) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no order_dishes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderDishColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderDishInsertCacheMut.RLock()
	cache, cached := orderDishInsertCache[key]
	orderDishInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderDishAllColumns,
			orderDishColumnsWithDefault,
			orderDishColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderDishType, orderDishMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderDishType, orderDishMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_dishes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_dishes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into order_dishes")
	}

	if !cached {
		orderDishInsertCacheMut.Lock()
		orderDishInsertCache[key] = cache
		orderDishInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrderDish.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderDish) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderDishUpdateCacheMut.RLock()
	cache, cached := orderDishUpdateCache[key]
	orderDishUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderDishAllColumns,
			orderDishPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update order_dishes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_dishes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orderDishPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderDishType, orderDishMapping, append(wl, orderDishPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update order_dishes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for order_dishes")
	}

	if !cached {
		orderDishUpdateCacheMut.Lock()
		orderDishUpdateCache[key] = cache
		orderDishUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q orderDishQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for order_dishes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for order_dishes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderDishSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderDishPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_dishes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderDishPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in orderDish slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all orderDish")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderDish) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no order_dishes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderDishColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderDishUpsertCacheMut.RLock()
	cache, cached := orderDishUpsertCache[key]
	orderDishUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			orderDishAllColumns,
			orderDishColumnsWithDefault,
			orderDishColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			orderDishAllColumns,
			orderDishPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert order_dishes, could not build update column list")
		}

		ret := strmangle.SetComplement(orderDishAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(orderDishPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert order_dishes, could not build conflict column list")
			}

			conflict = make([]string, len(orderDishPrimaryKeyColumns))
			copy(conflict, orderDishPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"order_dishes\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(orderDishType, orderDishMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderDishType, orderDishMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert order_dishes")
	}

	if !cached {
		orderDishUpsertCacheMut.Lock()
		orderDishUpsertCache[key] = cache
		orderDishUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrderDish record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderDish) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no OrderDish provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderDishPrimaryKeyMapping)
	sql := "DELETE FROM \"order_dishes\" WHERE \"order_id\"=$1 AND \"dish_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from order_dishes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for order_dishes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderDishQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no orderDishQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from order_dishes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for order_dishes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderDishSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderDishBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderDishPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_dishes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderDishPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from orderDish slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for order_dishes")
	}

	if len(orderDishAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderDish) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderDish(ctx, exec, o.OrderID, o.DishID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderDishSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderDishSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderDishPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_dishes\".* FROM \"order_dishes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderDishPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in OrderDishSlice")
	}

	*o = slice

	return nil
}

// OrderDishExists checks if the OrderDish row exists.
func OrderDishExists(ctx context.Context, exec boil.ContextExecutor, orderID int64, dishID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_dishes\" where \"order_id\"=$1 AND \"dish_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, orderID, dishID)
	}
	row := exec.QueryRowContext(ctx, sql, orderID, dishID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if order_dishes exists")
	}

	return exists, nil
}

// Exists checks if the OrderDish row exists.
func (o *OrderDish) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderDishExists(ctx, exec, o.OrderID, o.DishID)
}
