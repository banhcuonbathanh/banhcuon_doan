// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRegulations(t *testing.T) {
	t.Parallel()

	query := Regulations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRegulationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Regulation{}
	if err = randomize.Struct(seed, o, regulationDBTypes, true, regulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Regulations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRegulationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Regulation{}
	if err = randomize.Struct(seed, o, regulationDBTypes, true, regulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Regulations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Regulations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRegulationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Regulation{}
	if err = randomize.Struct(seed, o, regulationDBTypes, true, regulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RegulationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Regulations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRegulationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Regulation{}
	if err = randomize.Struct(seed, o, regulationDBTypes, true, regulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RegulationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Regulation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RegulationExists to return true, but got false.")
	}
}

func testRegulationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Regulation{}
	if err = randomize.Struct(seed, o, regulationDBTypes, true, regulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	regulationFound, err := FindRegulation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if regulationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRegulationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Regulation{}
	if err = randomize.Struct(seed, o, regulationDBTypes, true, regulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Regulations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRegulationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Regulation{}
	if err = randomize.Struct(seed, o, regulationDBTypes, true, regulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Regulations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRegulationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	regulationOne := &Regulation{}
	regulationTwo := &Regulation{}
	if err = randomize.Struct(seed, regulationOne, regulationDBTypes, false, regulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}
	if err = randomize.Struct(seed, regulationTwo, regulationDBTypes, false, regulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = regulationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = regulationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Regulations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRegulationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	regulationOne := &Regulation{}
	regulationTwo := &Regulation{}
	if err = randomize.Struct(seed, regulationOne, regulationDBTypes, false, regulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}
	if err = randomize.Struct(seed, regulationTwo, regulationDBTypes, false, regulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = regulationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = regulationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Regulations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func regulationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Regulation) error {
	*o = Regulation{}
	return nil
}

func regulationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Regulation) error {
	*o = Regulation{}
	return nil
}

func regulationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Regulation) error {
	*o = Regulation{}
	return nil
}

func regulationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Regulation) error {
	*o = Regulation{}
	return nil
}

func regulationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Regulation) error {
	*o = Regulation{}
	return nil
}

func regulationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Regulation) error {
	*o = Regulation{}
	return nil
}

func regulationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Regulation) error {
	*o = Regulation{}
	return nil
}

func regulationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Regulation) error {
	*o = Regulation{}
	return nil
}

func regulationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Regulation) error {
	*o = Regulation{}
	return nil
}

func testRegulationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Regulation{}
	o := &Regulation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, regulationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Regulation object: %s", err)
	}

	AddRegulationHook(boil.BeforeInsertHook, regulationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	regulationBeforeInsertHooks = []RegulationHook{}

	AddRegulationHook(boil.AfterInsertHook, regulationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	regulationAfterInsertHooks = []RegulationHook{}

	AddRegulationHook(boil.AfterSelectHook, regulationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	regulationAfterSelectHooks = []RegulationHook{}

	AddRegulationHook(boil.BeforeUpdateHook, regulationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	regulationBeforeUpdateHooks = []RegulationHook{}

	AddRegulationHook(boil.AfterUpdateHook, regulationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	regulationAfterUpdateHooks = []RegulationHook{}

	AddRegulationHook(boil.BeforeDeleteHook, regulationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	regulationBeforeDeleteHooks = []RegulationHook{}

	AddRegulationHook(boil.AfterDeleteHook, regulationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	regulationAfterDeleteHooks = []RegulationHook{}

	AddRegulationHook(boil.BeforeUpsertHook, regulationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	regulationBeforeUpsertHooks = []RegulationHook{}

	AddRegulationHook(boil.AfterUpsertHook, regulationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	regulationAfterUpsertHooks = []RegulationHook{}
}

func testRegulationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Regulation{}
	if err = randomize.Struct(seed, o, regulationDBTypes, true, regulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Regulations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRegulationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Regulation{}
	if err = randomize.Struct(seed, o, regulationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(regulationPrimaryKeyColumns, regulationColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Regulations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRegulationToOneBranchUsingBranch(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Regulation
	var foreign Branch

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, regulationDBTypes, true, regulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, branchDBTypes, false, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.BranchID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Branch().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddBranchHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Branch) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := RegulationSlice{&local}
	if err = local.L.LoadBranch(ctx, tx, false, (*[]*Regulation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Branch == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Branch = nil
	if err = local.L.LoadBranch(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Branch == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testRegulationToOneSetOpBranchUsingBranch(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Regulation
	var b, c Branch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, regulationDBTypes, false, strmangle.SetComplement(regulationPrimaryKeyColumns, regulationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Branch{&b, &c} {
		err = a.SetBranch(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Branch != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Regulations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.BranchID, x.ID) {
			t.Error("foreign key was wrong value", a.BranchID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BranchID))
		reflect.Indirect(reflect.ValueOf(&a.BranchID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.BranchID, x.ID) {
			t.Error("foreign key was wrong value", a.BranchID, x.ID)
		}
	}
}

func testRegulationToOneRemoveOpBranchUsingBranch(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Regulation
	var b Branch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, regulationDBTypes, false, strmangle.SetComplement(regulationPrimaryKeyColumns, regulationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetBranch(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveBranch(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Branch().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Branch != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.BranchID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Regulations) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRegulationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Regulation{}
	if err = randomize.Struct(seed, o, regulationDBTypes, true, regulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRegulationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Regulation{}
	if err = randomize.Struct(seed, o, regulationDBTypes, true, regulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RegulationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRegulationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Regulation{}
	if err = randomize.Struct(seed, o, regulationDBTypes, true, regulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Regulations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	regulationDBTypes = map[string]string{`ID`: `bigint`, `BranchID`: `bigint`, `Title`: `character varying`, `Content`: `text`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`}
	_                 = bytes.MinRead
)

func testRegulationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(regulationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(regulationAllColumns) == len(regulationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Regulation{}
	if err = randomize.Struct(seed, o, regulationDBTypes, true, regulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Regulations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, regulationDBTypes, true, regulationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRegulationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(regulationAllColumns) == len(regulationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Regulation{}
	if err = randomize.Struct(seed, o, regulationDBTypes, true, regulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Regulations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, regulationDBTypes, true, regulationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(regulationAllColumns, regulationPrimaryKeyColumns) {
		fields = regulationAllColumns
	} else {
		fields = strmangle.SetComplement(
			regulationAllColumns,
			regulationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RegulationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRegulationsUpsert(t *testing.T) {
	t.Parallel()

	if len(regulationAllColumns) == len(regulationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Regulation{}
	if err = randomize.Struct(seed, &o, regulationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Regulation: %s", err)
	}

	count, err := Regulations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, regulationDBTypes, false, regulationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Regulation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Regulation: %s", err)
	}

	count, err = Regulations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
