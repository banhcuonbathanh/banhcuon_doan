// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import "testing"

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AccountToAccountUsingOwner", testAccountToOneAccountUsingOwner)
	t.Run("AccountToBranchUsingBranch", testAccountToOneBranchUsingBranch)
	t.Run("DeliveryToBranchUsingBranch", testDeliveryToOneBranchUsingBranch)
	t.Run("DeliveryToGuestUsingGuest", testDeliveryToOneGuestUsingGuest)
	t.Run("DeliveryToAccountUsingOrderHandler", testDeliveryToOneAccountUsingOrderHandler)
	t.Run("DeliveryToOrderUsingOrder", testDeliveryToOneOrderUsingOrder)
	t.Run("DeliveryToTableUsingTableNumberTable", testDeliveryToOneTableUsingTableNumberTable)
	t.Run("DeliveryToAccountUsingUser", testDeliveryToOneAccountUsingUser)
	t.Run("DeliveryDishToDeliveryUsingDelivery", testDeliveryDishToOneDeliveryUsingDelivery)
	t.Run("DeliveryDishToDishUsingDish", testDeliveryDishToOneDishUsingDish)
	t.Run("DishPriceHistoryToDishUsingDish", testDishPriceHistoryToOneDishUsingDish)
	t.Run("DishToBranchUsingBranch", testDishToOneBranchUsingBranch)
	t.Run("GuestToBranchUsingBranch", testGuestToOneBranchUsingBranch)
	t.Run("GuestToTableUsingTableNumberTable", testGuestToOneTableUsingTableNumberTable)
	t.Run("OrderDishToDishUsingDish", testOrderDishToOneDishUsingDish)
	t.Run("OrderDishToOrderUsingOrder", testOrderDishToOneOrderUsingOrder)
	t.Run("OrderSetToOrderUsingOrder", testOrderSetToOneOrderUsingOrder)
	t.Run("OrderSetToSetUsingSet", testOrderSetToOneSetUsingSet)
	t.Run("OrderToBranchUsingBranch", testOrderToOneBranchUsingBranch)
	t.Run("OrderToGuestUsingGuest", testOrderToOneGuestUsingGuest)
	t.Run("OrderToAccountUsingOrderHandler", testOrderToOneAccountUsingOrderHandler)
	t.Run("OrderToTableUsingTableNumberTable", testOrderToOneTableUsingTableNumberTable)
	t.Run("OrderToAccountUsingUser", testOrderToOneAccountUsingUser)
	t.Run("RegulationToBranchUsingBranch", testRegulationToOneBranchUsingBranch)
	t.Run("SetDishToDishUsingDish", testSetDishToOneDishUsingDish)
	t.Run("SetDishToSetUsingSet", testSetDishToOneSetUsingSet)
	t.Run("SetToBranchUsingBranch", testSetToOneBranchUsingBranch)
	t.Run("TableToBranchUsingBranch", testTableToOneBranchUsingBranch)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AccountToOwnerAccounts", testAccountToManyOwnerAccounts)
	t.Run("AccountToOrderHandlerDeliveries", testAccountToManyOrderHandlerDeliveries)
	t.Run("AccountToUserDeliveries", testAccountToManyUserDeliveries)
	t.Run("AccountToOrderHandlerOrders", testAccountToManyOrderHandlerOrders)
	t.Run("AccountToUserOrders", testAccountToManyUserOrders)
	t.Run("BranchToAccounts", testBranchToManyAccounts)
	t.Run("BranchToDeliveries", testBranchToManyDeliveries)
	t.Run("BranchToDishes", testBranchToManyDishes)
	t.Run("BranchToGuests", testBranchToManyGuests)
	t.Run("BranchToOrders", testBranchToManyOrders)
	t.Run("BranchToRegulations", testBranchToManyRegulations)
	t.Run("BranchToSets", testBranchToManySets)
	t.Run("BranchToTables", testBranchToManyTables)
	t.Run("DeliveryToDeliveryDishes", testDeliveryToManyDeliveryDishes)
	t.Run("DishToDeliveryDishes", testDishToManyDeliveryDishes)
	t.Run("DishToDishPriceHistories", testDishToManyDishPriceHistories)
	t.Run("DishToOrderDishes", testDishToManyOrderDishes)
	t.Run("DishToSetDishes", testDishToManySetDishes)
	t.Run("GuestToDeliveries", testGuestToManyDeliveries)
	t.Run("GuestToOrders", testGuestToManyOrders)
	t.Run("OrderToDeliveries", testOrderToManyDeliveries)
	t.Run("OrderToOrderDishes", testOrderToManyOrderDishes)
	t.Run("OrderToOrderSets", testOrderToManyOrderSets)
	t.Run("SetToOrderSets", testSetToManyOrderSets)
	t.Run("SetToSetDishes", testSetToManySetDishes)
	t.Run("TableToTableNumberDeliveries", testTableToManyTableNumberDeliveries)
	t.Run("TableToTableNumberGuests", testTableToManyTableNumberGuests)
	t.Run("TableToTableNumberOrders", testTableToManyTableNumberOrders)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AccountToAccountUsingOwnerAccounts", testAccountToOneSetOpAccountUsingOwner)
	t.Run("AccountToBranchUsingAccounts", testAccountToOneSetOpBranchUsingBranch)
	t.Run("DeliveryToBranchUsingDeliveries", testDeliveryToOneSetOpBranchUsingBranch)
	t.Run("DeliveryToGuestUsingDeliveries", testDeliveryToOneSetOpGuestUsingGuest)
	t.Run("DeliveryToAccountUsingOrderHandlerDeliveries", testDeliveryToOneSetOpAccountUsingOrderHandler)
	t.Run("DeliveryToOrderUsingDeliveries", testDeliveryToOneSetOpOrderUsingOrder)
	t.Run("DeliveryToTableUsingTableNumberDeliveries", testDeliveryToOneSetOpTableUsingTableNumberTable)
	t.Run("DeliveryToAccountUsingUserDeliveries", testDeliveryToOneSetOpAccountUsingUser)
	t.Run("DeliveryDishToDeliveryUsingDeliveryDishes", testDeliveryDishToOneSetOpDeliveryUsingDelivery)
	t.Run("DeliveryDishToDishUsingDeliveryDishes", testDeliveryDishToOneSetOpDishUsingDish)
	t.Run("DishPriceHistoryToDishUsingDishPriceHistories", testDishPriceHistoryToOneSetOpDishUsingDish)
	t.Run("DishToBranchUsingDishes", testDishToOneSetOpBranchUsingBranch)
	t.Run("GuestToBranchUsingGuests", testGuestToOneSetOpBranchUsingBranch)
	t.Run("GuestToTableUsingTableNumberGuests", testGuestToOneSetOpTableUsingTableNumberTable)
	t.Run("OrderDishToDishUsingOrderDishes", testOrderDishToOneSetOpDishUsingDish)
	t.Run("OrderDishToOrderUsingOrderDishes", testOrderDishToOneSetOpOrderUsingOrder)
	t.Run("OrderSetToOrderUsingOrderSets", testOrderSetToOneSetOpOrderUsingOrder)
	t.Run("OrderSetToSetUsingOrderSets", testOrderSetToOneSetOpSetUsingSet)
	t.Run("OrderToBranchUsingOrders", testOrderToOneSetOpBranchUsingBranch)
	t.Run("OrderToGuestUsingOrders", testOrderToOneSetOpGuestUsingGuest)
	t.Run("OrderToAccountUsingOrderHandlerOrders", testOrderToOneSetOpAccountUsingOrderHandler)
	t.Run("OrderToTableUsingTableNumberOrders", testOrderToOneSetOpTableUsingTableNumberTable)
	t.Run("OrderToAccountUsingUserOrders", testOrderToOneSetOpAccountUsingUser)
	t.Run("RegulationToBranchUsingRegulations", testRegulationToOneSetOpBranchUsingBranch)
	t.Run("SetDishToDishUsingSetDishes", testSetDishToOneSetOpDishUsingDish)
	t.Run("SetDishToSetUsingSetDishes", testSetDishToOneSetOpSetUsingSet)
	t.Run("SetToBranchUsingSets", testSetToOneSetOpBranchUsingBranch)
	t.Run("TableToBranchUsingTables", testTableToOneSetOpBranchUsingBranch)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("AccountToAccountUsingOwnerAccounts", testAccountToOneRemoveOpAccountUsingOwner)
	t.Run("AccountToBranchUsingAccounts", testAccountToOneRemoveOpBranchUsingBranch)
	t.Run("DeliveryToBranchUsingDeliveries", testDeliveryToOneRemoveOpBranchUsingBranch)
	t.Run("DeliveryToGuestUsingDeliveries", testDeliveryToOneRemoveOpGuestUsingGuest)
	t.Run("DeliveryToAccountUsingOrderHandlerDeliveries", testDeliveryToOneRemoveOpAccountUsingOrderHandler)
	t.Run("DeliveryToOrderUsingDeliveries", testDeliveryToOneRemoveOpOrderUsingOrder)
	t.Run("DeliveryToTableUsingTableNumberDeliveries", testDeliveryToOneRemoveOpTableUsingTableNumberTable)
	t.Run("DeliveryToAccountUsingUserDeliveries", testDeliveryToOneRemoveOpAccountUsingUser)
	t.Run("DishPriceHistoryToDishUsingDishPriceHistories", testDishPriceHistoryToOneRemoveOpDishUsingDish)
	t.Run("DishToBranchUsingDishes", testDishToOneRemoveOpBranchUsingBranch)
	t.Run("GuestToBranchUsingGuests", testGuestToOneRemoveOpBranchUsingBranch)
	t.Run("GuestToTableUsingTableNumberGuests", testGuestToOneRemoveOpTableUsingTableNumberTable)
	t.Run("OrderToBranchUsingOrders", testOrderToOneRemoveOpBranchUsingBranch)
	t.Run("OrderToGuestUsingOrders", testOrderToOneRemoveOpGuestUsingGuest)
	t.Run("OrderToAccountUsingOrderHandlerOrders", testOrderToOneRemoveOpAccountUsingOrderHandler)
	t.Run("OrderToTableUsingTableNumberOrders", testOrderToOneRemoveOpTableUsingTableNumberTable)
	t.Run("OrderToAccountUsingUserOrders", testOrderToOneRemoveOpAccountUsingUser)
	t.Run("RegulationToBranchUsingRegulations", testRegulationToOneRemoveOpBranchUsingBranch)
	t.Run("SetToBranchUsingSets", testSetToOneRemoveOpBranchUsingBranch)
	t.Run("TableToBranchUsingTables", testTableToOneRemoveOpBranchUsingBranch)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AccountToOwnerAccounts", testAccountToManyAddOpOwnerAccounts)
	t.Run("AccountToOrderHandlerDeliveries", testAccountToManyAddOpOrderHandlerDeliveries)
	t.Run("AccountToUserDeliveries", testAccountToManyAddOpUserDeliveries)
	t.Run("AccountToOrderHandlerOrders", testAccountToManyAddOpOrderHandlerOrders)
	t.Run("AccountToUserOrders", testAccountToManyAddOpUserOrders)
	t.Run("BranchToAccounts", testBranchToManyAddOpAccounts)
	t.Run("BranchToDeliveries", testBranchToManyAddOpDeliveries)
	t.Run("BranchToDishes", testBranchToManyAddOpDishes)
	t.Run("BranchToGuests", testBranchToManyAddOpGuests)
	t.Run("BranchToOrders", testBranchToManyAddOpOrders)
	t.Run("BranchToRegulations", testBranchToManyAddOpRegulations)
	t.Run("BranchToSets", testBranchToManyAddOpSets)
	t.Run("BranchToTables", testBranchToManyAddOpTables)
	t.Run("DeliveryToDeliveryDishes", testDeliveryToManyAddOpDeliveryDishes)
	t.Run("DishToDeliveryDishes", testDishToManyAddOpDeliveryDishes)
	t.Run("DishToDishPriceHistories", testDishToManyAddOpDishPriceHistories)
	t.Run("DishToOrderDishes", testDishToManyAddOpOrderDishes)
	t.Run("DishToSetDishes", testDishToManyAddOpSetDishes)
	t.Run("GuestToDeliveries", testGuestToManyAddOpDeliveries)
	t.Run("GuestToOrders", testGuestToManyAddOpOrders)
	t.Run("OrderToDeliveries", testOrderToManyAddOpDeliveries)
	t.Run("OrderToOrderDishes", testOrderToManyAddOpOrderDishes)
	t.Run("OrderToOrderSets", testOrderToManyAddOpOrderSets)
	t.Run("SetToOrderSets", testSetToManyAddOpOrderSets)
	t.Run("SetToSetDishes", testSetToManyAddOpSetDishes)
	t.Run("TableToTableNumberDeliveries", testTableToManyAddOpTableNumberDeliveries)
	t.Run("TableToTableNumberGuests", testTableToManyAddOpTableNumberGuests)
	t.Run("TableToTableNumberOrders", testTableToManyAddOpTableNumberOrders)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("AccountToOwnerAccounts", testAccountToManySetOpOwnerAccounts)
	t.Run("AccountToOrderHandlerDeliveries", testAccountToManySetOpOrderHandlerDeliveries)
	t.Run("AccountToUserDeliveries", testAccountToManySetOpUserDeliveries)
	t.Run("AccountToOrderHandlerOrders", testAccountToManySetOpOrderHandlerOrders)
	t.Run("AccountToUserOrders", testAccountToManySetOpUserOrders)
	t.Run("BranchToAccounts", testBranchToManySetOpAccounts)
	t.Run("BranchToDeliveries", testBranchToManySetOpDeliveries)
	t.Run("BranchToDishes", testBranchToManySetOpDishes)
	t.Run("BranchToGuests", testBranchToManySetOpGuests)
	t.Run("BranchToOrders", testBranchToManySetOpOrders)
	t.Run("BranchToRegulations", testBranchToManySetOpRegulations)
	t.Run("BranchToSets", testBranchToManySetOpSets)
	t.Run("BranchToTables", testBranchToManySetOpTables)
	t.Run("DishToDishPriceHistories", testDishToManySetOpDishPriceHistories)
	t.Run("GuestToDeliveries", testGuestToManySetOpDeliveries)
	t.Run("GuestToOrders", testGuestToManySetOpOrders)
	t.Run("OrderToDeliveries", testOrderToManySetOpDeliveries)
	t.Run("TableToTableNumberDeliveries", testTableToManySetOpTableNumberDeliveries)
	t.Run("TableToTableNumberGuests", testTableToManySetOpTableNumberGuests)
	t.Run("TableToTableNumberOrders", testTableToManySetOpTableNumberOrders)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("AccountToOwnerAccounts", testAccountToManyRemoveOpOwnerAccounts)
	t.Run("AccountToOrderHandlerDeliveries", testAccountToManyRemoveOpOrderHandlerDeliveries)
	t.Run("AccountToUserDeliveries", testAccountToManyRemoveOpUserDeliveries)
	t.Run("AccountToOrderHandlerOrders", testAccountToManyRemoveOpOrderHandlerOrders)
	t.Run("AccountToUserOrders", testAccountToManyRemoveOpUserOrders)
	t.Run("BranchToAccounts", testBranchToManyRemoveOpAccounts)
	t.Run("BranchToDeliveries", testBranchToManyRemoveOpDeliveries)
	t.Run("BranchToDishes", testBranchToManyRemoveOpDishes)
	t.Run("BranchToGuests", testBranchToManyRemoveOpGuests)
	t.Run("BranchToOrders", testBranchToManyRemoveOpOrders)
	t.Run("BranchToRegulations", testBranchToManyRemoveOpRegulations)
	t.Run("BranchToSets", testBranchToManyRemoveOpSets)
	t.Run("BranchToTables", testBranchToManyRemoveOpTables)
	t.Run("DishToDishPriceHistories", testDishToManyRemoveOpDishPriceHistories)
	t.Run("GuestToDeliveries", testGuestToManyRemoveOpDeliveries)
	t.Run("GuestToOrders", testGuestToManyRemoveOpOrders)
	t.Run("OrderToDeliveries", testOrderToManyRemoveOpDeliveries)
	t.Run("TableToTableNumberDeliveries", testTableToManyRemoveOpTableNumberDeliveries)
	t.Run("TableToTableNumberGuests", testTableToManyRemoveOpTableNumberGuests)
	t.Run("TableToTableNumberOrders", testTableToManyRemoveOpTableNumberOrders)
}
