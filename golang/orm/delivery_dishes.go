// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// DeliveryDish is an object representing the database table.
type DeliveryDish struct {
	DeliveryID int64 `boil:"delivery_id" json:"delivery_id" toml:"delivery_id" yaml:"delivery_id"`
	DishID     int64 `boil:"dish_id" json:"dish_id" toml:"dish_id" yaml:"dish_id"`
	Quantity   int   `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`

	R *deliveryDishR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deliveryDishL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeliveryDishColumns = struct {
	DeliveryID string
	DishID     string
	Quantity   string
}{
	DeliveryID: "delivery_id",
	DishID:     "dish_id",
	Quantity:   "quantity",
}

var DeliveryDishTableColumns = struct {
	DeliveryID string
	DishID     string
	Quantity   string
}{
	DeliveryID: "delivery_dishes.delivery_id",
	DishID:     "delivery_dishes.dish_id",
	Quantity:   "delivery_dishes.quantity",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var DeliveryDishWhere = struct {
	DeliveryID whereHelperint64
	DishID     whereHelperint64
	Quantity   whereHelperint
}{
	DeliveryID: whereHelperint64{field: "\"delivery_dishes\".\"delivery_id\""},
	DishID:     whereHelperint64{field: "\"delivery_dishes\".\"dish_id\""},
	Quantity:   whereHelperint{field: "\"delivery_dishes\".\"quantity\""},
}

// DeliveryDishRels is where relationship names are stored.
var DeliveryDishRels = struct {
	Delivery string
	Dish     string
}{
	Delivery: "Delivery",
	Dish:     "Dish",
}

// deliveryDishR is where relationships are stored.
type deliveryDishR struct {
	Delivery *Delivery `boil:"Delivery" json:"Delivery" toml:"Delivery" yaml:"Delivery"`
	Dish     *Dish     `boil:"Dish" json:"Dish" toml:"Dish" yaml:"Dish"`
}

// NewStruct creates a new relationship struct
func (*deliveryDishR) NewStruct() *deliveryDishR {
	return &deliveryDishR{}
}

func (o *DeliveryDish) GetDelivery() *Delivery {
	if o == nil {
		return nil
	}

	return o.R.GetDelivery()
}

func (r *deliveryDishR) GetDelivery() *Delivery {
	if r == nil {
		return nil
	}

	return r.Delivery
}

func (o *DeliveryDish) GetDish() *Dish {
	if o == nil {
		return nil
	}

	return o.R.GetDish()
}

func (r *deliveryDishR) GetDish() *Dish {
	if r == nil {
		return nil
	}

	return r.Dish
}

// deliveryDishL is where Load methods for each relationship are stored.
type deliveryDishL struct{}

var (
	deliveryDishAllColumns            = []string{"delivery_id", "dish_id", "quantity"}
	deliveryDishColumnsWithoutDefault = []string{"delivery_id", "dish_id", "quantity"}
	deliveryDishColumnsWithDefault    = []string{}
	deliveryDishPrimaryKeyColumns     = []string{"delivery_id", "dish_id"}
	deliveryDishGeneratedColumns      = []string{}
)

type (
	// DeliveryDishSlice is an alias for a slice of pointers to DeliveryDish.
	// This should almost always be used instead of []DeliveryDish.
	DeliveryDishSlice []*DeliveryDish
	// DeliveryDishHook is the signature for custom DeliveryDish hook methods
	DeliveryDishHook func(context.Context, boil.ContextExecutor, *DeliveryDish) error

	deliveryDishQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deliveryDishType                 = reflect.TypeOf(&DeliveryDish{})
	deliveryDishMapping              = queries.MakeStructMapping(deliveryDishType)
	deliveryDishPrimaryKeyMapping, _ = queries.BindMapping(deliveryDishType, deliveryDishMapping, deliveryDishPrimaryKeyColumns)
	deliveryDishInsertCacheMut       sync.RWMutex
	deliveryDishInsertCache          = make(map[string]insertCache)
	deliveryDishUpdateCacheMut       sync.RWMutex
	deliveryDishUpdateCache          = make(map[string]updateCache)
	deliveryDishUpsertCacheMut       sync.RWMutex
	deliveryDishUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var deliveryDishAfterSelectMu sync.Mutex
var deliveryDishAfterSelectHooks []DeliveryDishHook

var deliveryDishBeforeInsertMu sync.Mutex
var deliveryDishBeforeInsertHooks []DeliveryDishHook
var deliveryDishAfterInsertMu sync.Mutex
var deliveryDishAfterInsertHooks []DeliveryDishHook

var deliveryDishBeforeUpdateMu sync.Mutex
var deliveryDishBeforeUpdateHooks []DeliveryDishHook
var deliveryDishAfterUpdateMu sync.Mutex
var deliveryDishAfterUpdateHooks []DeliveryDishHook

var deliveryDishBeforeDeleteMu sync.Mutex
var deliveryDishBeforeDeleteHooks []DeliveryDishHook
var deliveryDishAfterDeleteMu sync.Mutex
var deliveryDishAfterDeleteHooks []DeliveryDishHook

var deliveryDishBeforeUpsertMu sync.Mutex
var deliveryDishBeforeUpsertHooks []DeliveryDishHook
var deliveryDishAfterUpsertMu sync.Mutex
var deliveryDishAfterUpsertHooks []DeliveryDishHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeliveryDish) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryDishAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeliveryDish) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryDishBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeliveryDish) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryDishAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeliveryDish) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryDishBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeliveryDish) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryDishAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeliveryDish) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryDishBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeliveryDish) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryDishAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeliveryDish) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryDishBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeliveryDish) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryDishAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeliveryDishHook registers your hook function for all future operations.
func AddDeliveryDishHook(hookPoint boil.HookPoint, deliveryDishHook DeliveryDishHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		deliveryDishAfterSelectMu.Lock()
		deliveryDishAfterSelectHooks = append(deliveryDishAfterSelectHooks, deliveryDishHook)
		deliveryDishAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		deliveryDishBeforeInsertMu.Lock()
		deliveryDishBeforeInsertHooks = append(deliveryDishBeforeInsertHooks, deliveryDishHook)
		deliveryDishBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		deliveryDishAfterInsertMu.Lock()
		deliveryDishAfterInsertHooks = append(deliveryDishAfterInsertHooks, deliveryDishHook)
		deliveryDishAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		deliveryDishBeforeUpdateMu.Lock()
		deliveryDishBeforeUpdateHooks = append(deliveryDishBeforeUpdateHooks, deliveryDishHook)
		deliveryDishBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		deliveryDishAfterUpdateMu.Lock()
		deliveryDishAfterUpdateHooks = append(deliveryDishAfterUpdateHooks, deliveryDishHook)
		deliveryDishAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		deliveryDishBeforeDeleteMu.Lock()
		deliveryDishBeforeDeleteHooks = append(deliveryDishBeforeDeleteHooks, deliveryDishHook)
		deliveryDishBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		deliveryDishAfterDeleteMu.Lock()
		deliveryDishAfterDeleteHooks = append(deliveryDishAfterDeleteHooks, deliveryDishHook)
		deliveryDishAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		deliveryDishBeforeUpsertMu.Lock()
		deliveryDishBeforeUpsertHooks = append(deliveryDishBeforeUpsertHooks, deliveryDishHook)
		deliveryDishBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		deliveryDishAfterUpsertMu.Lock()
		deliveryDishAfterUpsertHooks = append(deliveryDishAfterUpsertHooks, deliveryDishHook)
		deliveryDishAfterUpsertMu.Unlock()
	}
}

// One returns a single deliveryDish record from the query.
func (q deliveryDishQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeliveryDish, error) {
	o := &DeliveryDish{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for delivery_dishes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DeliveryDish records from the query.
func (q deliveryDishQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeliveryDishSlice, error) {
	var o []*DeliveryDish

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to DeliveryDish slice")
	}

	if len(deliveryDishAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DeliveryDish records in the query.
func (q deliveryDishQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count delivery_dishes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deliveryDishQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if delivery_dishes exists")
	}

	return count > 0, nil
}

// Delivery pointed to by the foreign key.
func (o *DeliveryDish) Delivery(mods ...qm.QueryMod) deliveryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DeliveryID),
	}

	queryMods = append(queryMods, mods...)

	return Deliveries(queryMods...)
}

// Dish pointed to by the foreign key.
func (o *DeliveryDish) Dish(mods ...qm.QueryMod) dishQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DishID),
	}

	queryMods = append(queryMods, mods...)

	return Dishes(queryMods...)
}

// LoadDelivery allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deliveryDishL) LoadDelivery(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeliveryDish interface{}, mods queries.Applicator) error {
	var slice []*DeliveryDish
	var object *DeliveryDish

	if singular {
		var ok bool
		object, ok = maybeDeliveryDish.(*DeliveryDish)
		if !ok {
			object = new(DeliveryDish)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeliveryDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeliveryDish))
			}
		}
	} else {
		s, ok := maybeDeliveryDish.(*[]*DeliveryDish)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeliveryDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeliveryDish))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &deliveryDishR{}
		}
		args[object.DeliveryID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryDishR{}
			}

			args[obj.DeliveryID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`deliveries`),
		qm.WhereIn(`deliveries.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Delivery")
	}

	var resultSlice []*Delivery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Delivery")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for deliveries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for deliveries")
	}

	if len(deliveryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Delivery = foreign
		if foreign.R == nil {
			foreign.R = &deliveryR{}
		}
		foreign.R.DeliveryDishes = append(foreign.R.DeliveryDishes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeliveryID == foreign.ID {
				local.R.Delivery = foreign
				if foreign.R == nil {
					foreign.R = &deliveryR{}
				}
				foreign.R.DeliveryDishes = append(foreign.R.DeliveryDishes, local)
				break
			}
		}
	}

	return nil
}

// LoadDish allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deliveryDishL) LoadDish(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeliveryDish interface{}, mods queries.Applicator) error {
	var slice []*DeliveryDish
	var object *DeliveryDish

	if singular {
		var ok bool
		object, ok = maybeDeliveryDish.(*DeliveryDish)
		if !ok {
			object = new(DeliveryDish)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeliveryDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeliveryDish))
			}
		}
	} else {
		s, ok := maybeDeliveryDish.(*[]*DeliveryDish)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeliveryDish)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeliveryDish))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &deliveryDishR{}
		}
		args[object.DishID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryDishR{}
			}

			args[obj.DishID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`dishes`),
		qm.WhereIn(`dishes.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Dish")
	}

	var resultSlice []*Dish
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Dish")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dishes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dishes")
	}

	if len(dishAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Dish = foreign
		if foreign.R == nil {
			foreign.R = &dishR{}
		}
		foreign.R.DeliveryDishes = append(foreign.R.DeliveryDishes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DishID == foreign.ID {
				local.R.Dish = foreign
				if foreign.R == nil {
					foreign.R = &dishR{}
				}
				foreign.R.DeliveryDishes = append(foreign.R.DeliveryDishes, local)
				break
			}
		}
	}

	return nil
}

// SetDelivery of the deliveryDish to the related item.
// Sets o.R.Delivery to related.
// Adds o to related.R.DeliveryDishes.
func (o *DeliveryDish) SetDelivery(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Delivery) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"delivery_dishes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"delivery_id"}),
		strmangle.WhereClause("\"", "\"", 2, deliveryDishPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.DeliveryID, o.DishID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeliveryID = related.ID
	if o.R == nil {
		o.R = &deliveryDishR{
			Delivery: related,
		}
	} else {
		o.R.Delivery = related
	}

	if related.R == nil {
		related.R = &deliveryR{
			DeliveryDishes: DeliveryDishSlice{o},
		}
	} else {
		related.R.DeliveryDishes = append(related.R.DeliveryDishes, o)
	}

	return nil
}

// SetDish of the deliveryDish to the related item.
// Sets o.R.Dish to related.
// Adds o to related.R.DeliveryDishes.
func (o *DeliveryDish) SetDish(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Dish) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"delivery_dishes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"dish_id"}),
		strmangle.WhereClause("\"", "\"", 2, deliveryDishPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.DeliveryID, o.DishID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DishID = related.ID
	if o.R == nil {
		o.R = &deliveryDishR{
			Dish: related,
		}
	} else {
		o.R.Dish = related
	}

	if related.R == nil {
		related.R = &dishR{
			DeliveryDishes: DeliveryDishSlice{o},
		}
	} else {
		related.R.DeliveryDishes = append(related.R.DeliveryDishes, o)
	}

	return nil
}

// DeliveryDishes retrieves all the records using an executor.
func DeliveryDishes(mods ...qm.QueryMod) deliveryDishQuery {
	mods = append(mods, qm.From("\"delivery_dishes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"delivery_dishes\".*"})
	}

	return deliveryDishQuery{q}
}

// FindDeliveryDish retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeliveryDish(ctx context.Context, exec boil.ContextExecutor, deliveryID int64, dishID int64, selectCols ...string) (*DeliveryDish, error) {
	deliveryDishObj := &DeliveryDish{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"delivery_dishes\" where \"delivery_id\"=$1 AND \"dish_id\"=$2", sel,
	)

	q := queries.Raw(query, deliveryID, dishID)

	err := q.Bind(ctx, exec, deliveryDishObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from delivery_dishes")
	}

	if err = deliveryDishObj.doAfterSelectHooks(ctx, exec); err != nil {
		return deliveryDishObj, err
	}

	return deliveryDishObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeliveryDish) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no delivery_dishes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deliveryDishColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deliveryDishInsertCacheMut.RLock()
	cache, cached := deliveryDishInsertCache[key]
	deliveryDishInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deliveryDishAllColumns,
			deliveryDishColumnsWithDefault,
			deliveryDishColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deliveryDishType, deliveryDishMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deliveryDishType, deliveryDishMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"delivery_dishes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"delivery_dishes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into delivery_dishes")
	}

	if !cached {
		deliveryDishInsertCacheMut.Lock()
		deliveryDishInsertCache[key] = cache
		deliveryDishInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DeliveryDish.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeliveryDish) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	deliveryDishUpdateCacheMut.RLock()
	cache, cached := deliveryDishUpdateCache[key]
	deliveryDishUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deliveryDishAllColumns,
			deliveryDishPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update delivery_dishes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"delivery_dishes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, deliveryDishPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deliveryDishType, deliveryDishMapping, append(wl, deliveryDishPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update delivery_dishes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for delivery_dishes")
	}

	if !cached {
		deliveryDishUpdateCacheMut.Lock()
		deliveryDishUpdateCache[key] = cache
		deliveryDishUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q deliveryDishQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for delivery_dishes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for delivery_dishes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeliveryDishSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryDishPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"delivery_dishes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, deliveryDishPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in deliveryDish slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all deliveryDish")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeliveryDish) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no delivery_dishes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deliveryDishColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deliveryDishUpsertCacheMut.RLock()
	cache, cached := deliveryDishUpsertCache[key]
	deliveryDishUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			deliveryDishAllColumns,
			deliveryDishColumnsWithDefault,
			deliveryDishColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deliveryDishAllColumns,
			deliveryDishPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert delivery_dishes, could not build update column list")
		}

		ret := strmangle.SetComplement(deliveryDishAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(deliveryDishPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert delivery_dishes, could not build conflict column list")
			}

			conflict = make([]string, len(deliveryDishPrimaryKeyColumns))
			copy(conflict, deliveryDishPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"delivery_dishes\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(deliveryDishType, deliveryDishMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deliveryDishType, deliveryDishMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert delivery_dishes")
	}

	if !cached {
		deliveryDishUpsertCacheMut.Lock()
		deliveryDishUpsertCache[key] = cache
		deliveryDishUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DeliveryDish record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeliveryDish) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no DeliveryDish provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deliveryDishPrimaryKeyMapping)
	sql := "DELETE FROM \"delivery_dishes\" WHERE \"delivery_id\"=$1 AND \"dish_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from delivery_dishes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for delivery_dishes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deliveryDishQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no deliveryDishQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from delivery_dishes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for delivery_dishes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeliveryDishSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(deliveryDishBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryDishPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"delivery_dishes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliveryDishPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from deliveryDish slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for delivery_dishes")
	}

	if len(deliveryDishAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeliveryDish) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeliveryDish(ctx, exec, o.DeliveryID, o.DishID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeliveryDishSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeliveryDishSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryDishPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"delivery_dishes\".* FROM \"delivery_dishes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliveryDishPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in DeliveryDishSlice")
	}

	*o = slice

	return nil
}

// DeliveryDishExists checks if the DeliveryDish row exists.
func DeliveryDishExists(ctx context.Context, exec boil.ContextExecutor, deliveryID int64, dishID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"delivery_dishes\" where \"delivery_id\"=$1 AND \"dish_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, deliveryID, dishID)
	}
	row := exec.QueryRowContext(ctx, sql, deliveryID, dishID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if delivery_dishes exists")
	}

	return exists, nil
}

// Exists checks if the DeliveryDish row exists.
func (o *DeliveryDish) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeliveryDishExists(ctx, exec, o.DeliveryID, o.DishID)
}
