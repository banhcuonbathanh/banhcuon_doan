# docs/swagger/account/swagger_account_auth/login.yaml
/account/swagger_account_auth/login:
  post:
    summary: "User login"
    description: |
      Authenticate user with email and password credentials.
      
      **Authentication Flow:**
      1. Validates request format and required fields
      2. Authenticates credentials against user database
      3. Generates JWT access token (1 hour expiry)
      4. Generates refresh token (7 days expiry)
      5. Returns tokens with user profile data
      
      **Test Scenarios Covered:**
      - ✅ **Successful login** - Valid credentials return tokens and user data
      - ❌ **Invalid JSON** - Malformed request body returns 400 error
      - ❌ **Invalid credentials** - Wrong email/password returns 401 error
      - ❌ **Token generation failure** - Server error returns 500 error
      
      **Security Features:**
      - Password verification with secure hashing
      - JWT token generation with expiration
      - Request validation and sanitization
      - Error handling without information leakage
      
    tags:
      - Authentication
    consumes:
      - application/json
    produces:
      - application/json
    parameters:
      - in: body
        name: request
        description: Login credentials
        required: true
        schema:
          $ref: "#/definitions/LoginRequest"
    responses:
      200:
        description: "✅ Successful login"
        schema:
          $ref: "#/definitions/LoginUserRes"
        examples:
          application/json:
            access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNjMwMDAwMDAwLCJleHAiOjE2MzAwMDM2MDB9.signature"
            refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwidHlwZSI6InJlZnJlc2giLCJpYXQiOjE2MzAwMDAwMDAsImV4cCI6MTYzMDYwNDgwMH0.signature"
            user:
              id: 1
              branch_id: 1
              name: "John Doe"
              email: "john@example.com"
              avatar: "avatar.jpg"
              title: "Senior Developer" 
              role: "user"
              owner_id: 1
      400:
        description: "❌ Bad request - Invalid input data"
        schema:
          $ref: "#/definitions/ErrorResponse"
        examples:
          invalid_json:
            summary: "Invalid JSON format"
            value:
              error: "invalid_request"
              message: "Invalid JSON format"
          missing_email:
            summary: "Missing required field"
            value:
              error: "validation_error"
              message: "Validation failed"
              details:
                email: "Email is required"
          invalid_email_format:
            summary: "Invalid email format"
            value:
              error: "validation_error" 
              message: "Validation failed"
              details:
                email: "Invalid email format"
          missing_password:
            summary: "Missing password"
            value:
              error: "validation_error"
              message: "Validation failed"
              details:
                password: "Password is required"
      401:
        description: "❌ Unauthorized - Invalid credentials"
        schema:
          $ref: "#/definitions/ErrorResponse"
        examples:
          wrong_password:
            summary: "Wrong password"
            value:
              error: "invalid_credentials"
              message: "Invalid email or password"
          user_not_found:
            summary: "Email not found"
            value:
              error: "invalid_credentials"
              message: "Invalid email or password"
          account_disabled:
            summary: "Account disabled"
            value:
              error: "account_disabled"
              message: "Account has been disabled"
      500:
        description: "❌ Internal server error"
        schema:
          $ref: "#/definitions/ErrorResponse"
        examples:
          token_generation_error:
            summary: "JWT token generation failed"
            value:
              error: "internal_error"
              message: "Authentication processing failed"
          database_error:
            summary: "Database connection failed"
            value:
              error: "service_error"
              message: "Service temporarily unavailable"
          grpc_service_error:
            summary: "Backend service error"
            value:
              error: "service_error"
              message: "Authentication service unavailable"
    x-code-samples:
      - lang: "curl"
        source: |
          curl -X POST "http://localhost:8888/account/auth/login" \
            -H "Content-Type: application/json" \
            -d '{
              "email": "john@example.com",
              "password": "password123"
            }'
      - lang: "JavaScript"
        source: |
          const response = await fetch('/account/auth/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              email: 'john@example.com',
              password: 'password123'
            })
          });
          const data = await response.json();
      - lang: "Go"
        source: |
          type LoginReq struct {
            Email    string `json:"email"`
            Password string `json:"password"`
          }
          
          req := LoginReq{
            Email:    "john@example.com",
            Password: "password123",
          }
          
          jsonData, _ := json.Marshal(req)
          resp, err := http.Post("http://localhost:8888/account/auth/login", 
                                "application/json", bytes.NewBuffer(jsonData))